<generatedTop>
  <k>
    End
  </k>
  <begin>
    .
  </begin>
  <currentstate>
    "text"
  </currentstate>
  <nextloc>
    V0
  </nextloc>
  <functarget>
    start |-> 32'0
  </functarget>
  <instructiontext>
    code ( memloc ( 32'0 ) |-> storedInstr ( MOV d0 , # V1 , .Operands )
    memloc ( 32'1 ) |-> storedInstr ( MOV d1 , # V2 , .Operands )
    memloc ( 32'2 ) |-> storedInstr ( VMAXNM . F64 d2 , d0 , d1 , .Operands )
    memloc ( 32'3 ) |-> storedInstr ( end .Operands ) )
  </instructiontext>
  <regstate>
    "CONTROL" |-> 32'1
    "CONTROL_NS" |-> 32'1
    "CONTROL_S" |-> 32'1
    "CPACR" |-> 32'3145728
    "CPACR_NS" |-> 32'3145728
    "CPACR_S" |-> 32'3145728
    "CPPWR" |-> 32'0
    "CPPWR_NS" |-> 32'0
    "CPPWR_S" |-> 32'0
    "D0" |-> mi ( 64 , V1 )
    "D1" |-> mi ( 64 , V2 )
    "EPSR" |-> 32'2048
    "FPCCR" |-> 32'2147483648
    "FPCCR_NS" |-> 32'2147483648
    "FPCCR_S" |-> 32'2147483648
    "FPSCR" |-> 32'50331648
    "MVFR1" |-> 32'256
    "NSACR" |-> 32'1024
    "R15" |-> memloc ( 32'4 )
    "RESULT64" |-> 64'0
    "RESULT" |-> 32'0
    "S0" |-> mi ( 32 , V1 )
    "S1" |-> extractMInt ( mi ( 64 , V1 ) , 0 , 32 )
    "S2" |-> mi ( 32 , V2 )
    "S3" |-> extractMInt ( mi ( 64 , V2 ) , 0 , 32 )
    "S4" |-> ifMInt ( uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 1 , 12 ) ) ==K 2047 ) andBool eqMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 13 ) , 1'1 ) andBool ( uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 1 , 12 ) ) ==K 2047 andBool eqMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 13 ) , 1'1 ) ) then 32'0 else ifMInt ( uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 1 , 12 ) ) ==K 2047 andBool ( neMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 32 ) , mi ( 32 , V1 ) ) , 52'0 ) andBool eqMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 13 ) , 1'0 ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 1 , 12 ) ) ==K 2047 andBool ( neMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 32 ) , mi ( 32 , V2 ) ) , 52'0 ) andBool eqMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 13 ) , 1'0 ) ) ) then 32'0 else ifMInt ( uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 1 , 12 ) ) ==K 2047 ) andBool eqMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 13 ) , 1'1 ) then mi ( 32 , V2 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 1 , 12 ) ) ==K 2047 ) andBool eqMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 13 ) , 1'1 ) then mi ( 32 , V1 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 32 , V2 ) , 1 , 12 ) ) ==K 2047 ) andBool eqMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 32 ) , mi ( 32 , V2 ) ) , 52'0 ) then ifMInt eqMInt ( extractMInt ( mi ( 64 , V2 ) , 0 , 1 ) , 1'1 ) then mi ( 32 , V1 ) else mi ( 32 , V2 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 32 , V1 ) , 1 , 12 ) ) ==K 2047 ) andBool eqMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 32 ) , mi ( 32 , V1 ) ) , 52'0 ) then ifMInt eqMInt ( extractMInt ( mi ( 64 , V1 ) , 0 , 1 ) , 1'1 ) then mi ( 32 , V2 ) else mi ( 32 , V1 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 1 , 12 ) ) ==K 0 ) andBool eqMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 32 ) , mi ( 32 , V1 ) ) , 52'0 ) andBool ( uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 1 , 12 ) ) ==K 0 andBool eqMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 32 ) , mi ( 32 , V2 ) ) , 52'0 ) ) andBool ugtMInt ( extractMInt ( mi ( 64 , V1 ) , 0 , 1 ) , extractMInt ( mi ( 64 , V2 ) , 0 , 1 ) ) then mi ( 32 , V2 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 1 , 12 ) ) ==K 0 ) andBool eqMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 32 ) , mi ( 32 , V1 ) ) , 52'0 ) andBool ( uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 1 , 12 ) ) ==K 0 andBool eqMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 32 ) , mi ( 32 , V2 ) ) , 52'0 ) ) andBool uleMInt ( extractMInt ( mi ( 64 , V1 ) , 0 , 1 ) , extractMInt ( mi ( 64 , V2 ) , 0 , 1 ) ) then mi ( 32 , V1 ) else ifMInt MIntToFloatImpl ( 53 , 11 , uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 0 , 1 ) ) , uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 1 , 12 ) ) , uvalueMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 32 ) , mi ( 32 , V1 ) ) ) ) <=Float MIntToFloatImpl ( 53 , 11 , uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 0 , 1 ) ) , uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 1 , 12 ) ) , uvalueMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 32 ) , mi ( 32 , V2 ) ) ) ) then mi ( 32 , V2 ) else mi ( 32 , V1 )
    "S5" |-> ifMInt ( uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 1 , 12 ) ) ==K 2047 ) andBool eqMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 13 ) , 1'1 ) andBool ( uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 1 , 12 ) ) ==K 2047 andBool eqMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 13 ) , 1'1 ) ) then 32'2146959360 else ifMInt ( uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 1 , 12 ) ) ==K 2047 andBool ( neMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 32 ) , mi ( 32 , V1 ) ) , 52'0 ) andBool eqMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 13 ) , 1'0 ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 1 , 12 ) ) ==K 2047 andBool ( neMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 32 ) , mi ( 32 , V2 ) ) , 52'0 ) andBool eqMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 13 ) , 1'0 ) ) ) then 32'2146959360 else ifMInt ( uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 1 , 12 ) ) ==K 2047 ) andBool eqMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 13 ) , 1'1 ) then extractMInt ( mi ( 64 , V2 ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 1 , 12 ) ) ==K 2047 ) andBool eqMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 13 ) , 1'1 ) then extractMInt ( mi ( 64 , V1 ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 32 , V2 ) , 1 , 12 ) ) ==K 2047 ) andBool eqMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 32 ) , mi ( 32 , V2 ) ) , 52'0 ) then ifMInt eqMInt ( extractMInt ( mi ( 64 , V2 ) , 0 , 1 ) , 1'1 ) then extractMInt ( mi ( 64 , V1 ) , 0 , 32 ) else extractMInt ( mi ( 64 , V2 ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 32 , V1 ) , 1 , 12 ) ) ==K 2047 ) andBool eqMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 32 ) , mi ( 32 , V1 ) ) , 52'0 ) then ifMInt eqMInt ( extractMInt ( mi ( 64 , V1 ) , 0 , 1 ) , 1'1 ) then extractMInt ( mi ( 64 , V2 ) , 0 , 32 ) else extractMInt ( mi ( 64 , V1 ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 1 , 12 ) ) ==K 0 ) andBool eqMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 32 ) , mi ( 32 , V1 ) ) , 52'0 ) andBool ( uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 1 , 12 ) ) ==K 0 andBool eqMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 32 ) , mi ( 32 , V2 ) ) , 52'0 ) ) andBool ugtMInt ( extractMInt ( mi ( 64 , V1 ) , 0 , 1 ) , extractMInt ( mi ( 64 , V2 ) , 0 , 1 ) ) then extractMInt ( mi ( 64 , V2 ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 1 , 12 ) ) ==K 0 ) andBool eqMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 32 ) , mi ( 32 , V1 ) ) , 52'0 ) andBool ( uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 1 , 12 ) ) ==K 0 andBool eqMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 32 ) , mi ( 32 , V2 ) ) , 52'0 ) ) andBool uleMInt ( extractMInt ( mi ( 64 , V1 ) , 0 , 1 ) , extractMInt ( mi ( 64 , V2 ) , 0 , 1 ) ) then extractMInt ( mi ( 64 , V1 ) , 0 , 32 ) else ifMInt MIntToFloatImpl ( 53 , 11 , uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 0 , 1 ) ) , uvalueMInt ( extractMInt ( mi ( 64 , V1 ) , 1 , 12 ) ) , uvalueMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V1 ) , 12 , 32 ) , mi ( 32 , V1 ) ) ) ) <=Float MIntToFloatImpl ( 53 , 11 , uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 0 , 1 ) ) , uvalueMInt ( extractMInt ( mi ( 64 , V2 ) , 1 , 12 ) ) , uvalueMInt ( concatenateMInt ( extractMInt ( mi ( 64 , V2 ) , 12 , 32 ) , mi ( 32 , V2 ) ) ) ) then extractMInt ( mi ( 64 , V2 ) , 0 , 32 ) else extractMInt ( mi ( 64 , V1 ) , 0 , 32 )
    "VPR" |-> 32'2048
    convToRegKeysHelper ( convSubVecRegsToRegs ( d2 , 2 ) ) |-> undefMInt32
    convToRegKeysHelper ( convSubVecRegsToRegs ( d2 , 3 ) ) |-> undefMInt32
    convToRegKeysHelper ( convSubVecRegsToRegs ( d2 , 4 ) ) |-> undefMInt32
  </regstate>
  V3
</generatedTop>
