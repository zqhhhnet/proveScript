require "armv8-semantics.k"

module TEST-SPEC-VMAXNMQ-F32

  imports ARMV8-SEMANTICS

  rule <k>
         scan => End
       </k>
       <begin>
         .K
       </begin>
       <currentstate>
         "text"
       </currentstate>
       <nextloc>
         _:MInt
       </nextloc>
       <functarget>
         start |-> mi(32, 0)
       </functarget>
       <instructiontext>
         code ( memloc(mi(32, 0)) |-> storedInstr ( VMOV q0 , (# N:Int):Imm , .Operands )
         memloc(mi(32, 1)) |-> storedInstr ( VMOV q1 , (# M:Int):Imm , .Operands )
         memloc(mi(32, 2)) |-> storedInstr ( VMAXNM . F32 q2 , q0 , q1 , .Operands )
         memloc(mi(32, 3)) |-> storedInstr ( end .Operands ) )
       </instructiontext>
       <regstate>
         "CONTROL" |-> (mi(32, _:Int) => mi(32, 1))
         "CONTROL_NS" |-> (mi(32, _:Int) => mi(32, 1))
         "CONTROL_S" |-> (mi(32, _:Int) => mi(32, 1))
         "CPACR" |-> (mi(32, _:Int) => mi(32, 3145728))
         "CPACR_NS" |-> (mi(32, _:Int) => mi(32, 3145728))
         "CPACR_S" |-> (mi(32, _:Int) => mi(32, 3145728))
         "CPPWR" |-> (mi(32, _:Int) => mi(32, 0))
         "CPPWR_NS" |-> (mi(32, _:Int) => mi(32, 0))
         "CPPWR_S" |-> (mi(32, _:Int) => mi(32, 0))
         "EPSR" |-> (mi(32, _:Int) => mi(32, 2048))
         "FPCCR" |-> (mi(32, _:Int) => mi(32, 2147483648))
         "FPCCR_NS" |-> (mi(32, _:Int) => mi(32, 2147483648))
         "FPCCR_S" |-> (mi(32, _:Int) => mi(32, 2147483648))
         "FPSCR" |-> ( mi(32, _:Int) => ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 50331649 ) else mi ( 32 , 50331648 ) )
         "MVFR1" |-> (mi(32, _:Int) => mi(32, 256))
         "NSACR" |-> (mi(32, _:Int) => mi(32, 1024))
         "Q0"  |-> mi(128, N)
         "Q1"  |-> mi(128, M)
         "Q2"  |-> ( mi(128, _:Int) => concatenateMInt ( ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 0 , 1 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 0 , 32 ) else extractMInt ( mi ( 128 , M ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else extractMInt ( mi ( 128 , N ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) , extractMInt ( mi ( 128 , M ) , 0 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) , extractMInt ( mi ( 128 , M ) , 0 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 0 , 32 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 0 , 1 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else extractMInt ( mi ( 128 , N ) , 0 , 32 ) , concatenateMInt ( ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 42 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 42 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 42 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 42 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 42 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 42 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 32 , 33 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 32 , 64 ) else extractMInt ( mi ( 128 , M ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 32 , 33 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 32 , 64 ) else extractMInt ( mi ( 128 , N ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 32 , 33 ) , extractMInt ( mi ( 128 , M ) , 32 , 33 ) ) then extractMInt ( mi ( 128 , M ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 32 , 33 ) , extractMInt ( mi ( 128 , M ) , 32 , 33 ) ) then extractMInt ( mi ( 128 , N ) , 32 , 64 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 32 , 33 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 32 , 33 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) ) ) then extractMInt ( mi ( 128 , M ) , 32 , 64 ) else extractMInt ( mi ( 128 , N ) , 32 , 64 ) , concatenateMInt ( ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 74 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 74 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 74 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 74 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 74 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 74 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 64 , 65 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 64 , 96 ) else extractMInt ( mi ( 128 , M ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 64 , 65 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 64 , 96 ) else extractMInt ( mi ( 128 , N ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 64 , 65 ) , extractMInt ( mi ( 128 , M ) , 64 , 65 ) ) then extractMInt ( mi ( 128 , M ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 64 , 65 ) , extractMInt ( mi ( 128 , M ) , 64 , 65 ) ) then extractMInt ( mi ( 128 , N ) , 64 , 96 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 64 , 65 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 64 , 65 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) ) ) then extractMInt ( mi ( 128 , M ) , 64 , 96 ) else extractMInt ( mi ( 128 , N ) , 64 , 96 ) , ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 106 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 106 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 106 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 106 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 106 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 106 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 96 , 97 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 96 , 128 ) else extractMInt ( mi ( 128 , M ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 96 , 97 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 96 , 128 ) else extractMInt ( mi ( 128 , N ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 96 , 97 ) , extractMInt ( mi ( 128 , M ) , 96 , 97 ) ) then extractMInt ( mi ( 128 , M ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 96 , 97 ) , extractMInt ( mi ( 128 , M ) , 96 , 97 ) ) then extractMInt ( mi ( 128 , N ) , 96 , 128 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 96 , 97 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 96 , 97 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) ) ) then extractMInt ( mi ( 128 , M ) , 96 , 128 ) else extractMInt ( mi ( 128 , N ) , 96 , 128 ) ) ) ) )
         "S0" |-> (mi(32, _:Int) => extractMInt(mi(128, modImm128(# N)), 96, 128))
         "S1" |-> (mi(32, _:Int) => extractMInt(mi(128, modImm128(# N)), 64, 96))
         "S2" |-> (mi(32, _:Int) => extractMInt(mi(128, modImm128(# N)), 32, 64))
         "S3" |-> (mi(32, _:Int) => extractMInt(mi(128, modImm128(# N)), 0, 32))
         "S4" |-> (mi(32, _:Int) => extractMInt(mi(128, modImm128(# M)), 96, 128))
         "S5" |-> (mi(32, _:Int) => extractMInt(mi(128, modImm128(# M)), 64, 96))
         "S6" |-> (mi(32, _:Int) => extractMInt(mi(128, modImm128(# M)), 32, 64))
         "S7" |-> (mi(32, _:Int) => extractMInt(mi(128, modImm128(# M)), 0, 32))
         "S8" |-> (mi(32, _:Int) => ifMInt notBool IsUndef ( ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 106 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 106 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 106 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 106 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 106 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 106 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 96 , 97 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 96 , 128 ) else extractMInt ( mi ( 128 , M ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 96 , 97 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 96 , 128 ) else extractMInt ( mi ( 128 , N ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 96 , 97 ) , extractMInt ( mi ( 128 , M ) , 96 , 97 ) ) then extractMInt ( mi ( 128 , M ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 96 , 97 ) , extractMInt ( mi ( 128 , M ) , 96 , 97 ) ) then extractMInt ( mi ( 128 , N ) , 96 , 128 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 96 , 97 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 96 , 97 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) ) ) then extractMInt ( mi ( 128 , M ) , 96 , 128 ) else extractMInt ( mi ( 128 , N ) , 96 , 128 ) ) then ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 106 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 106 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 106 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 106 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 106 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 106 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 96 , 97 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 96 , 128 ) else extractMInt ( mi ( 128 , M ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 96 , 97 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 96 , 128 ) else extractMInt ( mi ( 128 , N ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 96 , 97 ) , extractMInt ( mi ( 128 , M ) , 96 , 97 ) ) then extractMInt ( mi ( 128 , M ) , 96 , 128 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 96 , 97 ) , extractMInt ( mi ( 128 , M ) , 96 , 97 ) ) then extractMInt ( mi ( 128 , N ) , 96 , 128 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 96 , 97 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 97 , 105 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 105 , 128 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 96 , 97 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 97 , 105 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 105 , 128 ) ) ) then extractMInt ( mi ( 128 , M ) , 96 , 128 ) else extractMInt ( mi ( 128 , N ) , 96 , 128 ) else undefMInt32 )
         "S9" |-> (mi(32, _:Int) => ifMInt notBool IsUndef ( ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 74 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 74 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 74 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 74 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 74 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 74 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 64 , 65 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 64 , 96 ) else extractMInt ( mi ( 128 , M ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 64 , 65 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 64 , 96 ) else extractMInt ( mi ( 128 , N ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 64 , 65 ) , extractMInt ( mi ( 128 , M ) , 64 , 65 ) ) then extractMInt ( mi ( 128 , M ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 64 , 65 ) , extractMInt ( mi ( 128 , M ) , 64 , 65 ) ) then extractMInt ( mi ( 128 , N ) , 64 , 96 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 64 , 65 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 64 , 65 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) ) ) then extractMInt ( mi ( 128 , M ) , 64 , 96 ) else extractMInt ( mi ( 128 , N ) , 64 , 96 ) ) then ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 74 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 74 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 74 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 74 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 74 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 74 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 64 , 65 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 64 , 96 ) else extractMInt ( mi ( 128 , M ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 64 , 65 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 64 , 96 ) else extractMInt ( mi ( 128 , N ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 64 , 65 ) , extractMInt ( mi ( 128 , M ) , 64 , 65 ) ) then extractMInt ( mi ( 128 , M ) , 64 , 96 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 64 , 65 ) , extractMInt ( mi ( 128 , M ) , 64 , 65 ) ) then extractMInt ( mi ( 128 , N ) , 64 , 96 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 64 , 65 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 65 , 73 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 73 , 96 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 64 , 65 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 65 , 73 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 73 , 96 ) ) ) then extractMInt ( mi ( 128 , M ) , 64 , 96 ) else extractMInt ( mi ( 128 , N ) , 64 , 96 ) else undefMInt32 )
         "S10" |-> (mi(32, _:Int) => ifMInt notBool IsUndef ( ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 42 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 42 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 42 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 42 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 42 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 42 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 32 , 33 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 32 , 64 ) else extractMInt ( mi ( 128 , M ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 32 , 33 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 32 , 64 ) else extractMInt ( mi ( 128 , N ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 32 , 33 ) , extractMInt ( mi ( 128 , M ) , 32 , 33 ) ) then extractMInt ( mi ( 128 , M ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 32 , 33 ) , extractMInt ( mi ( 128 , M ) , 32 , 33 ) ) then extractMInt ( mi ( 128 , N ) , 32 , 64 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 32 , 33 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 32 , 33 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) ) ) then extractMInt ( mi ( 128 , M ) , 32 , 64 ) else extractMInt ( mi ( 128 , N ) , 32 , 64 ) ) then ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 42 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 42 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 42 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 42 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 42 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 42 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 32 , 33 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 32 , 64 ) else extractMInt ( mi ( 128 , M ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 32 , 33 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 32 , 64 ) else extractMInt ( mi ( 128 , N ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 32 , 33 ) , extractMInt ( mi ( 128 , M ) , 32 , 33 ) ) then extractMInt ( mi ( 128 , M ) , 32 , 64 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 32 , 33 ) , extractMInt ( mi ( 128 , M ) , 32 , 33 ) ) then extractMInt ( mi ( 128 , N ) , 32 , 64 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 32 , 33 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 33 , 41 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 41 , 64 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 32 , 33 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 33 , 41 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 41 , 64 ) ) ) then extractMInt ( mi ( 128 , M ) , 32 , 64 ) else extractMInt ( mi ( 128 , N ) , 32 , 64 ) else undefMInt32 )
         "S11" |-> (mi(32, _:Int) => ifMInt notBool IsUndef ( ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 0 , 1 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 0 , 32 ) else extractMInt ( mi ( 128 , M ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else extractMInt ( mi ( 128 , N ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) , extractMInt ( mi ( 128 , M ) , 0 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) , extractMInt ( mi ( 128 , M ) , 0 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 0 , 32 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 0 , 1 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else extractMInt ( mi ( 128 , N ) , 0 , 32 ) ) then ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 0 , 1 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 0 , 32 ) else extractMInt ( mi ( 128 , M ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else extractMInt ( mi ( 128 , N ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) , extractMInt ( mi ( 128 , M ) , 0 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) , extractMInt ( mi ( 128 , M ) , 0 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 0 , 32 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 0 , 1 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else extractMInt ( mi ( 128 , N ) , 0 , 32 ) else undefMInt32 )
         "RESULT" |-> ( mi(32, 0) => ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 1 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 1 ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 0 ) ) ) ) orBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 andBool ( neMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 0 ) ) ) ) then mi ( 32 , 2143289344 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 10 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 10 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , M ) , 0 , 1 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 0 , 32 ) else extractMInt ( mi ( 128 , M ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 255 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) then ifMInt eqMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) , mi ( 1 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else extractMInt ( mi ( 128 , N ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) ) andBool ugtMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) , extractMInt ( mi ( 128 , M ) , 0 , 1 ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else ifMInt ( uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) ==K 0 ) andBool eqMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) , mi ( 23 , 0 ) ) andBool ( uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) ==K 0 andBool eqMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) , mi ( 23 , 0 ) ) ) andBool uleMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) , extractMInt ( mi ( 128 , M ) , 0 , 1 ) ) then extractMInt ( mi ( 128 , N ) , 0 , 32 ) else ifMInt MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 0 , 1 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 1 , 9 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , N ) , 9 , 32 ) ) ) <=Float MIntToFloatImpl ( 24 , 8 , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 0 , 1 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 1 , 9 ) ) , uvalueMInt ( extractMInt ( mi ( 128 , M ) , 9 , 32 ) ) ) then extractMInt ( mi ( 128 , M ) , 0 , 32 ) else extractMInt ( mi ( 128 , N ) , 0 , 32 ) )
         "RESULT64" |-> mi(64, 0)
         "R15" |-> (memloc(mi(32, 0)) => memloc(mi(32, 4)))
         "VPR" |-> (mi(32, _:Int) => mi(32, 2048))
       </regstate>
         requires  N >=Int 0
           andBool N <Int (2 ^Int 128)
           andBool M >=Int 0
           andBool M <Int (2 ^Int 128)

endmodule
