// rule of LHS

<generatedTop>(<k>(KItem(#"scan")),, <begin>(#EmptyK()),, <currentstate>(String(#""text"")),, <nextloc>(_0_758:MInt),, <functarget>(Start(#"start") |-> MInt(#"32'0")   ),, <instructiontext>(code(memloc(MInt(#"32'1")) |-> storedInstr(___ARMV8-SYNTAX(Opcode(#"VMOV"),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(M_727:Int),, .List{"_,__ARMV8-SYNTAX"}(.KList))))) memloc(MInt(#"32'0")) |-> storedInstr(___ARMV8-SYNTAX(Opcode(#"VMOV"),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(N_728:Int),, .List{"_,__ARMV8-SYNTAX"}(.KList))))) memloc(MInt(#"32'3")) |-> storedInstr(___ARMV8-SYNTAX(end_ARMV8-SYNTAX(.KList),, .List{"_,__ARMV8-SYNTAX"}(.KList))) memloc(MInt(#"32'2")) |-> storedInstr(_.___ARMV8-SYNTAX(Opcode(#"VMIN"),, S32_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q2_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, .List{"_,__ARMV8-SYNTAX"}(.KList))))))   )),, <regstate>(String(#""Q1"") |-> mi(Int(#"128"),, M_727:Int) String(#""S3"") |-> mi(Int(#"32"),, _20_748:Int) String(#""Q2"") |-> mi(Int(#"128"),, _16_744:Int) String(#""S4"") |-> mi(Int(#"32"),, _21_749:Int) String(#""CPACR_NS"") |-> mi(Int(#"32"),, _5_733:Int) String(#""S5"") |-> mi(Int(#"32"),, _22_750:Int) String(#""S6"") |-> mi(Int(#"32"),, _23_751:Int) String(#""S7"") |-> mi(Int(#"32"),, _24_752:Int) String(#""S8"") |-> mi(Int(#"32"),, _25_753:Int) String(#""S9"") |-> mi(Int(#"32"),, _26_754:Int) String(#""CPPWR"") |-> mi(Int(#"32"),, _7_735:Int) String(#""FPCCR_NS"") |-> mi(Int(#"32"),, _12_740:Int) String(#""CPACR_S"") |-> mi(Int(#"32"),, _6_734:Int) String(#""CPPWR_NS"") |-> mi(Int(#"32"),, _8_736:Int) String(#""FPCCR"") |-> mi(Int(#"32"),, _11_739:Int) String(#""VPR"") |-> mi(Int(#"32"),, _29_757:Int) String(#""CONTROL_S"") |-> mi(Int(#"32"),, _3_731:Int) String(#""CPPWR_S"") |-> mi(Int(#"32"),, _9_737:Int) String(#""EPSR"") |-> mi(Int(#"32"),, _10_738:Int) String(#""CONTROL_NS"") |-> mi(Int(#"32"),, _2_730:Int) String(#""S11"") |-> mi(Int(#"32"),, _28_756:Int) String(#""S10"") |-> mi(Int(#"32"),, _27_755:Int) String(#""CPACR"") |-> mi(Int(#"32"),, _4_732:Int) String(#""R15"") |-> memloc(MInt(#"32'0")) String(#""MVFR1"") |-> mi(Int(#"32"),, _14_742:Int) String(#""RESULT64"") |-> MInt(#"64'0") String(#""NSACR"") |-> mi(Int(#"32"),, _15_743:Int) String(#""FPCCR_S"") |-> mi(Int(#"32"),, _13_741:Int) String(#""S0"") |-> mi(Int(#"32"),, _17_745:Int) String(#""RESULT"") |-> MInt(#"32'0") String(#""S1"") |-> mi(Int(#"32"),, _18_746:Int) String(#""CONTROL"") |-> mi(Int(#"32"),, _1_729:Int) String(#""Q0"") |-> mi(Int(#"128"),, N_728:Int) String(#""S2"") |-> mi(Int(#"32"),, _19_747:Int)   ),, DotVar0_759:K)

========= 

// rule of RHS

<generatedTop>(<k>(End_ARMV8-LOADER(.KList)),, <begin>(#EmptyK()),, <currentstate>(String(#""text"")),, <nextloc>(_0_758:MInt),, <functarget>(Start(#"start") |-> MInt(#"32'0")   ),, <instructiontext>(code(memloc(MInt(#"32'1")) |-> storedInstr(___ARMV8-SYNTAX(Opcode(#"VMOV"),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(M_727:Int),, .List{"_,__ARMV8-SYNTAX"}(.KList))))) memloc(MInt(#"32'0")) |-> storedInstr(___ARMV8-SYNTAX(Opcode(#"VMOV"),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(N_728:Int),, .List{"_,__ARMV8-SYNTAX"}(.KList))))) memloc(MInt(#"32'3")) |-> storedInstr(___ARMV8-SYNTAX(end_ARMV8-SYNTAX(.KList),, .List{"_,__ARMV8-SYNTAX"}(.KList))) memloc(MInt(#"32'2")) |-> storedInstr(_.___ARMV8-SYNTAX(Opcode(#"VMIN"),, S32_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q2_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, .List{"_,__ARMV8-SYNTAX"}(.KList))))))   )),, <regstate>(String(#""Q1"") |-> mi(Int(#"128"),, M_727:Int) String(#""S3"") |-> extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"0"),, Int(#"32")) String(#""Q2"") |-> concatenateMInt(ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"0"),, Int(#"32"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"0"),, Int(#"32")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"0"),, Int(#"32")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"0"),, Int(#"32"))),, concatenateMInt(ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"32"),, Int(#"64"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"32"),, Int(#"64")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"32"),, Int(#"64")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"32"),, Int(#"64"))),, concatenateMInt(ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"64"),, Int(#"96"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"64"),, Int(#"96")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"64"),, Int(#"96")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"64"),, Int(#"96"))),, ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"96"),, Int(#"128"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"96"),, Int(#"128")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"96"),, Int(#"128")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"96"),, Int(#"128")))))) String(#""S4"") |-> extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"96"),, Int(#"128")) String(#""CPACR_NS"") |-> MInt(#"32'3145728") String(#""S5"") |-> extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"64"),, Int(#"96")) String(#""S6"") |-> extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"32"),, Int(#"64")) String(#""S7"") |-> extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"0"),, Int(#"32")) String(#""S8"") |-> ifMInt_then_else__ARMV8-MINT-SYNTAX(notBool_(IsUndef(ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"96"),, Int(#"128"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"96"),, Int(#"128")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"96"),, Int(#"128")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"96"),, Int(#"128"))))),, ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"96"),, Int(#"128"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"96"),, Int(#"128")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"96"),, Int(#"128")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"96"),, Int(#"128"))),, undefMInt32_ARMV8-MINT-SYNTAX(.KList)) String(#""S9"") |-> ifMInt_then_else__ARMV8-MINT-SYNTAX(notBool_(IsUndef(ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"64"),, Int(#"96"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"64"),, Int(#"96")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"64"),, Int(#"96")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"64"),, Int(#"96"))))),, ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"64"),, Int(#"96"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"64"),, Int(#"96")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"64"),, Int(#"96")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"64"),, Int(#"96"))),, undefMInt32_ARMV8-MINT-SYNTAX(.KList)) String(#""CPPWR"") |-> MInt(#"32'0") String(#""FPCCR_NS"") |-> MInt(#"32'0") String(#""CPACR_S"") |-> MInt(#"32'3145728") String(#""CPPWR_NS"") |-> MInt(#"32'0") String(#""FPCCR"") |-> MInt(#"32'0") String(#""VPR"") |-> MInt(#"32'2048") String(#""CONTROL_S"") |-> MInt(#"32'1") String(#""CPPWR_S"") |-> MInt(#"32'0") String(#""EPSR"") |-> MInt(#"32'2048") String(#""CONTROL_NS"") |-> MInt(#"32'1") String(#""S11"") |-> ifMInt_then_else__ARMV8-MINT-SYNTAX(notBool_(IsUndef(ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"0"),, Int(#"32"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"0"),, Int(#"32")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"0"),, Int(#"32")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"0"),, Int(#"32"))))),, ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"0"),, Int(#"32"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"0"),, Int(#"32")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"0"),, Int(#"32")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"0"),, Int(#"32"))),, undefMInt32_ARMV8-MINT-SYNTAX(.KList)) String(#""S10"") |-> ifMInt_then_else__ARMV8-MINT-SYNTAX(notBool_(IsUndef(ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"32"),, Int(#"64"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"32"),, Int(#"64")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"32"),, Int(#"64")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"32"),, Int(#"64"))))),, ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"32"),, Int(#"64"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"32"),, Int(#"64")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"32"),, Int(#"64")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"32"),, Int(#"64"))),, undefMInt32_ARMV8-MINT-SYNTAX(.KList)) String(#""CPACR"") |-> MInt(#"32'3145728") String(#""R15"") |-> memloc(MInt(#"32'4")) String(#""MVFR1"") |-> MInt(#"32'256") String(#""RESULT64"") |-> MInt(#"64'0") String(#""NSACR"") |-> MInt(#"32'1024") String(#""FPCCR_S"") |-> MInt(#"32'0") String(#""S0"") |-> extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"96"),, Int(#"128")) String(#""RESULT"") |-> ifMInt_then_else__ARMV8-MINT-SYNTAX(_>=Int_(svalueMInt(extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"0"),, Int(#"32"))),, svalueMInt(extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"0"),, Int(#"32")))),, extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"0"),, Int(#"32")),, extractMInt(mi(Int(#"128"),, M_727:Int),, Int(#"0"),, Int(#"32"))) String(#""S1"") |-> extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"64"),, Int(#"96")) String(#""CONTROL"") |-> MInt(#"32'1") String(#""Q0"") |-> mi(Int(#"128"),, N_728:Int) String(#""S2"") |-> extractMInt(mi(Int(#"128"),, N_728:Int),, Int(#"32"),, Int(#"64"))   ),, DotVar0_759:K)

