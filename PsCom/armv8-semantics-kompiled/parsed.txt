module ADD-FOR-TEST [org.kframework.attributes.Location(Location(3,1,17,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/add-for-test.k))]
  imports ARMV8-CONFIGURATION
  imports ADD-FOR-TEST$SYNTAX
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("ADD","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,7,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/add-for-test.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("ADD","Opcode")),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rn),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rm),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),addMInt(getParentValue(#SemanticCastToR32(Rn),#SemanticCastToMap(RSMap)),getParentValue(#SemanticCastToR32(Rm),#SemanticCastToMap(RSMap))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(9) org.kframework.attributes.Location(Location(9,8,14,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/add-for-test.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module ADD-FOR-TEST$SYNTAX [org.kframework.attributes.Location(Location(3,1,17,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/add-for-test.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module ARMV8-ABSTRACT-SEMANTIC [org.kframework.attributes.Location(Location(3,1,510,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))]
  imports ARMV8-CONFIGURATION
  imports ARMV8-ABSTRACT-SEMANTIC$SYNTAX
  rule uMulofInt8(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2))=>mi(#token("64","Int"),`_+Int_`(`_+Int_`(`_+Int_`(`_*Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("24","Int"),#token("32","Int"))),uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("24","Int"),#token("32","Int")))),`_*Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("16","Int"),#token("24","Int"))),uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("16","Int"),#token("24","Int"))))),`_*Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("8","Int"),#token("16","Int"))),uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("8","Int"),#token("16","Int"))))),`_*Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("8","Int"))),uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("8","Int")))))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(493) org.kframework.attributes.Location(Location(493,8,493,387)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule uMulofInt32(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2))=>mi(#token("64","Int"),`_*Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("32","Int"))),uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("32","Int"))))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(497) org.kframework.attributes.Location(Location(497,8,497,134)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule uMulofInt16(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2))=>mi(#token("64","Int"),`_+Int_`(`_*Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("16","Int"))),uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("16","Int")))),`_*Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("16","Int"),#token("32","Int"))),uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("16","Int"),#token("32","Int")))))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(495) org.kframework.attributes.Location(Location(495,8,495,220)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule sMulofInt8(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2))=>mi(#token("64","Int"),`_+Int_`(`_+Int_`(`_+Int_`(`_*Int_`(svalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("24","Int"),#token("32","Int"))),svalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("24","Int"),#token("32","Int")))),`_*Int_`(svalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("16","Int"),#token("24","Int"))),svalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("16","Int"),#token("24","Int"))))),`_*Int_`(svalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("8","Int"),#token("16","Int"))),svalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("8","Int"),#token("16","Int"))))),`_*Int_`(svalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("8","Int"))),svalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("8","Int")))))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(499) org.kframework.attributes.Location(Location(499,8,499,387)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule sMulofInt32(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2))=>mi(#token("64","Int"),`_*Int_`(svalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("32","Int"))),svalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("32","Int"))))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(503) org.kframework.attributes.Location(Location(503,8,503,134)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule sMulofInt16(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2))=>mi(#token("64","Int"),`_+Int_`(`_*Int_`(svalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("16","Int"))),svalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("16","Int")))),`_*Int_`(svalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("16","Int"),#token("32","Int"))),svalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("16","Int"),#token("32","Int")))))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(501) org.kframework.attributes.Location(Location(501,8,501,220)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule modImm64(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))))=>`_modInt_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),#token("64","Int"))) requires `_>=Int_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),#token("64","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(336) org.kframework.attributes.Location(Location(336,8,336,84)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule modImm64(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))))=>`_modInt_`(#SemanticCastToInt(I),`_^Int_`(#token("-2","Int"),#token("63","Int"))) requires `_<Int_`(#SemanticCastToInt(I),`_^Int_`(#token("-2","Int"),#token("63","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(338) org.kframework.attributes.Location(Location(338,8,338,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule modImm64(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))))=>#SemanticCastToInt(I) requires `_andBool_`(`_<Int_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),#token("64","Int"))),`_>=Int_`(#SemanticCastToInt(I),`_^Int_`(#token("-2","Int"),#token("63","Int")))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(339) org.kframework.attributes.Location(Location(339,8,339,93)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule modImm32(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))))=>`_modInt_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),#token("32","Int"))) requires `_>=Int_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),#token("32","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(332) org.kframework.attributes.Location(Location(332,8,332,84)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule modImm32(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))))=>`_modInt_`(#SemanticCastToInt(I),`_^Int_`(#token("-2","Int"),#token("31","Int"))) requires `_<Int_`(#SemanticCastToInt(I),`_^Int_`(#token("-2","Int"),#token("31","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(333) org.kframework.attributes.Location(Location(333,8,333,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule modImm32(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))))=>#SemanticCastToInt(I) requires `_andBool_`(`_<=Int_`(`_^Int_`(#token("-2","Int"),#token("31","Int")),#SemanticCastToInt(I)),`_<Int_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),#token("32","Int")))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(334) org.kframework.attributes.Location(Location(334,8,334,97)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule modImm128(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))))=>`_modInt_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),#token("128","Int"))) requires `_>=Int_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),#token("128","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(340) org.kframework.attributes.Location(Location(340,8,340,87)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule modImm128(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))))=>`_modInt_`(#SemanticCastToInt(I),`_^Int_`(#token("-2","Int"),#token("127","Int"))) requires `_<Int_`(#SemanticCastToInt(I),`_^Int_`(#token("-2","Int"),#token("127","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(343) org.kframework.attributes.Location(Location(343,8,343,88)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule modImm128(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))))=>#SemanticCastToInt(I) requires `_andBool_`(`_<Int_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),#token("128","Int"))),`_>=Int_`(#SemanticCastToInt(I),`_^Int_`(#token("-2","Int"),#token("127","Int")))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(344) org.kframework.attributes.Location(Location(344,8,344,96)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule getVecParentValue(#SemanticCastToQ128(R),#SemanticCastToBeat(I),#SemanticCastToMap(RSMap))=>getRegisterValue(convSubVecRegsToRegs(#SemanticCastToQ128(R),#SemanticCastToBeat(I)),#SemanticCastToMap(RSMap)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(324) org.kframework.attributes.Location(Location(324,8,324,103)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule getVecParentValue(#SemanticCastToD64(R),#SemanticCastToBeat(I),#SemanticCastToMap(RSMap))=>getRegisterValue(convSubVecRegsToRegs(#SemanticCastToD64(R),#SemanticCastToBeat(I)),#SemanticCastToMap(RSMap)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(325) org.kframework.attributes.Location(Location(325,8,325,102)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule getRegisterValue(#SemanticCastToVirtualReg(R),#SemanticCastToMap(RSMap))=>extractMask(`project:MInt`(`Map:lookup`(#SemanticCastToMap(RSMap),convToRegKeys(#SemanticCastToVirtualReg(R)))),#token("64","Int"),#token("0","Int")) requires `_==K_`(#SemanticCastToVirtualReg(R),`result64_ARMV8-SYNTAX`(.KList)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(316) org.kframework.attributes.Location(Location(316,8,316,127)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule getRegisterValue(#SemanticCastToVirtualReg(R),#SemanticCastToMap(RSMap))=>extractMask(`project:MInt`(`Map:lookup`(#SemanticCastToMap(RSMap),convToRegKeys(#SemanticCastToVirtualReg(R)))),#token("32","Int"),#token("0","Int")) requires `_==K_`(#SemanticCastToVirtualReg(R),`result_ARMV8-SYNTAX`(.KList)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(315) org.kframework.attributes.Location(Location(315,8,315,125)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule getRegisterValue(#SemanticCastToS32(R),#SemanticCastToMap(RSMap))=>extractMask(`project:MInt`(`Map:lookup`(#SemanticCastToMap(RSMap),convToRegKeys(#SemanticCastToS32(R)))),#token("32","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(313) org.kframework.attributes.Location(Location(313,8,313,95)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule getRegisterValue(#SemanticCastToR32(R),#SemanticCastToMap(RSMap))=>extractMask(`project:MInt`(`Map:lookup`(#SemanticCastToMap(RSMap),convToRegKeys(#SemanticCastToR32(R)))),#token("32","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(312) org.kframework.attributes.Location(Location(312,8,312,96)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule getRegisterValue(#SemanticCastToQ128(R),#SemanticCastToMap(RSMap))=>extractMask(`project:MInt`(`Map:lookup`(#SemanticCastToMap(RSMap),convToRegKeys(#SemanticCastToQ128(R)))),#token("128","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(320) org.kframework.attributes.Location(Location(320,8,320,95)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule getRegisterValue(#SemanticCastToD64(R),#SemanticCastToMap(RSMap))=>extractMask(`project:MInt`(`Map:lookup`(#SemanticCastToMap(RSMap),convToRegKeys(#SemanticCastToD64(R)))),#token("64","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(318) org.kframework.attributes.Location(Location(318,8,318,93)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule getRegisterSize(#SemanticCastToR32(R))=>#token("32","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(380) org.kframework.attributes.Location(Location(380,8,380,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule getRegisterSize(#SemanticCastToQ128(R))=>#token("128","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(381) org.kframework.attributes.Location(Location(381,8,381,39)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule getRegisterBitsAtPositon(#SemanticCastToRegister(R),#SemanticCastToInt(N),#SemanticCastToInt(P),#SemanticCastToMap(RSMap))=>extractMask(getRegisterValue(#SemanticCastToRegister(R),#SemanticCastToMap(RSMap)),#SemanticCastToInt(N),#SemanticCastToInt(P)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(375) org.kframework.attributes.Location(Location(375,8,375,97)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule getRegI(#SemanticCastToString(RName),#SemanticCastToMap(RSMap))=>`project:Int`(`Map:lookup`(#SemanticCastToMap(RSMap),#SemanticCastToString(RName))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(393) org.kframework.attributes.Location(Location(393,8,393,52)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule getReg(#SemanticCastToString(RName),#SemanticCastToMap(RSMap))=>`project:MInt`(`Map:lookup`(#SemanticCastToMap(RSMap),#SemanticCastToString(RName))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(391) org.kframework.attributes.Location(Location(391,8,391,52)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule getParentValue(#SemanticCastToRegister(R),#SemanticCastToMap(RSMap))=>getRegisterValue(convSubRegsToRegs(#SemanticCastToRegister(R)),#SemanticCastToMap(RSMap)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(322) org.kframework.attributes.Location(Location(322,8,322,90)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convVecToRegKeys(#SemanticCastToQ128(R),#SemanticCastToBeat(I))=>convToRegKeysHelper(convSubVecRegsToRegs(#SemanticCastToQ128(R),#SemanticCastToBeat(I))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(18) org.kframework.attributes.Location(Location(18,8,18,91)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convVecToRegKeys(#SemanticCastToD64(R),#SemanticCastToBeat(I))=>convToRegKeysHelper(convSubVecRegsToRegs(#SemanticCastToD64(R),#SemanticCastToBeat(I))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(19) org.kframework.attributes.Location(Location(19,8,19,90)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s9_ARMV8-SYNTAX`(.KList))=>#token("\"S9\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(73) org.kframework.attributes.Location(Location(73,8,73,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s8_ARMV8-SYNTAX`(.KList))=>#token("\"S8\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(72) org.kframework.attributes.Location(Location(72,8,72,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s7_ARMV8-SYNTAX`(.KList))=>#token("\"S7\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(71) org.kframework.attributes.Location(Location(71,8,71,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s6_ARMV8-SYNTAX`(.KList))=>#token("\"S6\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(70) org.kframework.attributes.Location(Location(70,8,70,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s5_ARMV8-SYNTAX`(.KList))=>#token("\"S5\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(69) org.kframework.attributes.Location(Location(69,8,69,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s4_ARMV8-SYNTAX`(.KList))=>#token("\"S4\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(68) org.kframework.attributes.Location(Location(68,8,68,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s3_ARMV8-SYNTAX`(.KList))=>#token("\"S3\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(67) org.kframework.attributes.Location(Location(67,8,67,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s31_ARMV8-SYNTAX`(.KList))=>#token("\"S31\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(95) org.kframework.attributes.Location(Location(95,8,95,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s30_ARMV8-SYNTAX`(.KList))=>#token("\"S30\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(94) org.kframework.attributes.Location(Location(94,8,94,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s2_ARMV8-SYNTAX`(.KList))=>#token("\"S2\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(66) org.kframework.attributes.Location(Location(66,8,66,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s29_ARMV8-SYNTAX`(.KList))=>#token("\"S29\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(93) org.kframework.attributes.Location(Location(93,8,93,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s28_ARMV8-SYNTAX`(.KList))=>#token("\"S28\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(92) org.kframework.attributes.Location(Location(92,8,92,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s27_ARMV8-SYNTAX`(.KList))=>#token("\"S27\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(91) org.kframework.attributes.Location(Location(91,8,91,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s26_ARMV8-SYNTAX`(.KList))=>#token("\"S26\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(90) org.kframework.attributes.Location(Location(90,8,90,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s25_ARMV8-SYNTAX`(.KList))=>#token("\"S25\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(89) org.kframework.attributes.Location(Location(89,8,89,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s24_ARMV8-SYNTAX`(.KList))=>#token("\"S24\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(88) org.kframework.attributes.Location(Location(88,8,88,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s23_ARMV8-SYNTAX`(.KList))=>#token("\"S23\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(87) org.kframework.attributes.Location(Location(87,8,87,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s22_ARMV8-SYNTAX`(.KList))=>#token("\"S22\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(86) org.kframework.attributes.Location(Location(86,8,86,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s21_ARMV8-SYNTAX`(.KList))=>#token("\"S21\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(85) org.kframework.attributes.Location(Location(85,8,85,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s20_ARMV8-SYNTAX`(.KList))=>#token("\"S20\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(84) org.kframework.attributes.Location(Location(84,8,84,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s1_ARMV8-SYNTAX`(.KList))=>#token("\"S1\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(65) org.kframework.attributes.Location(Location(65,8,65,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s19_ARMV8-SYNTAX`(.KList))=>#token("\"S19\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(83) org.kframework.attributes.Location(Location(83,8,83,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s18_ARMV8-SYNTAX`(.KList))=>#token("\"S18\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(82) org.kframework.attributes.Location(Location(82,8,82,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s17_ARMV8-SYNTAX`(.KList))=>#token("\"S17\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(81) org.kframework.attributes.Location(Location(81,8,81,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s16_ARMV8-SYNTAX`(.KList))=>#token("\"S16\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(80) org.kframework.attributes.Location(Location(80,8,80,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s15_ARMV8-SYNTAX`(.KList))=>#token("\"S15\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(79) org.kframework.attributes.Location(Location(79,8,79,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s14_ARMV8-SYNTAX`(.KList))=>#token("\"S14\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(78) org.kframework.attributes.Location(Location(78,8,78,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s13_ARMV8-SYNTAX`(.KList))=>#token("\"S13\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(77) org.kframework.attributes.Location(Location(77,8,77,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s12_ARMV8-SYNTAX`(.KList))=>#token("\"S12\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(76) org.kframework.attributes.Location(Location(76,8,76,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s11_ARMV8-SYNTAX`(.KList))=>#token("\"S11\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(75) org.kframework.attributes.Location(Location(75,8,75,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s10_ARMV8-SYNTAX`(.KList))=>#token("\"S10\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(74) org.kframework.attributes.Location(Location(74,8,74,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`s0_ARMV8-SYNTAX`(.KList))=>#token("\"S0\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(64) org.kframework.attributes.Location(Location(64,8,64,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`result_ARMV8-SYNTAX`(.KList))=>#token("\"RESULT\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(97) org.kframework.attributes.Location(Location(97,8,97,47)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`result64_ARMV8-SYNTAX`(.KList))=>#token("\"RESULT64\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(98) org.kframework.attributes.Location(Location(98,8,98,51)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r9_ARMV8-SYNTAX`(.KList))=>#token("\"R9\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(56) org.kframework.attributes.Location(Location(56,8,56,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r8_ARMV8-SYNTAX`(.KList))=>#token("\"R8\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(55) org.kframework.attributes.Location(Location(55,8,55,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r7_ARMV8-SYNTAX`(.KList))=>#token("\"R7\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(54) org.kframework.attributes.Location(Location(54,8,54,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r6_ARMV8-SYNTAX`(.KList))=>#token("\"R6\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(53) org.kframework.attributes.Location(Location(53,8,53,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r5_ARMV8-SYNTAX`(.KList))=>#token("\"R5\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(52) org.kframework.attributes.Location(Location(52,8,52,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r4_ARMV8-SYNTAX`(.KList))=>#token("\"R4\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(51) org.kframework.attributes.Location(Location(51,8,51,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r3_ARMV8-SYNTAX`(.KList))=>#token("\"R3\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(50) org.kframework.attributes.Location(Location(50,8,50,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r2_ARMV8-SYNTAX`(.KList))=>#token("\"R2\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(49) org.kframework.attributes.Location(Location(49,8,49,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r1_ARMV8-SYNTAX`(.KList))=>#token("\"R1\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(48) org.kframework.attributes.Location(Location(48,8,48,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r15_ARMV8-SYNTAX`(.KList))=>#token("\"R15\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(62) org.kframework.attributes.Location(Location(62,8,62,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r14_ARMV8-SYNTAX`(.KList))=>#token("\"R14\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(61) org.kframework.attributes.Location(Location(61,8,61,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r13_ARMV8-SYNTAX`(.KList))=>#token("\"R13\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(60) org.kframework.attributes.Location(Location(60,8,60,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r12_ARMV8-SYNTAX`(.KList))=>#token("\"R12\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(59) org.kframework.attributes.Location(Location(59,8,59,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r11_ARMV8-SYNTAX`(.KList))=>#token("\"R11\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(58) org.kframework.attributes.Location(Location(58,8,58,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r10_ARMV8-SYNTAX`(.KList))=>#token("\"R10\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(57) org.kframework.attributes.Location(Location(57,8,57,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`r0_ARMV8-SYNTAX`(.KList))=>#token("\"R0\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(47) org.kframework.attributes.Location(Location(47,8,47,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`q7_ARMV8-SYNTAX`(.KList))=>#token("\"Q7\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(45) org.kframework.attributes.Location(Location(45,8,45,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`q6_ARMV8-SYNTAX`(.KList))=>#token("\"Q6\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(44) org.kframework.attributes.Location(Location(44,8,44,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`q5_ARMV8-SYNTAX`(.KList))=>#token("\"Q5\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(43) org.kframework.attributes.Location(Location(43,8,43,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`q4_ARMV8-SYNTAX`(.KList))=>#token("\"Q4\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(42) org.kframework.attributes.Location(Location(42,8,42,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`q3_ARMV8-SYNTAX`(.KList))=>#token("\"Q3\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(41) org.kframework.attributes.Location(Location(41,8,41,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`q2_ARMV8-SYNTAX`(.KList))=>#token("\"Q2\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(40) org.kframework.attributes.Location(Location(40,8,40,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`q1_ARMV8-SYNTAX`(.KList))=>#token("\"Q1\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(39) org.kframework.attributes.Location(Location(39,8,39,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`q0_ARMV8-SYNTAX`(.KList))=>#token("\"Q0\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(38) org.kframework.attributes.Location(Location(38,8,38,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d9_ARMV8-SYNTAX`(.KList))=>#token("\"D9\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(30) org.kframework.attributes.Location(Location(30,8,30,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d8_ARMV8-SYNTAX`(.KList))=>#token("\"D8\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(29) org.kframework.attributes.Location(Location(29,8,29,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d7_ARMV8-SYNTAX`(.KList))=>#token("\"D7\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(28) org.kframework.attributes.Location(Location(28,8,28,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d6_ARMV8-SYNTAX`(.KList))=>#token("\"D6\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(27) org.kframework.attributes.Location(Location(27,8,27,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d5_ARMV8-SYNTAX`(.KList))=>#token("\"D5\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(26) org.kframework.attributes.Location(Location(26,8,26,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d4_ARMV8-SYNTAX`(.KList))=>#token("\"D4\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(25) org.kframework.attributes.Location(Location(25,8,25,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d3_ARMV8-SYNTAX`(.KList))=>#token("\"D3\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(24) org.kframework.attributes.Location(Location(24,8,24,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d2_ARMV8-SYNTAX`(.KList))=>#token("\"D2\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(23) org.kframework.attributes.Location(Location(23,8,23,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d1_ARMV8-SYNTAX`(.KList))=>#token("\"D1\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(22) org.kframework.attributes.Location(Location(22,8,22,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d15_ARMV8-SYNTAX`(.KList))=>#token("\"D15\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(36) org.kframework.attributes.Location(Location(36,8,36,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d14_ARMV8-SYNTAX`(.KList))=>#token("\"D14\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(35) org.kframework.attributes.Location(Location(35,8,35,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d13_ARMV8-SYNTAX`(.KList))=>#token("\"D13\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(34) org.kframework.attributes.Location(Location(34,8,34,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d12_ARMV8-SYNTAX`(.KList))=>#token("\"D12\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(33) org.kframework.attributes.Location(Location(33,8,33,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d11_ARMV8-SYNTAX`(.KList))=>#token("\"D11\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) org.kframework.attributes.Location(Location(32,8,32,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d10_ARMV8-SYNTAX`(.KList))=>#token("\"D10\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(31) org.kframework.attributes.Location(Location(31,8,31,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeysHelper(`d0_ARMV8-SYNTAX`(.KList))=>#token("\"D0\"","String") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(21) org.kframework.attributes.Location(Location(21,8,21,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeys(#SemanticCastToVirtualReg(R))=>convToRegKeysHelper(convSubRegsToRegs(#SemanticCastToVirtualReg(R))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(12) org.kframework.attributes.Location(Location(12,8,12,81)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeys(#SemanticCastToS32(R))=>convToRegKeysHelper(convSubRegsToRegs(#SemanticCastToS32(R))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(10) org.kframework.attributes.Location(Location(10,8,10,74)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeys(#SemanticCastToR32(R))=>convToRegKeysHelper(convSubRegsToRegs(#SemanticCastToR32(R))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(11) org.kframework.attributes.Location(Location(11,8,11,74)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeys(#SemanticCastToQ128(R))=>convToRegKeysHelper(convSubRegsToRegs(#SemanticCastToQ128(R))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(16) org.kframework.attributes.Location(Location(16,8,16,74)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convToRegKeys(#SemanticCastToD64(R))=>convToRegKeysHelper(convSubRegsToRegs(#SemanticCastToD64(R))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(13) org.kframework.attributes.Location(Location(13,8,13,73)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q7_ARMV8-SYNTAX`(.KList),#token("3","Int"))=>`s31_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(271) org.kframework.attributes.Location(Location(271,8,271,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q7_ARMV8-SYNTAX`(.KList),#token("2","Int"))=>`s30_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(270) org.kframework.attributes.Location(Location(270,8,270,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q7_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s29_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(269) org.kframework.attributes.Location(Location(269,8,269,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q7_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s28_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(268) org.kframework.attributes.Location(Location(268,8,268,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q6_ARMV8-SYNTAX`(.KList),#token("3","Int"))=>`s27_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(266) org.kframework.attributes.Location(Location(266,8,266,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q6_ARMV8-SYNTAX`(.KList),#token("2","Int"))=>`s26_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(265) org.kframework.attributes.Location(Location(265,8,265,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q6_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s25_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(264) org.kframework.attributes.Location(Location(264,8,264,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q6_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s24_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(263) org.kframework.attributes.Location(Location(263,8,263,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q5_ARMV8-SYNTAX`(.KList),#token("3","Int"))=>`s23_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(261) org.kframework.attributes.Location(Location(261,8,261,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q5_ARMV8-SYNTAX`(.KList),#token("2","Int"))=>`s22_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(260) org.kframework.attributes.Location(Location(260,8,260,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q5_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s21_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(259) org.kframework.attributes.Location(Location(259,8,259,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q5_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s20_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(258) org.kframework.attributes.Location(Location(258,8,258,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q4_ARMV8-SYNTAX`(.KList),#token("3","Int"))=>`s19_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(256) org.kframework.attributes.Location(Location(256,8,256,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q4_ARMV8-SYNTAX`(.KList),#token("2","Int"))=>`s18_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(255) org.kframework.attributes.Location(Location(255,8,255,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q4_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s17_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(254) org.kframework.attributes.Location(Location(254,8,254,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q4_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s16_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(253) org.kframework.attributes.Location(Location(253,8,253,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q3_ARMV8-SYNTAX`(.KList),#token("3","Int"))=>`s15_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(251) org.kframework.attributes.Location(Location(251,8,251,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q3_ARMV8-SYNTAX`(.KList),#token("2","Int"))=>`s14_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(250) org.kframework.attributes.Location(Location(250,8,250,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q3_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s13_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(249) org.kframework.attributes.Location(Location(249,8,249,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q3_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s12_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(248) org.kframework.attributes.Location(Location(248,8,248,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q2_ARMV8-SYNTAX`(.KList),#token("3","Int"))=>`s11_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(246) org.kframework.attributes.Location(Location(246,8,246,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q2_ARMV8-SYNTAX`(.KList),#token("2","Int"))=>`s10_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(245) org.kframework.attributes.Location(Location(245,8,245,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q2_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s9_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(244) org.kframework.attributes.Location(Location(244,8,244,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q2_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s8_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(243) org.kframework.attributes.Location(Location(243,8,243,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q1_ARMV8-SYNTAX`(.KList),#token("3","Int"))=>`s7_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(241) org.kframework.attributes.Location(Location(241,8,241,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q1_ARMV8-SYNTAX`(.KList),#token("2","Int"))=>`s6_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(240) org.kframework.attributes.Location(Location(240,8,240,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q1_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s5_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(239) org.kframework.attributes.Location(Location(239,8,239,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q1_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s4_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(238) org.kframework.attributes.Location(Location(238,8,238,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q0_ARMV8-SYNTAX`(.KList),#token("3","Int"))=>`s3_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(236) org.kframework.attributes.Location(Location(236,8,236,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q0_ARMV8-SYNTAX`(.KList),#token("2","Int"))=>`s2_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(235) org.kframework.attributes.Location(Location(235,8,235,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q0_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s1_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(234) org.kframework.attributes.Location(Location(234,8,234,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`q0_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s0_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(233) org.kframework.attributes.Location(Location(233,8,233,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d9_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s19_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(213) org.kframework.attributes.Location(Location(213,8,213,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d9_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s18_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(212) org.kframework.attributes.Location(Location(212,8,212,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d8_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s17_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(210) org.kframework.attributes.Location(Location(210,8,210,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d8_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s16_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(209) org.kframework.attributes.Location(Location(209,8,209,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d7_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s15_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(207) org.kframework.attributes.Location(Location(207,8,207,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d7_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s14_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(206) org.kframework.attributes.Location(Location(206,8,206,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d6_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s13_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(204) org.kframework.attributes.Location(Location(204,8,204,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d6_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s12_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(203) org.kframework.attributes.Location(Location(203,8,203,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d5_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s11_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(201) org.kframework.attributes.Location(Location(201,8,201,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d5_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s10_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(200) org.kframework.attributes.Location(Location(200,8,200,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d4_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s9_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(198) org.kframework.attributes.Location(Location(198,8,198,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d4_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s8_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(197) org.kframework.attributes.Location(Location(197,8,197,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d3_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s7_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(195) org.kframework.attributes.Location(Location(195,8,195,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d3_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s6_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(194) org.kframework.attributes.Location(Location(194,8,194,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d2_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s5_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(192) org.kframework.attributes.Location(Location(192,8,192,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d2_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s4_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(191) org.kframework.attributes.Location(Location(191,8,191,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d1_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s3_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(189) org.kframework.attributes.Location(Location(189,8,189,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d1_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s2_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(188) org.kframework.attributes.Location(Location(188,8,188,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d15_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s31_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(231) org.kframework.attributes.Location(Location(231,8,231,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d15_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s30_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(230) org.kframework.attributes.Location(Location(230,8,230,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d14_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s29_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(228) org.kframework.attributes.Location(Location(228,8,228,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d14_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s28_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(227) org.kframework.attributes.Location(Location(227,8,227,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d13_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s27_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(225) org.kframework.attributes.Location(Location(225,8,225,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d13_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s26_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(224) org.kframework.attributes.Location(Location(224,8,224,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d12_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s25_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(222) org.kframework.attributes.Location(Location(222,8,222,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d12_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s24_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(221) org.kframework.attributes.Location(Location(221,8,221,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d11_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s23_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(219) org.kframework.attributes.Location(Location(219,8,219,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d11_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s22_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(218) org.kframework.attributes.Location(Location(218,8,218,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d10_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s21_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(216) org.kframework.attributes.Location(Location(216,8,216,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d10_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s20_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(215) org.kframework.attributes.Location(Location(215,8,215,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d0_ARMV8-SYNTAX`(.KList),#token("1","Int"))=>`s1_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(186) org.kframework.attributes.Location(Location(186,8,186,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubVecRegsToRegs(`d0_ARMV8-SYNTAX`(.KList),#token("0","Int"))=>`s0_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(185) org.kframework.attributes.Location(Location(185,8,185,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s9_ARMV8-SYNTAX`(.KList))=>`s9_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(161) org.kframework.attributes.Location(Location(161,8,161,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s8_ARMV8-SYNTAX`(.KList))=>`s8_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(160) org.kframework.attributes.Location(Location(160,8,160,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s7_ARMV8-SYNTAX`(.KList))=>`s7_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(159) org.kframework.attributes.Location(Location(159,8,159,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s6_ARMV8-SYNTAX`(.KList))=>`s6_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(158) org.kframework.attributes.Location(Location(158,8,158,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s5_ARMV8-SYNTAX`(.KList))=>`s5_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(157) org.kframework.attributes.Location(Location(157,8,157,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s4_ARMV8-SYNTAX`(.KList))=>`s4_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(156) org.kframework.attributes.Location(Location(156,8,156,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s3_ARMV8-SYNTAX`(.KList))=>`s3_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(155) org.kframework.attributes.Location(Location(155,8,155,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s31_ARMV8-SYNTAX`(.KList))=>`s31_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(183) org.kframework.attributes.Location(Location(183,8,183,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s30_ARMV8-SYNTAX`(.KList))=>`s30_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(182) org.kframework.attributes.Location(Location(182,8,182,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s2_ARMV8-SYNTAX`(.KList))=>`s2_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(154) org.kframework.attributes.Location(Location(154,8,154,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s29_ARMV8-SYNTAX`(.KList))=>`s29_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(181) org.kframework.attributes.Location(Location(181,8,181,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s28_ARMV8-SYNTAX`(.KList))=>`s28_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(180) org.kframework.attributes.Location(Location(180,8,180,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s27_ARMV8-SYNTAX`(.KList))=>`s27_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(179) org.kframework.attributes.Location(Location(179,8,179,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s26_ARMV8-SYNTAX`(.KList))=>`s26_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(178) org.kframework.attributes.Location(Location(178,8,178,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s25_ARMV8-SYNTAX`(.KList))=>`s25_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(177) org.kframework.attributes.Location(Location(177,8,177,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s24_ARMV8-SYNTAX`(.KList))=>`s24_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(176) org.kframework.attributes.Location(Location(176,8,176,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s23_ARMV8-SYNTAX`(.KList))=>`s23_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(175) org.kframework.attributes.Location(Location(175,8,175,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s22_ARMV8-SYNTAX`(.KList))=>`s22_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(174) org.kframework.attributes.Location(Location(174,8,174,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s21_ARMV8-SYNTAX`(.KList))=>`s21_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(173) org.kframework.attributes.Location(Location(173,8,173,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s20_ARMV8-SYNTAX`(.KList))=>`s20_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(172) org.kframework.attributes.Location(Location(172,8,172,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s1_ARMV8-SYNTAX`(.KList))=>`s1_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(153) org.kframework.attributes.Location(Location(153,8,153,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s19_ARMV8-SYNTAX`(.KList))=>`s19_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(171) org.kframework.attributes.Location(Location(171,8,171,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s18_ARMV8-SYNTAX`(.KList))=>`s18_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(170) org.kframework.attributes.Location(Location(170,8,170,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s17_ARMV8-SYNTAX`(.KList))=>`s17_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(169) org.kframework.attributes.Location(Location(169,8,169,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s16_ARMV8-SYNTAX`(.KList))=>`s16_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(168) org.kframework.attributes.Location(Location(168,8,168,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s15_ARMV8-SYNTAX`(.KList))=>`s15_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(167) org.kframework.attributes.Location(Location(167,8,167,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s14_ARMV8-SYNTAX`(.KList))=>`s14_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(166) org.kframework.attributes.Location(Location(166,8,166,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s13_ARMV8-SYNTAX`(.KList))=>`s13_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(165) org.kframework.attributes.Location(Location(165,8,165,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s12_ARMV8-SYNTAX`(.KList))=>`s12_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(164) org.kframework.attributes.Location(Location(164,8,164,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s11_ARMV8-SYNTAX`(.KList))=>`s11_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(163) org.kframework.attributes.Location(Location(163,8,163,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s10_ARMV8-SYNTAX`(.KList))=>`s10_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(162) org.kframework.attributes.Location(Location(162,8,162,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`s0_ARMV8-SYNTAX`(.KList))=>`s0_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(152) org.kframework.attributes.Location(Location(152,8,152,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`result_ARMV8-SYNTAX`(.KList))=>`result_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(123) org.kframework.attributes.Location(Location(123,8,123,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`result64_ARMV8-SYNTAX`(.KList))=>`result64_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(124) org.kframework.attributes.Location(Location(124,8,124,47)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r9_ARMV8-SYNTAX`(.KList))=>`r9_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(282) org.kframework.attributes.Location(Location(282,8,282,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r8_ARMV8-SYNTAX`(.KList))=>`r8_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(281) org.kframework.attributes.Location(Location(281,8,281,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r7_ARMV8-SYNTAX`(.KList))=>`r7_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(280) org.kframework.attributes.Location(Location(280,8,280,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r6_ARMV8-SYNTAX`(.KList))=>`r6_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(279) org.kframework.attributes.Location(Location(279,8,279,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r5_ARMV8-SYNTAX`(.KList))=>`r5_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(278) org.kframework.attributes.Location(Location(278,8,278,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r4_ARMV8-SYNTAX`(.KList))=>`r4_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(277) org.kframework.attributes.Location(Location(277,8,277,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r3_ARMV8-SYNTAX`(.KList))=>`r3_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(276) org.kframework.attributes.Location(Location(276,8,276,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r2_ARMV8-SYNTAX`(.KList))=>`r2_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(275) org.kframework.attributes.Location(Location(275,8,275,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r1_ARMV8-SYNTAX`(.KList))=>`r1_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(274) org.kframework.attributes.Location(Location(274,8,274,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r15_ARMV8-SYNTAX`(.KList))=>`r15_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(288) org.kframework.attributes.Location(Location(288,8,288,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r14_ARMV8-SYNTAX`(.KList))=>`r14_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(287) org.kframework.attributes.Location(Location(287,8,287,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r13_ARMV8-SYNTAX`(.KList))=>`r13_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(286) org.kframework.attributes.Location(Location(286,8,286,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r12_ARMV8-SYNTAX`(.KList))=>`r12_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(285) org.kframework.attributes.Location(Location(285,8,285,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r11_ARMV8-SYNTAX`(.KList))=>`r11_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(284) org.kframework.attributes.Location(Location(284,8,284,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r10_ARMV8-SYNTAX`(.KList))=>`r10_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(283) org.kframework.attributes.Location(Location(283,8,283,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`r0_ARMV8-SYNTAX`(.KList))=>`r0_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(273) org.kframework.attributes.Location(Location(273,8,273,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`q7_ARMV8-SYNTAX`(.KList))=>`q7_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(150) org.kframework.attributes.Location(Location(150,8,150,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`q6_ARMV8-SYNTAX`(.KList))=>`q6_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(149) org.kframework.attributes.Location(Location(149,8,149,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`q5_ARMV8-SYNTAX`(.KList))=>`q5_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(148) org.kframework.attributes.Location(Location(148,8,148,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`q4_ARMV8-SYNTAX`(.KList))=>`q4_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(147) org.kframework.attributes.Location(Location(147,8,147,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`q3_ARMV8-SYNTAX`(.KList))=>`q3_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(146) org.kframework.attributes.Location(Location(146,8,146,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`q2_ARMV8-SYNTAX`(.KList))=>`q2_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(145) org.kframework.attributes.Location(Location(145,8,145,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`q1_ARMV8-SYNTAX`(.KList))=>`q1_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(144) org.kframework.attributes.Location(Location(144,8,144,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`q0_ARMV8-SYNTAX`(.KList))=>`q0_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(143) org.kframework.attributes.Location(Location(143,8,143,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d9_ARMV8-SYNTAX`(.KList))=>`d9_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(135) org.kframework.attributes.Location(Location(135,8,135,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d8_ARMV8-SYNTAX`(.KList))=>`d8_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(134) org.kframework.attributes.Location(Location(134,8,134,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d7_ARMV8-SYNTAX`(.KList))=>`d7_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(133) org.kframework.attributes.Location(Location(133,8,133,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d6_ARMV8-SYNTAX`(.KList))=>`d6_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(132) org.kframework.attributes.Location(Location(132,8,132,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d5_ARMV8-SYNTAX`(.KList))=>`d5_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(131) org.kframework.attributes.Location(Location(131,8,131,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d4_ARMV8-SYNTAX`(.KList))=>`d4_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(130) org.kframework.attributes.Location(Location(130,8,130,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d3_ARMV8-SYNTAX`(.KList))=>`d3_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(129) org.kframework.attributes.Location(Location(129,8,129,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d2_ARMV8-SYNTAX`(.KList))=>`d2_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(128) org.kframework.attributes.Location(Location(128,8,128,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d1_ARMV8-SYNTAX`(.KList))=>`d1_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(127) org.kframework.attributes.Location(Location(127,8,127,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d15_ARMV8-SYNTAX`(.KList))=>`d15_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(141) org.kframework.attributes.Location(Location(141,8,141,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d14_ARMV8-SYNTAX`(.KList))=>`d14_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(140) org.kframework.attributes.Location(Location(140,8,140,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d13_ARMV8-SYNTAX`(.KList))=>`d13_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(139) org.kframework.attributes.Location(Location(139,8,139,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d12_ARMV8-SYNTAX`(.KList))=>`d12_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(138) org.kframework.attributes.Location(Location(138,8,138,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d11_ARMV8-SYNTAX`(.KList))=>`d11_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(137) org.kframework.attributes.Location(Location(137,8,137,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d10_ARMV8-SYNTAX`(.KList))=>`d10_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(136) org.kframework.attributes.Location(Location(136,8,136,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convSubRegsToRegs(`d0_ARMV8-SYNTAX`(.KList))=>`d0_ARMV8-SYNTAX`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(126) org.kframework.attributes.Location(Location(126,8,126,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MinMIntOfInt`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#SemanticCastToInt(I),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList))),`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>=Int_`(svalueMInt(#SemanticCastToMInt(MI1)),svalueMInt(#SemanticCastToMInt(MI2))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList))),`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>=Int_`(uvalueMInt(#SemanticCastToMInt(MI1)),uvalueMInt(#SemanticCastToMInt(MI2))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),mi(#SemanticCastToInt(I),#token("-1","Int")))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#SemanticCastToInt(I)),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#SemanticCastToInt(I))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(484) org.kframework.attributes.Location(Location(484,8,485,77)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `MinMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("32","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int"))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))))),ugtMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))))),uleMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(`MInt2Float`(#SemanticCastToMInt(MI1),#token("24","Int"),#token("8","Int")),`MInt2Float`(#SemanticCastToMInt(MI2),#token("24","Int"),#token("8","Int"))),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("32","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("32","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(468) org.kframework.attributes.Location(Location(468,8,469,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `MinMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("16","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))))),ugtMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))))),uleMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(`MInt2Float`(#SemanticCastToMInt(MI1),#token("11","Int"),#token("5","Int")),`MInt2Float`(#SemanticCastToMInt(MI2),#token("11","Int"),#token("5","Int"))),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("16","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("16","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(465) org.kframework.attributes.Location(Location(465,8,466,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `MaxMIntOfInt`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#SemanticCastToInt(I),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList))),`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Int_`(svalueMInt(#SemanticCastToMInt(MI1)),svalueMInt(#SemanticCastToMInt(MI2))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList))),`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Int_`(uvalueMInt(#SemanticCastToMInt(MI1)),uvalueMInt(#SemanticCastToMInt(MI2))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),mi(#SemanticCastToInt(I),#token("-1","Int")))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#SemanticCastToInt(I)),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#SemanticCastToInt(I))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(474) org.kframework.attributes.Location(Location(474,8,475,77)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `MaxMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("32","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int"))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))))),ugtMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))))),uleMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(`MInt2Float`(#SemanticCastToMInt(MI1),#token("24","Int"),#token("8","Int")),`MInt2Float`(#SemanticCastToMInt(MI2),#token("24","Int"),#token("8","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("32","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("32","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(450) org.kframework.attributes.Location(Location(450,8,451,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `MaxMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("16","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))))),ugtMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))))),uleMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(`MInt2Float`(#SemanticCastToMInt(MI1),#token("11","Int"),#token("5","Int")),`MInt2Float`(#SemanticCastToMInt(MI2),#token("11","Int"),#token("5","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("16","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("16","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(447) org.kframework.attributes.Location(Location(447,8,448,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `LeftMinMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("32","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int"))))),`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int"))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>=Float__FLOAT`(`MInt2Float`(#SemanticCastToMInt(MI1),#token("24","Int"),#token("8","Int")),`MInt2Float`(#SemanticCastToMInt(MI2),#token("24","Int"),#token("8","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)))))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("32","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("32","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(402) org.kframework.attributes.Location(Location(402,8,403,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `LeftMinMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("16","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int"))))),`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>=Float__FLOAT`(`MInt2Float`(#SemanticCastToMInt(MI1),#token("11","Int"),#token("5","Int")),`MInt2Float`(#SemanticCastToMInt(MI2),#token("11","Int"),#token("5","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)))))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("16","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("16","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(399) org.kframework.attributes.Location(Location(399,8,400,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `LeftMaxMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("32","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int"))))),`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int"))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(`MInt2Float`(#SemanticCastToMInt(MI1),#token("24","Int"),#token("8","Int")),`MInt2Float`(#SemanticCastToMInt(MI2),#token("24","Int"),#token("8","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)))))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("32","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("32","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(412) org.kframework.attributes.Location(Location(412,8,413,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `LeftMaxMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("16","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int"))))),`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI1),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(`MInt2Float`(#SemanticCastToMInt(MI1),#token("11","Int"),#token("5","Int")),`MInt2Float`(#SemanticCastToMInt(MI2),#token("11","Int"),#token("5","Int"))),#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI1)))))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("16","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("16","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(409) org.kframework.attributes.Location(Location(409,8,410,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `LeftAbsMinMIntOfInt`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>=Int_`(absInt(svalueMInt(#SemanticCastToMInt(MI1))),uvalueMInt(#SemanticCastToMInt(MI2))),#SemanticCastToMInt(MI2),mi(#SemanticCastToInt(I),absInt(svalueMInt(#SemanticCastToMInt(MI1))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#SemanticCastToInt(I)),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#SemanticCastToInt(I))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(487) org.kframework.attributes.Location(Location(487,8,488,77)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `LeftAbsMinMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("32","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int"))))),`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int"))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),#SemanticCastToMInt(MI2)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>=Float__FLOAT`(absFloat(`MInt2Float`(#SemanticCastToMInt(MI1),#token("24","Int"),#token("8","Int"))),`MInt2Float`(#SemanticCastToMInt(MI2),#token("24","Int"),#token("8","Int"))),#SemanticCastToMInt(MI2),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int")))))))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("32","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("32","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(432) org.kframework.attributes.Location(Location(432,8,433,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `LeftAbsMinMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("16","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int"))))),`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),#SemanticCastToMInt(MI2)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>=Float__FLOAT`(absFloat(`MInt2Float`(#SemanticCastToMInt(MI1),#token("11","Int"),#token("5","Int"))),`MInt2Float`(#SemanticCastToMInt(MI2),#token("11","Int"),#token("5","Int"))),#SemanticCastToMInt(MI2),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int")))))))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("16","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("16","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(429) org.kframework.attributes.Location(Location(429,8,430,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `LeftAbsMaxMIntOfInt`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Int_`(absInt(svalueMInt(#SemanticCastToMInt(MI1))),uvalueMInt(#SemanticCastToMInt(MI2))),#SemanticCastToMInt(MI2),mi(#SemanticCastToInt(I),absInt(svalueMInt(#SemanticCastToMInt(MI1))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#SemanticCastToInt(I)),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#SemanticCastToInt(I))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(477) org.kframework.attributes.Location(Location(477,8,478,77)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `LeftAbsMaxMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("32","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int"))))),`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int"))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI2),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(absFloat(`MInt2Float`(#SemanticCastToMInt(MI1),#token("24","Int"),#token("8","Int"))),`MInt2Float`(#SemanticCastToMInt(MI2),#token("24","Int"),#token("8","Int"))),#SemanticCastToMInt(MI2),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int")))))))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("32","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("32","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(421) org.kframework.attributes.Location(Location(421,8,422,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `LeftAbsMaxMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("16","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int"))))),`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),#SemanticCastToMInt(MI2),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))),#SemanticCastToMInt(MI2),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(absFloat(`MInt2Float`(#SemanticCastToMInt(MI1),#token("11","Int"),#token("5","Int"))),`MInt2Float`(#SemanticCastToMInt(MI2),#token("11","Int"),#token("5","Int"))),#SemanticCastToMInt(MI2),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int")))))))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("16","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("16","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(418) org.kframework.attributes.Location(Location(418,8,419,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `Imm2MInt`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))),#SemanticCastToInt(M),#SemanticCastToInt(N))=>zeroExtend(mi(#SemanticCastToInt(M),modImm128(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I)))),#SemanticCastToInt(N)) requires `_>=Int_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),#token("128","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(344) org.kframework.attributes.Location(Location(344,8,345,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `Imm2MInt`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))),#SemanticCastToInt(M),#SemanticCastToInt(N))=>zeroExtend(mi(#SemanticCastToInt(M),#SemanticCastToInt(I)),#SemanticCastToInt(N)) requires `_<Int_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),#token("128","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(347) org.kframework.attributes.Location(Location(347,8,348,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `Imm2MInt`(#SemanticCastToImm(#SemanticCastToHexInt(H)),#SemanticCastToInt(M),#SemanticCastToInt(N))=>zeroExtend(mi(#SemanticCastToInt(M),`String2Base`(substrString(`HexConstant2String`(#SemanticCastToHexInt(H)),#token("3","Int"),lengthString(`HexConstant2String`(#SemanticCastToHexInt(H)))),#token("16","Int"))),#SemanticCastToInt(N)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(351) org.kframework.attributes.Location(Location(351,8,352,119)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `AbsMinMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("32","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int"))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))))),ugtMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(absFloat(`MInt2Float`(#SemanticCastToMInt(MI1),#token("24","Int"),#token("8","Int"))),absFloat(`MInt2Float`(#SemanticCastToMInt(MI2),#token("24","Int"),#token("8","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("32","Int"))))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("32","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("32","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(459) org.kframework.attributes.Location(Location(459,8,460,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `AbsMinMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("16","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))))),ugtMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(absFloat(`MInt2Float`(#SemanticCastToMInt(MI1),#token("11","Int"),#token("5","Int"))),absFloat(`MInt2Float`(#SemanticCastToMInt(MI2),#token("11","Int"),#token("5","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("16","Int"))))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("16","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("16","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(456) org.kframework.attributes.Location(Location(456,8,457,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `AbsMaxMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("32","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int"))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),concatenateMInt(mi(#token("8","Int"),#token("127","Int")),concatenateMInt(mi(#token("8","Int"),#token("192","Int")),concatenateMInt(mi(#token("8","Int"),#token("0","Int")),mi(#token("8","Int"),#token("0","Int"))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("1","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("9","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))))),ugtMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(absFloat(`MInt2Float`(#SemanticCastToMInt(MI1),#token("24","Int"),#token("8","Int"))),absFloat(`MInt2Float`(#SemanticCastToMInt(MI2),#token("24","Int"),#token("8","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("32","Int"))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("32","Int"))))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("32","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("32","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(441) org.kframework.attributes.Location(Location(441,8,442,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `AbsMaxMIntOfFP`(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2),#token("16","Int"),#SemanticCastToMap(RSMap))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("8","Int"),#token("126","Int")),mi(#token("8","Int"),#token("0","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("1","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("6","Int"))),#token("0","Int")),eqMInt(extractMInt(#SemanticCastToMInt(MI2),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))))),ugtMInt(extractMInt(#SemanticCastToMInt(MI1),#token("0","Int"),#token("1","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),#token("1","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("16","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(absFloat(`MInt2Float`(#SemanticCastToMInt(MI1),#token("11","Int"),#token("5","Int"))),absFloat(`MInt2Float`(#SemanticCastToMInt(MI2),#token("11","Int"),#token("5","Int")))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI2),#token("1","Int"),#token("16","Int"))),concatenateMInt(mi(#token("1","Int"),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI1),#token("1","Int"),#token("16","Int"))))))))))) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("16","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#token("16","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(438) org.kframework.attributes.Location(Location(438,8,439,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  ModuleComment(when imm is bigger than 2^128, mod imm,[org.kframework.attributes.Location(Location(341,3,341,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( two SNaN ,[org.kframework.attributes.Location(Location(435,73,435,86)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( two SNaN ,[org.kframework.attributes.Location(Location(432,73,432,86)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( two QNaN ,[org.kframework.attributes.Location(Location(435,1284,435,1297)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( two QNaN ,[org.kframework.attributes.Location(Location(432,1163,432,1176)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( rule getRegisterValue(R:MRegs, RSMap) => extractMask({RSMap[convToRegKeys(R)]}:>MInt, 32, 0),[org.kframework.attributes.Location(Location(314,3,314,98)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( normal ,[org.kframework.attributes.Location(Location(432,3514,432,3525)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( let Imm < 64b,[org.kframework.attributes.Location(Location(336,3,336,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( let Imm < 32b,[org.kframework.attributes.Location(Location(331,3,331,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( for check,[org.kframework.attributes.Location(Location(15,3,15,15)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( SNaN and not NaN ,[org.kframework.attributes.Location(Location(435,1874,435,1895)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( SNaN and not NaN ,[org.kframework.attributes.Location(Location(435,1657,435,1678)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( SNaN and not NaN ,[org.kframework.attributes.Location(Location(432,1837,432,1858)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( SNaN and not NaN ,[org.kframework.attributes.Location(Location(432,1550,432,1571)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( SNaN and QNaN ,[org.kframework.attributes.Location(Location(435,551,435,569)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( SNaN and QNaN ,[org.kframework.attributes.Location(Location(432,490,432,508)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( QNaN and not NaN ,[org.kframework.attributes.Location(Location(435,2299,435,2320)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( QNaN and not NaN ,[org.kframework.attributes.Location(Location(435,2137,435,2158)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( QNaN and not NaN ,[org.kframework.attributes.Location(Location(432,3027,432,3048)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( QNaN and not NaN ,[org.kframework.attributes.Location(Location(432,2403,432,2424)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( QNaN and not NaN ,[org.kframework.attributes.Location(Location(432,2170,432,2191)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( Int,[org.kframework.attributes.Location(Location(346,3,346,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( Infinity ,[org.kframework.attributes.Location(Location(435,2780,435,2793)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( Infinity ,[org.kframework.attributes.Location(Location(435,2508,435,2521)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( Infinity ,[org.kframework.attributes.Location(Location(432,2683,432,2696)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( Hexconst                                       ,[org.kframework.attributes.Location(Location(352,3,352,53)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( 0 and 0 ,[org.kframework.attributes.Location(Location(435,2936,435,2948)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( 0 and 0 ,[org.kframework.attributes.Location(Location(432,3263,432,3275)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(  
  rule sameRegisters(R1:Register, R2:Register) =>  convToRegKeys(R1) ==String  convToRegKeys(R2)
  rule sameRegisters(R1:Register, S2:String)   =>  convToRegKeys(R1) ==String  S2
  ,[org.kframework.attributes.Location(Location(360,3,363,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(  
  rule <k> setRegisterBitsAtPositon(MInew, R, P) => . ...</k>
    <regstate>... convToRegKeys(R, I) |-> ( MIold => plugInMask(MIold, MInew, P)) ...</regstate>
  ,[org.kframework.attributes.Location(Location(368,3,371,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( 
    getRegisterBitsAtPositon(R, P, N) 
      Returns N bits of input register  R starting at 
    position P.
  ,[org.kframework.attributes.Location(Location(373,3,377,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( 
    Update Register's value at arbitrary position.
  ,[org.kframework.attributes.Location(Location(365,3,367,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( 
    Get Register size based on the variant used.
  ,[org.kframework.attributes.Location(Location(380,3,382,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment( 
    Check if two registers are the same
  ,[org.kframework.attributes.Location(Location(357,3,359,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
  rule defaultRegs(S:Label) => setdRegs( S )
  
  rule <k> 
         setDefaultRegs(S:Label) => defaultRegs(S)
       </k>
  ,[org.kframework.attributes.Location(Location(386,3,392,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
  rule convToRegKeysHelper(control)  => "CONTROL"
  rule convToRegKeysHelper(control_s)  => "CONTROL_S"
  rule convToRegKeysHelper(control_ns)  => "CONTROL_NS"
  rule convToRegKeysHelper(cpacr)  => "CPACR"
  rule convToRegKeysHelper(cpacr_s)  => "CPACR_S"
  rule convToRegKeysHelper(cpacr_ns)  => "CPACR_NS"
  rule convToRegKeysHelper(nsacr)  => "NSACR"
  rule convToRegKeysHelper(cppwr)  => "CPPWR"
  rule convToRegKeysHelper(cppwr_s)  => "CPPWR_S"
  rule convToRegKeysHelper(cppwr_ns)  => "CPPWR_NS"
  rule convToRegKeysHelper(mvfr1)  => "MVFR1"
  rule convToRegKeysHelper(fpccr)  => "FPCCR"
  rule convToRegKeysHelper(fpccr_s)  => "FPCCR_S"
  rule convToRegKeysHelper(fpccr_ns)  => "FPCCR_NS"
  rule convToRegKeysHelper(vpr)  => "VPR"
  rule convToRegKeysHelper(epsr)  => "EPSR"
   ,[org.kframework.attributes.Location(Location(100,3,117,5)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
  rule convSubRegsToRegs(control) => control
  rule convSubRegsToRegs(control_s) => control_s
  rule convSubRegsToRegs(control_ns) => control_ns
  rule convSubRegsToRegs(cpacr) => cpacr
  rule convSubRegsToRegs(cpacr_s) => cpacr_s
  rule convSubRegsToRegs(cpacr_ns) => cpacr_ns
  rule convSubRegsToRegs(nsacr) => nsacr
  rule convSubRegsToRegs(cppwr) => cppwr
  rule convSubRegsToRegs(cppwr_s) => cppwr_s
  rule convSubRegsToRegs(cppwr_ns) => cppwr_ns
  rule convSubRegsToRegs(mvfr1) => mvfr1
  rule convSubRegsToRegs(fpccr) => fpccr
  rule convSubRegsToRegs(fpccr_ns) => fpccr_ns
  rule convSubRegsToRegs(fpccr_s) => fpccr_s
  rule convSubRegsToRegs(vpr) => vpr
  rule convSubRegsToRegs(epsr) => epsr
  ,[org.kframework.attributes.Location(Location(290,3,307,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    minimum: for the one absolute and the other not absolute, like vminnmav
    MI1 is source operand, MI2 is destination operand.
  ,[org.kframework.attributes.Location(Location(428,3,431,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    maximum: for the one absolute and the other not absolute, like vmaxnmav
  ,[org.kframework.attributes.Location(Location(418,3,420,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    get the multiply of MInt
  ,[org.kframework.attributes.Location(Location(493,3,495,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    get the minimum absolute MInt of float
  ,[org.kframework.attributes.Location(Location(456,3,458,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    get the minimum MInt of float
  ,[org.kframework.attributes.Location(Location(465,3,467,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    get the maximum absolute MInt of float
  ,[org.kframework.attributes.Location(Location(438,3,440,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    get the maximum MInt of float
  ,[org.kframework.attributes.Location(Location(447,3,449,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    for the R and Q register fp command to get the minimum one
  ,[org.kframework.attributes.Location(Location(398,3,400,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    for the R and Q register fp command to get the maximum one, vmaxnmv
  ,[org.kframework.attributes.Location(Location(408,3,410,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    Translate register to Regstate keys
  ,[org.kframework.attributes.Location(Location(6,3,8,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    Sub registers to Registers
  ,[org.kframework.attributes.Location(Location(119,3,121,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    Imm convert to MInt
  ,[org.kframework.attributes.Location(Location(327,3,329,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    Getting the registers values according to the register variants.
  ,[org.kframework.attributes.Location(Location(309,3,311,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    Get the Minimun one of two Int of MInt, MI1 is the source operand,
    MI2 is the destination operand.
  ,[org.kframework.attributes.Location(Location(483,3,486,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
  ModuleComment(
    Get the Maximum one of two Int of MInt
  ,[org.kframework.attributes.Location(Location(474,3,476,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))])
endmodule


module ARMV8-ABSTRACT-SEMANTIC$SYNTAX [org.kframework.attributes.Location(Location(3,1,510,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-semantic.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
  syntax String ::= "HexConstant2String" "(" HexInt ")" [function() hook(STRING.token2string) klabel(HexConstant2String)]
endmodule


module ARMV8-ABSTRACT-SYNTAX [org.kframework.attributes.Location(Location(3,1,157,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))]
  imports STRING
  imports MINT
  imports MAP
  imports ARMV8-SYNTAX-SORTS
  imports ARMV8-ABSTRACT-SYNTAX$SYNTAX
  ModuleComment(Memloc -> storeInstr(Instruction),[org.kframework.attributes.Location(Location(13,32,13,68)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment( for R and Q,[org.kframework.attributes.Location(Location(142,81,142,95)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment( 
    setRegisterBitsAtPositon(MI, R, P) 
      Update bitwidthMInt(MI) bits of input register  R starting at 
    position P.
  ,[org.kframework.attributes.Location(Location(107,3,111,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment( 
    getRegisterBitsAtPositon(R, P, N) 
      Returns N bits of input register  R starting at 
    position P.
  ,[org.kframework.attributes.Location(Location(114,3,118,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment( 
    Get Register size based on the variant used.
  ,[org.kframework.attributes.Location(Location(121,3,123,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment( 
    Check if two registers are the same
  ,[org.kframework.attributes.Location(Location(101,3,103,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment(
  syntax KItem ::= setDefaultRegs(Label) [function]
                 | defaultRegs(Label) [strict]
  
  syntax SetdRegs ::= setdRegs ( Label )
  ,[org.kframework.attributes.Location(Location(43,3,48,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment(
    get the multiply of MInt
  ,[org.kframework.attributes.Location(Location(146,3,148,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment(
    get the maximun MInt of 2 Int
  ,[org.kframework.attributes.Location(Location(138,3,140,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment(
    get the maximum MInt of 2 Float
  ,[org.kframework.attributes.Location(Location(126,3,128,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment(
    Translate register to Regstate keys
  ,[org.kframework.attributes.Location(Location(56,3,58,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment(
    Sub registers to Registers
  ,[org.kframework.attributes.Location(Location(50,3,52,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment(
    Setting the Parent register's values.
      Ex. setParentValue(MI, s0) -> set MI to lowest 32bit of q0
  ,[org.kframework.attributes.Location(Location(67,3,70,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment(
    Imm convert to MInt
  ,[org.kframework.attributes.Location(Location(93,3,95,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment(
    Getting the registers values.
      Ex. getRegisterValue(s0) -> 0-31 bits of s0
      Ex. getRegisterValue(r0) -> 0-31 bits of r0
  ,[org.kframework.attributes.Location(Location(73,3,77,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment(
    Getting the Parent register's values.
      Ex. getParentValue(r0) -> 32 bits of r0
      Ex. getVecParentValue(q0, 0) -> 32 bits of s0
      Ex. getVecParentValue(q0, 1) -> 32 bits of s1
      Ex. getVecParentValue(q0, 2)-> 32 bits of s2
      Ex. getVecParentValue(q0, 3)-> 32 bits of s3
      Ex. getVecParentValue(d0, 1)-> 32 bits of s1
  ,[org.kframework.attributes.Location(Location(81,3,89,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment(
                      | execinstr1Beat(Instruction, Int)
                      | execinstr2Beat(Instruction)
                      | execinstr3Beat(Instruction)
                      | execinstr4Beat(Instruction)
                      ,[org.kframework.attributes.Location(Location(17,25,22,24)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
  ModuleComment(
                      | beat1Result(Instruction, Int)
                      | beat2Result(Instruction)
                      | beat3Result(Instruction)
                      | beat4Result(Instruction)
                      ,[org.kframework.attributes.Location(Location(26,25,31,24)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))])
endmodule


module ARMV8-ABSTRACT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(3,1,157,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-abstract-syntax.k))]
  imports STRING$SYNTAX
  imports MINT$SYNTAX
  imports MAP$SYNTAX
  imports ARMV8-SYNTAX-SORTS$SYNTAX
  syntax String ::= "convVecToRegKeys" "(" Register "," Beat ")" [function() klabel(convVecToRegKeys)]
  syntax String ::= "convToRegKeysHelper" "(" Register ")" [function() klabel(convToRegKeysHelper)]
  syntax String ::= "convToRegKeys" "(" Register ")" [function() klabel(convToRegKeys)]
  syntax Register ::= "convSubVecRegsToRegs" "(" Register "," Beat ")" [function() klabel(convSubVecRegsToRegs)]
  syntax Register ::= "convSubRegsToRegs" "(" Register ")" [function() klabel(convSubRegsToRegs)]
  syntax Ptm ::= "memloc" "(" MInt ")" [klabel(memloc)]
  syntax MInt ::= Ptm
  syntax MInt ::= "uMulofInt8" "(" MInt "," MInt ")" [function() klabel(uMulofInt8)]
  syntax MInt ::= "uMulofInt32" "(" MInt "," MInt ")" [function() klabel(uMulofInt32)]
  syntax MInt ::= "uMulofInt16" "(" MInt "," MInt ")" [function() klabel(uMulofInt16)]
  syntax MInt ::= "setRegisterBitsAtPositon" "(" MInt "," Register "," Int ")" [klabel(setRegisterBitsAtPositon)]
  syntax MInt ::= "setParentValue" "(" KItem "," Register ")" [klabel(setParentValue) strict(1)]
  syntax MInt ::= "sMulofInt8" "(" MInt "," MInt ")" [function() klabel(sMulofInt8)]
  syntax MInt ::= "sMulofInt32" "(" MInt "," MInt ")" [function() klabel(sMulofInt32)]
  syntax MInt ::= "sMulofInt16" "(" MInt "," MInt ")" [function() klabel(sMulofInt16)]
  syntax MInt ::= "getVecParentValue" "(" Register "," Beat "," Map ")" [function() klabel(getVecParentValue)]
  syntax MInt ::= "getRegisterValue" "(" Register "," Map ")" [function() klabel(getRegisterValue)]
  syntax MInt ::= "getRegisterBitsAtPositon" "(" Register "," Int "," Int "," Map ")" [function() klabel(getRegisterBitsAtPositon)]
  syntax MInt ::= "getReg" "(" String "," Map ")" [function() klabel(getReg)]
  syntax MInt ::= "getParentValue" "(" Register "," Map ")" [function() klabel(getParentValue)]
  syntax MInt ::= "MinMIntOfInt" "(" MInt "," MInt "," Int "," Label "," Map ")" [function() klabel(MinMIntOfInt)]
  syntax MInt ::= "MinMIntOfFP" "(" MInt "," MInt "," Int "," Map ")" [function() klabel(MinMIntOfFP)]
  syntax MInt ::= "MaxMIntOfInt" "(" MInt "," MInt "," Int "," Label "," Map ")" [function() klabel(MaxMIntOfInt)]
  syntax MInt ::= "MaxMIntOfFP" "(" MInt "," MInt "," Int "," Map ")" [function() klabel(MaxMIntOfFP)]
  syntax MInt ::= "LeftMinMIntOfFP" "(" MInt "," MInt "," Int "," Map ")" [function() klabel(LeftMinMIntOfFP)]
  syntax MInt ::= "LeftMaxMIntOfFP" "(" MInt "," MInt "," Int "," Map ")" [function() klabel(LeftMaxMIntOfFP)]
  syntax MInt ::= "LeftAbsMinMIntOfInt" "(" MInt "," MInt "," Int "," Map ")" [function() klabel(LeftAbsMinMIntOfInt)]
  syntax MInt ::= "LeftAbsMinMIntOfFP" "(" MInt "," MInt "," Int "," Map ")" [function() klabel(LeftAbsMinMIntOfFP)]
  syntax MInt ::= "LeftAbsMaxMIntOfInt" "(" MInt "," MInt "," Int "," Map ")" [function() klabel(LeftAbsMaxMIntOfInt)]
  syntax MInt ::= "LeftAbsMaxMIntOfFP" "(" MInt "," MInt "," Int "," Map ")" [function() klabel(LeftAbsMaxMIntOfFP)]
  syntax MInt ::= "Imm2MInt" "(" Imm "," Int "," Int ")" [function() klabel(Imm2MInt)]
  syntax MInt ::= "AbsMinMIntOfFP" "(" MInt "," MInt "," Int "," Map ")" [function() klabel(AbsMinMIntOfFP)]
  syntax MInt ::= "AbsMaxMIntOfFP" "(" MInt "," MInt "," Int "," Map ")" [function() klabel(AbsMaxMIntOfFP)]
  syntax KResult ::= MInt
  syntax KItem ::= "setRegisterValue" "(" KItem "," Register ")" [klabel(setRegisterValue) strict(1)]
  syntax KItem ::= "scan" [token()]
  syntax KItem ::= "registersMessage" [token()]
  syntax KItem ::= "loadBegin"
  syntax Int ::= "modImm64" "(" Imm ")" [function() klabel(modImm64)]
  syntax Int ::= "modImm32" "(" Imm ")" [function() klabel(modImm32)]
  syntax Int ::= "modImm128" "(" Imm ")" [function() klabel(modImm128)]
  syntax Int ::= "getRegisterSize" "(" Register ")" [function() klabel(getRegisterSize)]
  syntax Int ::= "getRegI" "(" String "," Map ")" [function() klabel(getRegI)]
  syntax CodeInMemory ::= "code" "(" Map ")" [klabel(code)]
  syntax Bool ::= "sameRegisters" "(" Register "," String ")" [function() klabel(nonregisterargs)]
  syntax Bool ::= "sameRegisters" "(" Register "," Register ")" [function() klabel(registerargs)]
  syntax Beat ::= Int
  syntax AbsCommand ::= "storedInstr" "(" Instruction ")" [klabel(storedInstr)]
  syntax AbsCommand ::= "setDefaultRegs" "(" Opcode ")" [klabel(setDefaultRegs)]
  syntax AbsCommand ::= "execinstrBeat" "(" Instruction "," Int ")" [klabel(execinstrBeat)]
  syntax AbsCommand ::= "execinstr" "(" Instruction ")" [klabel(execinstr)]
  syntax AbsCommand ::= "beatResult" "(" Instruction "," Int ")" [klabel(beatResult)]
endmodule


module ARMV8-CONFIGURATION [org.kframework.attributes.Location(Location(5,1,141,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-configuration.k))]
  imports MINT
  imports MAP
  imports ARMV8-SYNTAX
  imports ARMV8-MINT-SYNTAX
  imports ARMV8-CONFIGURATION$SYNTAX
  imports ARMV8-ABSTRACT-SYNTAX
  syntax Cell ::= RegstateseqCell
  syntax Cell ::= RegstateCell
  syntax Cell ::= NextlocCell
  syntax Cell ::= KCell
  syntax Cell ::= InstructiontextCell
  syntax Cell ::= GeneratedTopCell
  syntax Cell ::= FunctargetCell
  syntax Cell ::= CurrentstateCell
  syntax Cell ::= BeginCell
  rule initRegstateseqCell(.KList)=>`<regstateseq>`(#noDots(.KList),`.List`(.KList),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  rule initRegstateCell(.KList)=>`<regstate>`(#noDots(.KList),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"Q0\"","String"),mi(#token("128","Int"),#token("0","Int"))),`_|->_`(#token("\"Q1\"","String"),mi(#token("128","Int"),#token("0","Int")))),`_|->_`(#token("\"Q2\"","String"),mi(#token("128","Int"),#token("0","Int")))),`_|->_`(#token("\"Q3\"","String"),mi(#token("128","Int"),#token("0","Int")))),`_|->_`(#token("\"Q4\"","String"),mi(#token("128","Int"),#token("0","Int")))),`_|->_`(#token("\"Q5\"","String"),mi(#token("128","Int"),#token("0","Int")))),`_|->_`(#token("\"Q6\"","String"),mi(#token("128","Int"),#token("0","Int")))),`_|->_`(#token("\"Q7\"","String"),mi(#token("128","Int"),#token("0","Int")))),`_|->_`(#token("\"D0\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D1\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D2\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D3\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D4\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D5\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D6\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D7\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D8\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D9\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D10\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D11\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D12\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D13\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D14\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"D15\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"R0\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R1\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R2\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R3\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R4\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R5\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R6\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R7\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R8\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R9\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R10\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R11\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R12\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R13\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R14\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"R15\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S0\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S1\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S2\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S3\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S4\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S5\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S6\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S7\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S8\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S9\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S10\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S11\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S12\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S13\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S14\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S15\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S16\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S17\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S18\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S19\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S20\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S21\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S22\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S23\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S24\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S25\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S26\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S27\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S28\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S29\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S30\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"S31\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"RESULT64\"","String"),mi(#token("64","Int"),#token("0","Int")))),`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPSCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"TEMP1\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"TEMP2\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"V_TEMP1\"","String"),#token("0","Int"))),`_|->_`(#token("\"V_TEMP2\"","String"),#token("0","Int"))),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  rule initNextlocCell(.KList)=>`<nextloc>`(#noDots(.KList),mi(#token("32","Int"),#token("0","Int")),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  rule initKCell(Init)=>`<k>`(#noDots(.KList),#SemanticCastToInstructions(`project:Instructions`(`Map:lookup`(Init,#token("$PGM","KConfigVar"))))~>`loadBegin_ARMV8-ABSTRACT-SYNTAX`(.KList)~>#token("registersMessage","KItem")~>#token("scan","KItem"),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  rule initInstructiontextCell(.KList)=>`<instructiontext>`(#noDots(.KList),code(`.Map`(.KList)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  rule initGeneratedTopCell(Init)=>`<generatedTop>`(#noDots(.KList),#cells(initKCell(Init),initBeginCell(.KList),initCurrentstateCell(.KList),initNextlocCell(.KList),initFunctargetCell(.KList),initInstructiontextCell(.KList),initRegstateCell(.KList),initRegstateseqCell(.KList)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  rule initFunctargetCell(.KList)=>`<functarget>`(#noDots(.KList),`.Map`(.KList),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  rule initCurrentstateCell(.KList)=>`<currentstate>`(#noDots(.KList),#token("\"text\"","String"),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  rule initBeginCell(.KList)=>`<begin>`(#noDots(.KList),.K,#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  ModuleComment(.Map,[org.kframework.attributes.Location(Location(27,7,27,13)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-configuration.k))])
  ModuleComment( virtual "RESULT64", default 64bit 0,[org.kframework.attributes.Location(Location(111,7,111,45)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-configuration.k))])
  ModuleComment( virtual "RESULT", default 32bit 0,[org.kframework.attributes.Location(Location(108,7,108,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-configuration.k))])
  ModuleComment( set default value to regsiters,[org.kframework.attributes.Location(Location(113,7,113,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-configuration.k))])
  ModuleComment( initDefaultRegs ~>,[org.kframework.attributes.Location(Location(13,7,13,28)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-configuration.k))])
  ModuleComment( add for check,[org.kframework.attributes.Location(Location(131,7,131,23)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-configuration.k))])
  ModuleComment( Qn for check,[org.kframework.attributes.Location(Location(28,7,28,22)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-configuration.k))])
  ModuleComment( Dn for check ,[org.kframework.attributes.Location(Location(39,7,39,23)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-configuration.k))])
  Bubble(config,<k>
      // initDefaultRegs ~>
      $PGM:Instructions ~>
      loadBegin ~>
      registersMessage ~>
      scan
    </k>
    
    <begin> .K </begin>
    <currentstate> "text" </currentstate>
    <nextloc> mi(32, 0) </nextloc>
    <functarget> .Map </functarget>
    <instructiontext> code(.Map) </instructiontext>
    
    <regstate> 
      //.Map
      // Qn for check
      
      ("Q0"		|-> mi(128, 0))
      ("Q1"		|-> mi(128, 0))
      ("Q2"		|-> mi(128, 0))
      ("Q3"		|-> mi(128, 0))
      ("Q4"		|-> mi(128, 0))
      ("Q5"		|-> mi(128, 0))
      ("Q6"		|-> mi(128, 0))
      ("Q7"		|-> mi(128, 0))
      
      // Dn for check 
      
      ("D0"		|-> mi(64, 0))
      ("D1"		|-> mi(64, 0))
      ("D2"		|-> mi(64, 0))
      ("D3"		|-> mi(64, 0))
      ("D4"		|-> mi(64, 0))
      ("D5"		|-> mi(64, 0))
      ("D6"		|-> mi(64, 0))
      ("D7"		|-> mi(64, 0))
      ("D8"		|-> mi(64, 0))
      ("D9"		|-> mi(64, 0))
      ("D10"		|-> mi(64, 0))
      ("D11"		|-> mi(64, 0))
      ("D12"		|-> mi(64, 0))
      ("D13"		|-> mi(64, 0))
      ("D14"		|-> mi(64, 0))
      ("D15"		|-> mi(64, 0))
      
      ("R0"		|-> mi(32, 0))
      ("R1"		|-> mi(32, 0))
      ("R2"		|-> mi(32, 0))
      ("R3"		|-> mi(32, 0))
      ("R4"		|-> mi(32, 0))
      ("R5"		|-> mi(32, 0))
      ("R6"		|-> mi(32, 0))
      ("R7"		|-> mi(32, 0))
      ("R8"		|-> mi(32, 0))
      ("R9"		|-> mi(32, 0))
      ("R10"		|-> mi(32, 0))
      ("R11"		|-> mi(32, 0))
      ("R12"		|-> mi(32, 0))
      ("R13"		|-> mi(32, 0))
      ("R14"		|-> mi(32, 0))
      ("R15"		|-> mi(32, 0)) 
      ("S0"		|-> mi(32, 0))
      ("S1"		|-> mi(32, 0))
      ("S2"		|-> mi(32, 0))
      ("S3"		|-> mi(32, 0))
      ("S4"		|-> mi(32, 0))
      ("S5"		|-> mi(32, 0))
      ("S6"		|-> mi(32, 0))
      ("S7"		|-> mi(32, 0))
      ("S8"		|-> mi(32, 0))
      
      ("S9"		|-> mi(32, 0))
      ("S10"		|-> mi(32, 0))
      ("S11"		|-> mi(32, 0))
      ("S12"		|-> mi(32, 0))
      ("S13"		|-> mi(32, 0))
      ("S14"		|-> mi(32, 0))
      ("S15"		|-> mi(32, 0))
      ("S16"		|-> mi(32, 0))
      ("S17"		|-> mi(32, 0))
      ("S18"		|-> mi(32, 0))
      ("S19"		|-> mi(32, 0))
      ("S20"		|-> mi(32, 0))
      ("S21"		|-> mi(32, 0))
      ("S22"		|-> mi(32, 0))
      ("S23"		|-> mi(32, 0))
      ("S24"		|-> mi(32, 0))
      ("S25"		|-> mi(32, 0))
      ("S26"		|-> mi(32, 0))
      ("S27"		|-> mi(32, 0))
      ("S28"		|-> mi(32, 0))
      ("S29"		|-> mi(32, 0))
      ("S30"		|-> mi(32, 0))
      ("S31"		|-> mi(32, 0))
      
      // virtual "RESULT", default 32bit 0
      
      ("RESULT"	|-> mi(32, 0))
      // virtual "RESULT64", default 64bit 0
      ("RESULT64"	|-> mi(64, 0))
      // set default value to regsiters
      ("CONTROL"	|-> mi(32, 0))
      ("CONTROL_S"	|-> mi(32, 0))
      ("CONTROL_NS"	|-> mi(32, 0))
      ("CPACR_S" 	|-> mi(32, 0))
      ("CPACR_NS" 	|-> mi(32, 0))
      ("CPACR" 	|-> mi(32, 0))
      ("NSACR" 	|-> mi(32, 0))
      ("CPPWR_S" 	|-> mi(32, 0))
      ("CPPWR_NS" 	|-> mi(32, 0))
      ("CPPWR"		|-> mi(32, 0))
      ("MVFR1"		|-> mi(32, 0))
      ("EPSR"		|-> mi(32, 0))
      ("FPCCR"		|-> mi(32, 0))
      ("FPCCR_S"	|-> mi(32, 0))
      ("FPCCR_NS"	|-> mi(32, 0))
      ("VPR"		|-> mi(32, 0))
      ("FPSCR"		|-> mi(32, 0))
      // add for check
      ("TEMP1"		|-> mi(32, 0))
      ("TEMP2"		|-> mi(32, 0))
      ("V_TEMP1"	|-> 0)
      ("V_TEMP2"	|-> 0)
      
    </regstate>
    
    <regstateseq> .List </regstateseq>,[contentStartColumn(5) contentStartLine(12) org.kframework.attributes.Location(Location(11,3,139,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-configuration.k))])
endmodule


module ARMV8-CONFIGURATION$SYNTAX [org.kframework.attributes.Location(Location(5,1,141,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-configuration.k))]
  imports MINT$SYNTAX
  imports MAP$SYNTAX
  imports ARMV8-SYNTAX$SYNTAX
  imports ARMV8-MINT-SYNTAX$SYNTAX
  imports ARMV8-ABSTRACT-SYNTAX$SYNTAX
  syntax RegstateseqCellOpt ::= RegstateseqCell
  syntax RegstateseqCellOpt ::= "noRegstateseqCell" [cellOptAbsent(RegstateseqCell)]
  syntax RegstateseqCell ::= "initRegstateseqCell" [function() initializer() noThread()]
  syntax RegstateseqCell ::= "<regstateseq>" List "</regstateseq>" [cell() cellName(regstateseq) contentStartColumn(5) contentStartLine(12) format(%1%i%n%2%d%n%3) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  syntax RegstateCellOpt ::= RegstateCell
  syntax RegstateCellOpt ::= "noRegstateCell" [cellOptAbsent(RegstateCell)]
  syntax RegstateCell ::= "initRegstateCell" [function() initializer() noThread()]
  syntax RegstateCell ::= "<regstate>" Map "</regstate>" [cell() cellName(regstate) contentStartColumn(5) contentStartLine(12) format(%1%i%n%2%d%n%3) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  syntax NextlocCellOpt ::= NextlocCell
  syntax NextlocCellOpt ::= "noNextlocCell" [cellOptAbsent(NextlocCell)]
  syntax NextlocCell ::= "initNextlocCell" [function() initializer() noThread()]
  syntax NextlocCell ::= "<nextloc>" MInt "</nextloc>" [cell() cellName(nextloc) contentStartColumn(5) contentStartLine(12) format(%1%i%n%2%d%n%3) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  syntax KCellOpt ::= KCell
  syntax KCellOpt ::= "noKCell" [cellOptAbsent(KCell)]
  syntax KCell ::= "initKCell" "(" Map ")" [function() initializer() noThread()]
  syntax KCell ::= "<k>" K "</k>" [cell() cellName(k) contentStartColumn(5) contentStartLine(12) format(%1%i%n%2%d%n%3) maincell() org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  syntax InstructiontextCellOpt ::= InstructiontextCell
  syntax InstructiontextCellOpt ::= "noInstructiontextCell" [cellOptAbsent(InstructiontextCell)]
  syntax InstructiontextCell ::= "initInstructiontextCell" [function() initializer() noThread()]
  syntax InstructiontextCell ::= "<instructiontext>" CodeInMemory "</instructiontext>" [cell() cellName(instructiontext) contentStartColumn(5) contentStartLine(12) format(%1%i%n%2%d%n%3) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  syntax GeneratedTopCellFragment ::= "<generatedTop>-fragment" KCellOpt BeginCellOpt CurrentstateCellOpt NextlocCellOpt FunctargetCellOpt InstructiontextCellOpt RegstateCellOpt RegstateseqCellOpt "</generatedTop>-fragment" [cellFragment(GeneratedTopCell)]
  syntax GeneratedTopCell ::= "initGeneratedTopCell" "(" Map ")" [function() initializer() noThread()]
  syntax GeneratedTopCell ::= "<generatedTop>" KCell BeginCell CurrentstateCell NextlocCell FunctargetCell InstructiontextCell RegstateCell RegstateseqCell "</generatedTop>" [cell() cellName(generatedTop) contentStartColumn(5) contentStartLine(12) format(%1%i%n%2%n%3%n%4%n%5%n%6%n%7%n%8%n%9%d%n%10) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) topcell()]
  syntax FunctargetCellOpt ::= FunctargetCell
  syntax FunctargetCellOpt ::= "noFunctargetCell" [cellOptAbsent(FunctargetCell)]
  syntax FunctargetCell ::= "initFunctargetCell" [function() initializer() noThread()]
  syntax FunctargetCell ::= "<functarget>" Map "</functarget>" [cell() cellName(functarget) contentStartColumn(5) contentStartLine(12) format(%1%i%n%2%d%n%3) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  syntax CurrentstateCellOpt ::= CurrentstateCell
  syntax CurrentstateCellOpt ::= "noCurrentstateCell" [cellOptAbsent(CurrentstateCell)]
  syntax CurrentstateCell ::= "initCurrentstateCell" [function() initializer() noThread()]
  syntax CurrentstateCell ::= "<currentstate>" String "</currentstate>" [cell() cellName(currentstate) contentStartColumn(5) contentStartLine(12) format(%1%i%n%2%d%n%3) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  syntax BeginCellOpt ::= BeginCell
  syntax BeginCellOpt ::= "noBeginCell" [cellOptAbsent(BeginCell)]
  syntax BeginCell ::= "initBeginCell" [function() initializer() noThread()]
  syntax BeginCell ::= "<begin>" K "</begin>" [cell() cellName(begin) contentStartColumn(5) contentStartLine(12) format(%1%i%n%2%d%n%3) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  Bubble(config,<k>
      // initDefaultRegs ~>
      $PGM:Instructions ~>
      loadBegin ~>
      registersMessage ~>
      scan
    </k>
    
    <begin> .K </begin>
    <currentstate> "text" </currentstate>
    <nextloc> mi(32, 0) </nextloc>
    <functarget> .Map </functarget>
    <instructiontext> code(.Map) </instructiontext>
    
    <regstate> 
      //.Map
      // Qn for check
      
      ("Q0"		|-> mi(128, 0))
      ("Q1"		|-> mi(128, 0))
      ("Q2"		|-> mi(128, 0))
      ("Q3"		|-> mi(128, 0))
      ("Q4"		|-> mi(128, 0))
      ("Q5"		|-> mi(128, 0))
      ("Q6"		|-> mi(128, 0))
      ("Q7"		|-> mi(128, 0))
      
      // Dn for check 
      
      ("D0"		|-> mi(64, 0))
      ("D1"		|-> mi(64, 0))
      ("D2"		|-> mi(64, 0))
      ("D3"		|-> mi(64, 0))
      ("D4"		|-> mi(64, 0))
      ("D5"		|-> mi(64, 0))
      ("D6"		|-> mi(64, 0))
      ("D7"		|-> mi(64, 0))
      ("D8"		|-> mi(64, 0))
      ("D9"		|-> mi(64, 0))
      ("D10"		|-> mi(64, 0))
      ("D11"		|-> mi(64, 0))
      ("D12"		|-> mi(64, 0))
      ("D13"		|-> mi(64, 0))
      ("D14"		|-> mi(64, 0))
      ("D15"		|-> mi(64, 0))
      
      ("R0"		|-> mi(32, 0))
      ("R1"		|-> mi(32, 0))
      ("R2"		|-> mi(32, 0))
      ("R3"		|-> mi(32, 0))
      ("R4"		|-> mi(32, 0))
      ("R5"		|-> mi(32, 0))
      ("R6"		|-> mi(32, 0))
      ("R7"		|-> mi(32, 0))
      ("R8"		|-> mi(32, 0))
      ("R9"		|-> mi(32, 0))
      ("R10"		|-> mi(32, 0))
      ("R11"		|-> mi(32, 0))
      ("R12"		|-> mi(32, 0))
      ("R13"		|-> mi(32, 0))
      ("R14"		|-> mi(32, 0))
      ("R15"		|-> mi(32, 0)) 
      ("S0"		|-> mi(32, 0))
      ("S1"		|-> mi(32, 0))
      ("S2"		|-> mi(32, 0))
      ("S3"		|-> mi(32, 0))
      ("S4"		|-> mi(32, 0))
      ("S5"		|-> mi(32, 0))
      ("S6"		|-> mi(32, 0))
      ("S7"		|-> mi(32, 0))
      ("S8"		|-> mi(32, 0))
      
      ("S9"		|-> mi(32, 0))
      ("S10"		|-> mi(32, 0))
      ("S11"		|-> mi(32, 0))
      ("S12"		|-> mi(32, 0))
      ("S13"		|-> mi(32, 0))
      ("S14"		|-> mi(32, 0))
      ("S15"		|-> mi(32, 0))
      ("S16"		|-> mi(32, 0))
      ("S17"		|-> mi(32, 0))
      ("S18"		|-> mi(32, 0))
      ("S19"		|-> mi(32, 0))
      ("S20"		|-> mi(32, 0))
      ("S21"		|-> mi(32, 0))
      ("S22"		|-> mi(32, 0))
      ("S23"		|-> mi(32, 0))
      ("S24"		|-> mi(32, 0))
      ("S25"		|-> mi(32, 0))
      ("S26"		|-> mi(32, 0))
      ("S27"		|-> mi(32, 0))
      ("S28"		|-> mi(32, 0))
      ("S29"		|-> mi(32, 0))
      ("S30"		|-> mi(32, 0))
      ("S31"		|-> mi(32, 0))
      
      // virtual "RESULT", default 32bit 0
      
      ("RESULT"	|-> mi(32, 0))
      // virtual "RESULT64", default 64bit 0
      ("RESULT64"	|-> mi(64, 0))
      // set default value to regsiters
      ("CONTROL"	|-> mi(32, 0))
      ("CONTROL_S"	|-> mi(32, 0))
      ("CONTROL_NS"	|-> mi(32, 0))
      ("CPACR_S" 	|-> mi(32, 0))
      ("CPACR_NS" 	|-> mi(32, 0))
      ("CPACR" 	|-> mi(32, 0))
      ("NSACR" 	|-> mi(32, 0))
      ("CPPWR_S" 	|-> mi(32, 0))
      ("CPPWR_NS" 	|-> mi(32, 0))
      ("CPPWR"		|-> mi(32, 0))
      ("MVFR1"		|-> mi(32, 0))
      ("EPSR"		|-> mi(32, 0))
      ("FPCCR"		|-> mi(32, 0))
      ("FPCCR_S"	|-> mi(32, 0))
      ("FPCCR_NS"	|-> mi(32, 0))
      ("VPR"		|-> mi(32, 0))
      ("FPSCR"		|-> mi(32, 0))
      // add for check
      ("TEMP1"		|-> mi(32, 0))
      ("TEMP2"		|-> mi(32, 0))
      ("V_TEMP1"	|-> 0)
      ("V_TEMP2"	|-> 0)
      
    </regstate>
    
    <regstateseq> .List </regstateseq>,[contentStartColumn(5) contentStartLine(12) org.kframework.attributes.Location(Location(11,3,139,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-configuration.k))])
endmodule


module ARMV8-CONVERSIONS [org.kframework.attributes.Location(Location(53,1,210,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))]
  imports ARMV8-CONVERSIONS-SYNTAX
  imports ARMV8-CONVERSIONS$SYNTAX
  rule roundToZero(#SemanticCastToFloat(F))=>`MInt2Float`(mi(#token("16","Int"),`_|Int_`(`_|Int_`(`_<<Int_`(`SignBit`(#SemanticCastToFloat(F)),#token("15","Int")),`_<<Int_`(`ConvertExponent`(exponentFloat(#SemanticCastToFloat(F))),#token("10","Int"))),`ConvertMantissa`(#SemanticCastToFloat(F)))),#token("11","Int"),#token("5","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(139) org.kframework.attributes.Location(Location(139,8,139,148)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule roundAwayFromZero(#SemanticCastToFloat(F))=>`MInt2Float`(mi(#token("16","Int"),`_|Int_`(`_|Int_`(`_<<Int_`(`SignBit`(#SemanticCastToFloat(F)),#token("15","Int")),`_<<Int_`(`ConvertExponent`(exponentFloat(#SemanticCastToFloat(F))),#token("10","Int"))),`_+Int_`(`ConvertMantissa`(#SemanticCastToFloat(F)),`CorrectionFromZero`(`_&Int_`(`MantissaFloat`(#SemanticCastToFloat(F)),`_-Int_`(`_<<Int_`(#token("1","Int"),`_-Int_`(precisionFloat(#SemanticCastToFloat(F)),#token("11","Int"))),#token("1","Int"))))))),#token("11","Int"),#token("5","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(137) org.kframework.attributes.Location(Location(137,8,137,248)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule negateFloat(#SemanticCastToFloat(F))=>`--Float__FLOAT`(#SemanticCastToFloat(F)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(155) org.kframework.attributes.Location(Location(155,8,155,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule isZero(#SemanticCastToFloat(F))=>#token("true","Bool") requires `_orBool_`(isPositiveZero(#SemanticCastToFloat(F)),isNegativeZero(#SemanticCastToFloat(F))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(67) org.kframework.attributes.Location(Location(67,8,68,56)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule isZero(#SemanticCastToFloat(F))=>#token("false","Bool") requires `notBool_`(`_orBool_`(isPositiveZero(#SemanticCastToFloat(F)),isNegativeZero(#SemanticCastToFloat(F)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(69) org.kframework.attributes.Location(Location(69,8,70,68)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule isPositiveZero(#SemanticCastToFloat(F))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_==Int_`(`SignBit`(#SemanticCastToFloat(F)),#token("0","Int")),`_==Int_`(`MantissaFloat`(#SemanticCastToFloat(F)),#token("0","Int"))),`_==Int_`(`ExponentBitVectorFloat`(#SemanticCastToFloat(F)),#token("0","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(57) org.kframework.attributes.Location(Location(57,8,58,107)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule isPositiveZero(#SemanticCastToFloat(F))=>#token("false","Bool") requires `notBool_`(`_andBool_`(`_andBool_`(`_==Int_`(`SignBit`(#SemanticCastToFloat(F)),#token("0","Int")),`_==Int_`(`MantissaFloat`(#SemanticCastToFloat(F)),#token("0","Int"))),`_==Int_`(`ExponentBitVectorFloat`(#SemanticCastToFloat(F)),#token("0","Int")))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(59) org.kframework.attributes.Location(Location(59,8,60,117)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule isNegativeZero(#SemanticCastToFloat(F))=>#token("true","Bool") requires `_andBool_`(`_andBool_`(`_==Int_`(`SignBit`(#SemanticCastToFloat(F)),#token("1","Int")),`_==Int_`(`MantissaFloat`(#SemanticCastToFloat(F)),#token("0","Int"))),`_==Int_`(`ExponentBitVectorFloat`(#SemanticCastToFloat(F)),#token("0","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(62) org.kframework.attributes.Location(Location(62,8,63,107)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule isNegativeZero(#SemanticCastToFloat(F))=>#token("false","Bool") requires `notBool_`(`_andBool_`(`_andBool_`(`_==Int_`(`SignBit`(#SemanticCastToFloat(F)),#token("1","Int")),`_==Int_`(`MantissaFloat`(#SemanticCastToFloat(F)),#token("0","Int"))),`_==Int_`(`ExponentBitVectorFloat`(#SemanticCastToFloat(F)),#token("0","Int")))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(64) org.kframework.attributes.Location(Location(64,8,65,117)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `SignMultFloat`(#SemanticCastToFloat(F))=>roundFloat(#token("1.0","Float"),precisionFloat(#SemanticCastToFloat(F)),exponentBitsFloat(#SemanticCastToFloat(F))) requires `_>=Float__FLOAT`(#SemanticCastToFloat(F),roundFloat(#token("0.0","Float"),precisionFloat(#SemanticCastToFloat(F)),exponentBitsFloat(#SemanticCastToFloat(F)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(132) org.kframework.attributes.Location(Location(132,8,132,160)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `SignMultFloat`(#SemanticCastToFloat(F))=>roundFloat(#token("-1.0","Float"),precisionFloat(#SemanticCastToFloat(F)),exponentBitsFloat(#SemanticCastToFloat(F))) requires `_<Float__FLOAT`(#SemanticCastToFloat(F),roundFloat(#token("0.0","Float"),precisionFloat(#SemanticCastToFloat(F)),exponentBitsFloat(#SemanticCastToFloat(F)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(133) org.kframework.attributes.Location(Location(133,8,133,160)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `SignBit`(#SemanticCastToFloat(F))=>#token("1","Int") requires signFloat(#SemanticCastToFloat(F)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(198) org.kframework.attributes.Location(Location(198,8,198,45)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `SignBit`(#SemanticCastToFloat(F))=>#token("0","Int") requires `notBool_`(signFloat(#SemanticCastToFloat(F))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(197) org.kframework.attributes.Location(Location(197,8,197,53)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `SignBitToSign`(#SemanticCastToInt(M),#SemanticCastToInt(E),#SemanticCastToInt(B))=>`Int2Float`(`_-Int_`(#token("1","Int"),`_*Int_`(#SemanticCastToInt(B),#token("2","Int"))),#SemanticCastToInt(M),#SemanticCastToInt(E)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(76) org.kframework.attributes.Location(Location(76,8,76,68)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MinimumNormalizedFloat`(#SemanticCastToInt(P),#SemanticCastToInt(E))=>`_^Float__FLOAT`(roundFloat(#token("2.0","Float"),#SemanticCastToInt(P),#SemanticCastToInt(E)),`Int2Float`(`MinimumFloatingPointExponent`(#SemanticCastToInt(E)),#SemanticCastToInt(P),#SemanticCastToInt(E))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(75) org.kframework.attributes.Location(Location(75,8,75,117)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MinimumFloatingPointExponent`(#SemanticCastToInt(E))=>`_-Int_`(#token("2","Int"),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(E),#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(158) org.kframework.attributes.Location(Location(158,8,158,69)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MinExponent`(#SemanticCastToInt(I))=>`_-Int_`(#token("2","Int"),`MaxExponent`(#SemanticCastToInt(I))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(189) org.kframework.attributes.Location(Location(189,8,189,47)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MaxExponent`(#SemanticCastToInt(I))=>`_<<Int_`(#token("1","Int"),`_-Int_`(#SemanticCastToInt(I),#token("1","Int"))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(185) org.kframework.attributes.Location(Location(185,8,185,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MaxExponentBits`(#SemanticCastToInt(I))=>`_-Int_`(`_<<Int_`(#token("1","Int"),#SemanticCastToInt(I)),#token("1","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(187) org.kframework.attributes.Location(Location(187,8,187,48)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MantissaFloat`(#SemanticCastToFloat(F))=>`_&Int_`(`Float2Int`(`_*Float__FLOAT`(roundFloat(absFloat(#SemanticCastToFloat(F)),precisionFloat(#SemanticCastToFloat(F)),`_+Int_`(exponentBitsFloat(#SemanticCastToFloat(F)),#token("2","Int"))),`_^Float__FLOAT`(roundFloat(#token("2.0","Float"),precisionFloat(#SemanticCastToFloat(F)),`_+Int_`(exponentBitsFloat(#SemanticCastToFloat(F)),#token("2","Int"))),`Int2Float`(`_-Int_`(`_-Int_`(precisionFloat(#SemanticCastToFloat(F)),#token("1","Int")),exponentFloat(#SemanticCastToFloat(F))),precisionFloat(#SemanticCastToFloat(F)),`_+Int_`(exponentBitsFloat(#SemanticCastToFloat(F)),#token("2","Int")))))),`_-Int_`(`_<<Int_`(#token("1","Int"),`_-Int_`(precisionFloat(#SemanticCastToFloat(F)),#token("1","Int"))),#token("1","Int"))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(169) org.kframework.attributes.Location(Location(169,8,172,55)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) owise()]
  rule `MantissaFloat`(#SemanticCastToFloat(F))=>`MantissaFloat`(`_+Float__FLOAT`(absFloat(#SemanticCastToFloat(F)),`MinimumNormalizedFloat`(precisionFloat(#SemanticCastToFloat(F)),exponentBitsFloat(#SemanticCastToFloat(F))))) requires `_<Float__FLOAT`(absFloat(#SemanticCastToFloat(F)),`MinimumNormalizedFloat`(precisionFloat(#SemanticCastToFloat(F)),exponentBitsFloat(#SemanticCastToFloat(F)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(166) org.kframework.attributes.Location(Location(166,8,167,94)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `MantissaFloat`(#SemanticCastToFloat(F))=>#token("1","Int") requires isNaN(#SemanticCastToFloat(F)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(164) org.kframework.attributes.Location(Location(164,8,164,47)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `MantissaFloat`(#SemanticCastToFloat(F))=>#token("0","Int") requires isInfinite(#SemanticCastToFloat(F)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(160) org.kframework.attributes.Location(Location(160,8,160,52)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `MantissaBitsToFixedPoint`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(M),#SemanticCastToInt(I))=>`_/Float__FLOAT`(`Int2Float`(`_|Int_`(`_<<Int_`(#SemanticCastToInt(I),`_-Int_`(#SemanticCastToInt(Mlen),#token("1","Int"))),#SemanticCastToInt(M)),#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen)),`_^Float__FLOAT`(roundFloat(#token("2.0","Float"),#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen)),`Int2Float`(`_-Int_`(#SemanticCastToInt(Mlen),#token("1","Int")),#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(82) org.kframework.attributes.Location(Location(82,8,88,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MIntToSignBit`(#SemanticCastToMInt(MI))=>uvalueMInt(extractMInt(#SemanticCastToMInt(MI),#token("0","Int"),#token("1","Int"))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(179) org.kframework.attributes.Location(Location(179,8,179,62)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MIntToMantissaBits`(#SemanticCastToMInt(MI),#SemanticCastToInt(E),#SemanticCastToInt(M))=>uvalueMInt(extractMInt(#SemanticCastToMInt(MI),`_+Int_`(#token("1","Int"),#SemanticCastToInt(E)),`_+Int_`(#SemanticCastToInt(E),#SemanticCastToInt(M)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(183) org.kframework.attributes.Location(Location(183,8,183,87)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MIntToFloatImpl`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(_),#SemanticCastToInt(E),#SemanticCastToInt(M))=>roundFloat(`GetNaN`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen)),#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen)) requires `_andBool_`(`_==Int_`(#SemanticCastToInt(E),`MaxExponentBits`(#SemanticCastToInt(Elen))),`_>Int_`(#SemanticCastToInt(M),#token("0","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(109) org.kframework.attributes.Location(Location(109,8,110,58)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `MIntToFloatImpl`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(S),#token("0","Int"),#SemanticCastToInt(M))=>`MIntSegmentsToFloatDenormalized`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(S),#token("0","Int"),#SemanticCastToInt(M)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(117) org.kframework.attributes.Location(Location(117,8,119,55)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MIntToFloatImpl`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(S),#SemanticCastToInt(E),#token("0","Int"))=>`_*Float__FLOAT`(`SignBitToSign`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(S)),roundFloat(`GetInfinity`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen)),#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen))) requires `_==Int_`(#SemanticCastToInt(E),`MaxExponentBits`(#SemanticCastToInt(Elen))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(104) org.kframework.attributes.Location(Location(104,8,107,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `MIntToFloatImpl`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(S),#SemanticCastToInt(E),#SemanticCastToInt(M))=>`MIntSegmentsToFloatNormalized`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(S),#SemanticCastToInt(E),#SemanticCastToInt(M)) requires `_andBool_`(`_>Int_`(#SemanticCastToInt(E),#token("0","Int")),`_<Int_`(#SemanticCastToInt(E),`MaxExponentBits`(#SemanticCastToInt(Elen)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(112) org.kframework.attributes.Location(Location(112,8,115,57)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `MIntToExponentBits`(#SemanticCastToMInt(M),#SemanticCastToInt(E))=>uvalueMInt(extractMInt(#SemanticCastToMInt(M),#token("1","Int"),`_+Int_`(#token("1","Int"),#SemanticCastToInt(E)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(181) org.kframework.attributes.Location(Location(181,8,181,75)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MIntSegmentsToFloatNormalized`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(S),#SemanticCastToInt(E),#SemanticCastToInt(M))=>roundFloat(`_*Float__FLOAT`(`_*Float__FLOAT`(`SignBitToSign`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(S)),`ExponentBitsToExponentMultiplier`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(E))),`MantissaBitsToFixedPoint`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(M),#token("1","Int"))),#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(90) org.kframework.attributes.Location(Location(90,8,95,58)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MIntSegmentsToFloatDenormalized`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(S),#SemanticCastToInt(_),#SemanticCastToInt(M))=>roundFloat(`_*Float__FLOAT`(`_*Float__FLOAT`(`SignBitToSign`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(S)),`ExponentBitsToExponentMultiplier`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),`MinExponent`(#SemanticCastToInt(Elen)))),`MantissaBitsToFixedPoint`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(M),#token("0","Int"))),#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(97) org.kframework.attributes.Location(Location(97,8,102,58)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MInt2Float`(#SemanticCastToMInt(MI),#SemanticCastToInt(M),#SemanticCastToInt(E))=>`MIntToFloatImpl`(#SemanticCastToInt(M),#SemanticCastToInt(E),`MIntToSignBit`(#SemanticCastToMInt(MI)),`MIntToExponentBits`(#SemanticCastToMInt(MI),#SemanticCastToInt(E)),`MIntToMantissaBits`(#SemanticCastToMInt(MI),#SemanticCastToInt(E),#SemanticCastToInt(M))) requires `_andBool_`(`_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI)),`_+Int_`(#SemanticCastToInt(M),#SemanticCastToInt(E))),`_>=Int_`(#SemanticCastToInt(M),#token("2","Int"))),`_>=Int_`(#SemanticCastToInt(E),#token("2","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(121) org.kframework.attributes.Location(Location(121,8,126,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `Half2Float`(#SemanticCastToFloat(F))=>roundFloat(#SemanticCastToFloat(F),#token("24","Int"),#token("8","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(130) org.kframework.attributes.Location(Location(130,8,130,45)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `GetNaN`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen))=>roundFloat(#token("0.0","Float"),#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(74) org.kframework.attributes.Location(Location(74,8,74,57)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `GetInfinity`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen))=>roundFloat(`_^Float__FLOAT`(#token("2.0","Float"),#token("1000000.0","Float")),#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(73) org.kframework.attributes.Location(Location(73,8,73,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `Float2MInt`(#SemanticCastToFloat(F),#token("64","Int"))=>mi(#token("64","Int"),`_|Int_`(`_|Int_`(`_<<Int_`(`SignBit`(#SemanticCastToFloat(F)),#token("63","Int")),`_<<Int_`(`ExponentBitVectorFloat`(#SemanticCastToFloat(F)),#token("52","Int"))),`MantissaFloat`(#SemanticCastToFloat(F)))) requires `_andBool_`(`_==Int_`(precisionFloat(#SemanticCastToFloat(F)),#token("53","Int")),`_==Int_`(exponentBitsFloat(#SemanticCastToFloat(F)),#token("11","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(207) org.kframework.attributes.Location(Location(207,8,208,78)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `Float2MInt`(#SemanticCastToFloat(F),#token("32","Int"))=>mi(#token("32","Int"),`_|Int_`(`_|Int_`(`_<<Int_`(`SignBit`(#SemanticCastToFloat(F)),#token("31","Int")),`_<<Int_`(`ExponentBitVectorFloat`(#SemanticCastToFloat(F)),#token("23","Int"))),`MantissaFloat`(#SemanticCastToFloat(F)))) requires `_andBool_`(`_==Int_`(precisionFloat(#SemanticCastToFloat(F)),#token("24","Int")),`_==Int_`(exponentBitsFloat(#SemanticCastToFloat(F)),#token("8","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(204) org.kframework.attributes.Location(Location(204,8,205,77)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `Float2MInt`(#SemanticCastToFloat(F),#token("16","Int"))=>mi(#token("16","Int"),`_|Int_`(`_|Int_`(`_<<Int_`(`SignBit`(#SemanticCastToFloat(F)),#token("15","Int")),`_<<Int_`(`ExponentBitVectorFloat`(#SemanticCastToFloat(F)),#token("10","Int"))),`MantissaFloat`(#SemanticCastToFloat(F)))) requires `_andBool_`(`_==Int_`(precisionFloat(#SemanticCastToFloat(F)),#token("11","Int")),`_==Int_`(exponentBitsFloat(#SemanticCastToFloat(F)),#token("5","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(201) org.kframework.attributes.Location(Location(201,8,202,77)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `Float2Half`(#SemanticCastToFloat(F),#token("3","Int"))=>roundToZero(#SemanticCastToFloat(F)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(153) org.kframework.attributes.Location(Location(153,8,153,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `Float2Half`(#SemanticCastToFloat(F),#token("2","Int"))=>roundToZero(#SemanticCastToFloat(F)) requires signFloat(#SemanticCastToFloat(F)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(152) org.kframework.attributes.Location(Location(152,8,152,64)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `Float2Half`(#SemanticCastToFloat(F),#token("2","Int"))=>roundAwayFromZero(#SemanticCastToFloat(F)) requires `notBool_`(signFloat(#SemanticCastToFloat(F))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(151) org.kframework.attributes.Location(Location(151,8,151,78)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `Float2Half`(#SemanticCastToFloat(F),#token("1","Int"))=>roundToZero(#SemanticCastToFloat(F)) requires `notBool_`(signFloat(#SemanticCastToFloat(F))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(148) org.kframework.attributes.Location(Location(148,8,148,72)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `Float2Half`(#SemanticCastToFloat(F),#token("1","Int"))=>roundAwayFromZero(#SemanticCastToFloat(F)) requires signFloat(#SemanticCastToFloat(F)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(149) org.kframework.attributes.Location(Location(149,8,149,70)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `Float2Half`(#SemanticCastToFloat(F),#token("0","Int"))=>roundFloat(#SemanticCastToFloat(F),#token("11","Int"),#token("5","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(141) org.kframework.attributes.Location(Location(141,8,141,48)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `Float2Double`(#SemanticCastToFloat(F))=>roundFloat(#SemanticCastToFloat(F),#token("53","Int"),#token("11","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(128) org.kframework.attributes.Location(Location(128,8,128,48)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `ExponentMultFloat`(#SemanticCastToFloat(F))=>`_^Float__FLOAT`(`Int2Float`(#token("2","Int"),precisionFloat(#SemanticCastToFloat(F)),exponentBitsFloat(#SemanticCastToFloat(F))),`Int2Float`(exponentFloat(#SemanticCastToFloat(F)),precisionFloat(#SemanticCastToFloat(F)),exponentBitsFloat(#SemanticCastToFloat(F)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(135) org.kframework.attributes.Location(Location(135,8,135,161)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `ExponentBitsToExponent`(#SemanticCastToInt(Elen),#SemanticCastToInt(E))=>`minInt(_,_)_INT-COMMON`(`maxInt(_,_)_INT-COMMON`(`_+Int_`(`_-Int_`(#SemanticCastToInt(E),`MaxExponent`(#SemanticCastToInt(Elen))),#token("1","Int")),`MinExponent`(#SemanticCastToInt(Elen))),`MaxExponent`(#SemanticCastToInt(Elen))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(191) org.kframework.attributes.Location(Location(191,8,191,128)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `ExponentBitsToExponentMultiplier`(#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen),#SemanticCastToInt(E))=>`_^Float__FLOAT`(roundFloat(#token("2.0","Float"),#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen)),`Int2Float`(`ExponentBitsToExponent`(#SemanticCastToInt(Elen),#SemanticCastToInt(E)),#SemanticCastToInt(Mlen),#SemanticCastToInt(Elen))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(78) org.kframework.attributes.Location(Location(78,8,80,92)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `ExponentBitVectorFloat`(#SemanticCastToFloat(F))=>`_-Int_`(`_<<Int_`(#token("1","Int"),exponentBitsFloat(#SemanticCastToFloat(F))),#token("1","Int")) requires `_orBool_`(isInfinite(#SemanticCastToFloat(F)),isNaN(#SemanticCastToFloat(F))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(194) org.kframework.attributes.Location(Location(194,8,194,113)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `ExponentBitVectorFloat`(#SemanticCastToFloat(F))=>`_-Int_`(`_+Int_`(exponentFloat(#SemanticCastToFloat(F)),`_<<Int_`(#token("1","Int"),`_-Int_`(exponentBitsFloat(#SemanticCastToFloat(F)),#token("1","Int")))),#token("1","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(195) org.kframework.attributes.Location(Location(195,8,195,105)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) owise()]
  rule `ExponentBitVectorFloat`(#SemanticCastToFloat(F))=>#token("0","Int") requires `_<Float__FLOAT`(absFloat(#SemanticCastToFloat(F)),`MinimumNormalizedFloat`(precisionFloat(#SemanticCastToFloat(F)),exponentBitsFloat(#SemanticCastToFloat(F)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(193) org.kframework.attributes.Location(Location(193,8,193,130)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `Double2Float`(#SemanticCastToFloat(F))=>roundFloat(#SemanticCastToFloat(F),#token("24","Int"),#token("8","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(129) org.kframework.attributes.Location(Location(129,8,129,47)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment(I=1 for normalized, I=0 for denormalized.,[org.kframework.attributes.Location(Location(82,51,82,94)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment( may differ from the corresponsing representation in machine.,[org.kframework.attributes.Location(Location(163,3,163,66)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment( Then, convert to an int.,[org.kframework.attributes.Location(Location(176,3,176,30)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment( Then multiply by 2^#NumMantissaBits (Getting a float of 1(MantissaBits).0),[org.kframework.attributes.Location(Location(175,3,175,80)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment( Then Mask out the uppermost 1.  This yields an int containing the Mantissa of the original float.,[org.kframework.attributes.Location(Location(177,3,177,103)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment( The following value, chosen for the mantissa of a NaN, is arbitrary and,[org.kframework.attributes.Location(Location(162,3,162,77)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment( Next, multiply by 2^-Exponent to zero the exponent (getting a fixed point of 1.MantissaBits),[org.kframework.attributes.Location(Location(174,3,174,98)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment( MInt,[org.kframework.attributes.Location(Location(200,3,200,10)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment( Int,[org.kframework.attributes.Location(Location(157,3,157,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment( Infinities' mantissas must be zero.,[org.kframework.attributes.Location(Location(160,53,160,91)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment( Float,[org.kframework.attributes.Location(Location(72,3,72,11)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment( First, get rid of the sign bit.  ,[org.kframework.attributes.Location(Location(173,3,173,39)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment( Bool,[org.kframework.attributes.Location(Location(56,3,56,10)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
  ModuleComment(  rule Float2Half(F, 1) => GetNaN(11, 5) requires isNaN(F)
  rule Float2Half(F, 1) => GetNaN(11, 5) requires F >Float maxValueFloat(precisionFloat(F), exponentBitsFloat(F))
  rule Float2Half(F, 1) => --Float GetInfinity(11, 5) requires F <Float --Float maxValueFloat(precisionFloat(F), exponentBitsFloat(F)),[org.kframework.attributes.Location(Location(143,1,145,136)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))])
endmodule


module ARMV8-CONVERSIONS$SYNTAX [org.kframework.attributes.Location(Location(53,1,210,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))]
  imports ARMV8-CONVERSIONS-SYNTAX$SYNTAX
endmodule


module ARMV8-CONVERSIONS-SYNTAX [org.kframework.attributes.Location(Location(1,1,51,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))]
  imports STRING
  imports MINT
  imports INT
  imports FLOAT-SYNTAX
  imports FLOAT
  imports BOOL
  imports ARMV8-CONVERSIONS-SYNTAX$SYNTAX
endmodule


module ARMV8-CONVERSIONS-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1,1,51,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-conversions.k))]
  imports STRING$SYNTAX
  imports MINT$SYNTAX
  imports INT$SYNTAX
  imports FLOAT-SYNTAX$SYNTAX
  imports FLOAT$SYNTAX
  imports BOOL$SYNTAX
  syntax MInt ::= "Float2MInt" "(" Float "," Int ")" [function() klabel(Float2MInt)]
  syntax Int ::= "SignBit" "(" Float ")" [function() klabel(SignBit)]
  syntax Int ::= "MinimumFloatingPointExponent" "(" Int ")" [function() klabel(MinimumFloatingPointExponent)]
  syntax Int ::= "MinExponent" "(" Int ")" [function() klabel(MinExponent)]
  syntax Int ::= "MaxExponentBits" "(" Int ")" [function() klabel(MaxExponentBits)]
  syntax Int ::= "MaxExponent" "(" Int ")" [function() klabel(MaxExponent)]
  syntax Int ::= "MantissaFloat" "(" Float ")" [function() klabel(MantissaFloat)]
  syntax Int ::= "MIntToSignBit" "(" MInt ")" [function() klabel(MIntToSignBit)]
  syntax Int ::= "MIntToMantissaBits" "(" MInt "," Int "," Int ")" [function() klabel(MIntToMantissaBits)]
  syntax Int ::= "MIntToExponentBits" "(" MInt "," Int ")" [function() klabel(MIntToExponentBits)]
  syntax Int ::= "ExponentBitsToExponent" "(" Int "," Int ")" [function() klabel(ExponentBitsToExponent)]
  syntax Int ::= "ExponentBitVectorFloat" "(" Float ")" [function() klabel(ExponentBitVectorFloat)]
  syntax Int ::= "CorrectionFromZero" "(" Int ")" [function() klabel(CorrectionFromZero)]
  syntax Int ::= "ConvertMantissa" "(" Float ")" [function() klabel(ConvertMantissa)]
  syntax Int ::= "ConvertExponent" "(" Int ")" [function() klabel(ConvertExponent)]
  syntax Float ::= "roundToZero" "(" Float ")" [function() klabel(roundToZero)]
  syntax Float ::= "roundAwayFromZero" "(" Float ")" [function() klabel(roundAwayFromZero)]
  syntax Float ::= "negateFloat" "(" Float ")" [function() klabel(negateFloat)]
  syntax Float ::= "SignMultFloat" "(" Float ")" [function() klabel(SignMultFloat)]
  syntax Float ::= "SignBitToSign" "(" Int "," Int "," Int ")" [function() klabel(SignBitToSign)]
  syntax Float ::= "MinimumNormalizedFloat" "(" Int "," Int ")" [function() klabel(MinimumNormalizedFloat)]
  syntax Float ::= "MantissaBitsToFixedPoint" "(" Int "," Int "," Int "," Int ")" [function() klabel(MantissaBitsToFixedPoint)]
  syntax Float ::= "MIntToFloatImpl" "(" Int "," Int "," Int "," Int "," Int ")" [function() klabel(MIntToFloatImpl)]
  syntax Float ::= "MIntSegmentsToFloatNormalized" "(" Int "," Int "," Int "," Int "," Int ")" [function() klabel(MIntSegmentsToFloatNormalized)]
  syntax Float ::= "MIntSegmentsToFloatDenormalized" "(" Int "," Int "," Int "," Int "," Int ")" [function() klabel(MIntSegmentsToFloatDenormalized)]
  syntax Float ::= "MInt2Float" "(" MInt "," Int "," Int ")" [function() klabel(MInt2Float)]
  syntax Float ::= "Half2Float" "(" Float ")" [function() klabel(Half2Float)]
  syntax Float ::= "GetNaN" "(" Int "," Int ")" [function() klabel(GetNaN)]
  syntax Float ::= "GetInfinity" "(" Int "," Int ")" [function() klabel(GetInfinity)]
  syntax Float ::= "Float2Half" "(" Float "," Int ")" [function() klabel(Float2Half)]
  syntax Float ::= "Float2Double" "(" Float ")" [function() klabel(Float2Double)]
  syntax Float ::= "ExponentMultFloat" "(" Float ")" [function() klabel(ExponentMultFloat)]
  syntax Float ::= "ExponentBitsToExponentMultiplier" "(" Int "," Int "," Int ")" [function() klabel(ExponentBitsToExponentMultiplier)]
  syntax Float ::= "Double2Float" "(" Float ")" [function() klabel(Double2Float)]
  syntax Bool ::= "isZero" "(" Float ")" [function() klabel(isZero)]
  syntax Bool ::= "isPositiveZero" "(" Float ")" [function() klabel(isPositiveZero)]
  syntax Bool ::= "isNegativeZero" "(" Float ")" [function() klabel(isNegativeZero)]
endmodule


module ARMV8-LOADER [org.kframework.attributes.Location(Location(7,1,187,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))]
  imports ARMV8-LOADER-SYNTAX
  imports ARMV8-LOADER$SYNTAX
  imports ARMV8-CONFIGURATION
  rule instructionlist(#SemanticCastToInstruction(I),#SemanticCastToInstructions(Is))=>#SemanticCastToInstruction(I)~>#SemanticCastToInstructions(Is) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(12) org.kframework.attributes.Location(Location(12,8,12,48)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `<k>`(#noDots(.KList),`.List{"instructionlist"}`(.KList)=>.K,#dots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(30) org.kframework.attributes.Location(Location(30,8,30,39)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `<k>`(#noDots(.KList),.K=>`End_ARMV8-LOADER`(.KList),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(166) org.kframework.attributes.Location(Location(166,8,166,26)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR))=>.K,#dots(.KList)),`<instructiontext>`(#noDots(.KList),code(#SemanticCastToMap(M)=>`Map:update`(#SemanticCastToMap(M),memloc(#SemanticCastToMInt(L)),storedInstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR))))),#noDots(.KList))),`<nextloc>`(#noDots(.KList),#SemanticCastToMInt(L)=>addMInt(#SemanticCastToMInt(L),mi(#token("32","Int"),#token("1","Int"))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(25) org.kframework.attributes.Location(Location(25,8,27,60)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToNLabel(S),#SemanticCastToOperands(OPR))=>.K,#dots(.KList)),`<instructiontext>`(#noDots(.KList),code(#SemanticCastToMap(M)=>`Map:update`(#SemanticCastToMap(M),memloc(#SemanticCastToMInt(L)),storedInstr(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToNLabel(S),#SemanticCastToOperands(OPR))))),#noDots(.KList))),`<nextloc>`(#noDots(.KList),#SemanticCastToMInt(L)=>addMInt(#SemanticCastToMInt(L),mi(#token("32","Int"),#token("1","Int"))),#noDots(.KList))) requires `notBool_`(`_==K_`(#SemanticCastToOpcode(OP),`end_ARMV8-SYNTAX`(.KList))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(19) org.kframework.attributes.Location(Location(19,8,22,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR))=>.K,#dots(.KList)),`<instructiontext>`(#noDots(.KList),code(#SemanticCastToMap(M)=>`Map:update`(#SemanticCastToMap(M),memloc(#SemanticCastToMInt(L)),storedInstr(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR))))),#noDots(.KList))),`<nextloc>`(#noDots(.KList),#SemanticCastToMInt(L)=>addMInt(#SemanticCastToMInt(L),mi(#token("32","Int"),#token("1","Int"))),#noDots(.KList))) requires `notBool_`(`_==K_`(#SemanticCastToOpcode(OP),`end_ARMV8-SYNTAX`(.KList))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(14) org.kframework.attributes.Location(Location(14,8,17,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),#token("scan","KItem")=>setDefaultRegs(#SemanticCastToOpcode(OP))~>execinstrBeat(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)),#token("0","Int"))~>execinstrBeat(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)),#token("1","Int"))~>execinstrBeat(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)),#token("2","Int"))~>execinstrBeat(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)),#token("3","Int"))~>#token("scan","KItem"),#dots(.KList)),`<instructiontext>`(#noDots(.KList),code(`_Map_`(`_|->_`(memloc(#SemanticCastToMInt(L)),storedInstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)))),#SemanticCastToMap(_))),#noDots(.KList))),`<regstate>`(#dots(.KList),`_|->_`(#token("\"R15\"","String"),memloc(#SemanticCastToMInt(L))=>memloc(addMInt(#SemanticCastToMInt(L),mi(#token("32","Int"),#token("1","Int"))))),#dots(.KList))) requires `_andBool_`(`notBool_`(`_orBool_`(`_==K_`(#SemanticCastToOpcode(OP),#token("sst","StepCommand")),`_==K_`(#SemanticCastToOpcode(OP),#token("sto","StepCommand")))),`_==K_`(#SemanticCastToOpcode(OP),#token("VMOV","Opcode"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(98) org.kframework.attributes.Location(Location(98,8,115,86)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),#token("scan","KItem")=>setDefaultRegs(#SemanticCastToOpcode(OP))~>execinstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)))~>#token("scan","KItem"),#dots(.KList)),`<instructiontext>`(#noDots(.KList),code(`_Map_`(`_|->_`(memloc(#SemanticCastToMInt(L)),storedInstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)))),#SemanticCastToMap(_))),#noDots(.KList))),`<regstate>`(#dots(.KList),`_|->_`(#token("\"R15\"","String"),memloc(#SemanticCastToMInt(L))=>memloc(addMInt(#SemanticCastToMInt(L),mi(#token("32","Int"),#token("1","Int"))))),#dots(.KList))) requires `_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToOpcode(OP),#token("MOV","Opcode")),`_==K_`(#SemanticCastToOpcode(OP),#token("ADD","Opcode"))),`_==K_`(#SemanticCastToOpcode(OP),#token("MAX","Opcode"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(129) org.kframework.attributes.Location(Location(129,8,135,71)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),#token("scan","KItem")=>setDefaultRegs(#SemanticCastToOpcode(OP))~>execinstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)))~>#token("scan","KItem"),#dots(.KList)),`<instructiontext>`(#noDots(.KList),code(`_Map_`(`_|->_`(memloc(#SemanticCastToMInt(L)),storedInstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)))),#SemanticCastToMap(_))),#noDots(.KList))),`<regstate>`(#dots(.KList),`_|->_`(#token("\"R15\"","String"),memloc(#SemanticCastToMInt(L))=>memloc(addMInt(#SemanticCastToMInt(L),mi(#token("32","Int"),#token("1","Int"))))),#dots(.KList))) requires `_==K_`(#SemanticCastToOpcode(OP),#token("sst","StepCommand")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(172) org.kframework.attributes.Location(Location(172,8,175,31)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),#token("scan","KItem")=>setDefaultRegs(#SemanticCastToOpcode(OP))~>execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToNLabel(S),#SemanticCastToOperands(OPR)))~>#token("scan","KItem"),#dots(.KList)),`<instructiontext>`(#noDots(.KList),code(`_Map_`(`_|->_`(memloc(#SemanticCastToMInt(L)),storedInstr(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToNLabel(S),#SemanticCastToOperands(OPR)))),#SemanticCastToMap(_))),#noDots(.KList))),`<regstate>`(#dots(.KList),`_|->_`(#token("\"R15\"","String"),memloc(#SemanticCastToMInt(L))=>memloc(addMInt(#SemanticCastToMInt(L),mi(#token("32","Int"),#token("1","Int"))))),#dots(.KList))) requires `_==K_`(#SemanticCastToOpcode(OP),#token("VMOV","Opcode")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(118) org.kframework.attributes.Location(Location(118,8,124,32)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),#token("scan","KItem")=>setDefaultRegs(#SemanticCastToOpcode(OP))~>beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR)),#token("0","Int"))~>execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR)),#token("0","Int"))~>setDefaultRegs(#SemanticCastToOpcode(OP))~>beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR)),#token("1","Int"))~>execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR)),#token("1","Int"))~>setDefaultRegs(#SemanticCastToOpcode(OP))~>beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR)),#token("2","Int"))~>execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR)),#token("2","Int"))~>setDefaultRegs(#SemanticCastToOpcode(OP))~>beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR)),#token("3","Int"))~>execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR)),#token("3","Int"))~>#token("scan","KItem"),#dots(.KList)),`<instructiontext>`(#noDots(.KList),code(`_Map_`(`_|->_`(memloc(#SemanticCastToMInt(L)),storedInstr(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR)))),#SemanticCastToMap(_))),#noDots(.KList))),`<regstate>`(#dots(.KList),`_|->_`(#token("\"R15\"","String"),memloc(#SemanticCastToMInt(L))=>memloc(addMInt(#SemanticCastToMInt(L),mi(#token("32","Int"),#token("1","Int"))))),#dots(.KList))) requires `notBool_`(`_orBool_`(`_orBool_`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToOpcode(OP),`end_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToOpcode(OP),#token("ext","StepCommand"))),`_==K_`(#SemanticCastToOpcode(OP),#token("dtc","StepCommand"))),`_==K_`(#SemanticCastToOpcode(OP),#token("cmp","StepCommand"))),`_==K_`(#SemanticCastToOpcode(OP),#token("maa","StepCommand")))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(52) org.kframework.attributes.Location(Location(52,8,93,121)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),#token("scan","KItem")=>execinstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)))~>#token("scan","KItem"),#dots(.KList)),`<instructiontext>`(#noDots(.KList),code(`_Map_`(`_|->_`(memloc(#SemanticCastToMInt(L)),storedInstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)))),#SemanticCastToMap(_))),#noDots(.KList))),`<regstate>`(#dots(.KList),`_|->_`(#token("\"R15\"","String"),memloc(#SemanticCastToMInt(L))=>memloc(addMInt(#SemanticCastToMInt(L),mi(#token("32","Int"),#token("1","Int"))))),#dots(.KList))) requires `_orBool_`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToOpcode(OP),#token("sto","StepCommand")),`_==K_`(#SemanticCastToOpcode(OP),#token("conca","StepCommand"))),`_==K_`(#SemanticCastToOpcode(OP),#token("uint","StepCommand"))),`_==K_`(#SemanticCastToOpcode(OP),#token("sint","StepCommand"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(177) org.kframework.attributes.Location(Location(177,8,180,95)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),#token("scan","KItem")=>execinstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)))~>#token("scan","KItem"),#dots(.KList)),`<instructiontext>`(#noDots(.KList),code(`_Map_`(`_|->_`(memloc(#SemanticCastToMInt(L)),storedInstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToOperands(OPR)))),#SemanticCastToMap(_))),#noDots(.KList))),`<regstate>`(#dots(.KList),`_|->_`(#token("\"R15\"","String"),memloc(#SemanticCastToMInt(L))=>memloc(addMInt(#SemanticCastToMInt(L),mi(#token("32","Int"),#token("1","Int"))))),#dots(.KList))) requires `_==K_`(#SemanticCastToOpcode(OP),`end_ARMV8-SYNTAX`(.KList)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(137) org.kframework.attributes.Location(Location(137,8,140,31)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),#token("scan","KItem")=>execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR)))~>#token("scan","KItem"),#dots(.KList)),`<instructiontext>`(#noDots(.KList),code(`_Map_`(`_|->_`(memloc(#SemanticCastToMInt(L)),storedInstr(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(OP),#SemanticCastToLabel(S),#SemanticCastToOperands(OPR)))),#SemanticCastToMap(_))),#noDots(.KList))),`<regstate>`(#dots(.KList),`_|->_`(#token("\"R15\"","String"),memloc(#SemanticCastToMInt(L))=>memloc(addMInt(#SemanticCastToMInt(L),mi(#token("32","Int"),#token("1","Int"))))),#dots(.KList))) requires `_orBool_`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToOpcode(OP),#token("ext","StepCommand")),`_==K_`(#SemanticCastToOpcode(OP),#token("dtc","StepCommand"))),`_==K_`(#SemanticCastToOpcode(OP),#token("cmp","StepCommand"))),`_==K_`(#SemanticCastToOpcode(OP),#token("maa","StepCommand"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(182) org.kframework.attributes.Location(Location(182,8,185,91)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),#token("scan","KItem")=>.K,#dots(.KList)),`<instructiontext>`(#noDots(.KList),code(#SemanticCastToMap(IMap)),#noDots(.KList))),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap),#noDots(.KList))) requires `notBool_`(`_in_keys(_)_MAP`(`project:Ptm`(`Map:lookup`(#SemanticCastToMap(RSMap),#token("\"R15\"","String"))),#SemanticCastToMap(IMap))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(145) org.kframework.attributes.Location(Location(145,8,148,63)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(#cells(`<k>`(#noDots(.KList),#SemanticCastToBeginp(`_:_ARMV8-SYNTAX`(#SemanticCastToStart(#token("start","Start"))))=>.K,#dots(.KList)),`<functarget>`(#noDots(.KList),#SemanticCastToMap(FMap)=>`Map:update`(#SemanticCastToMap(FMap),#token("start","Start"),memloc(#SemanticCastToMInt(L))),#noDots(.KList))),`<nextloc>`(#noDots(.KList),#SemanticCastToMInt(L),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(35) org.kframework.attributes.Location(Location(35,8,37,30)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(#cells(#cells(`<k>`(#noDots(.KList),`loadBegin_ARMV8-ABSTRACT-SYNTAX`(.KList)=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>`Map:update`(#SemanticCastToMap(RSMap),#token("\"R15\"","String"),#SemanticCastToMInt(LoadAddr)),#noDots(.KList))),`<begin>`(#noDots(.KList),#SemanticCastToK(_)=>#SemanticCastToMInt(LoadAddr),#noDots(.KList))),`<functarget>`(#dots(.KList),`_|->_`(#SemanticCastToStart(#token("start","Start")),#SemanticCastToMInt(LoadAddr)),#dots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(44) org.kframework.attributes.Location(Location(44,8,47,70)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(#cells(#cells(#cells(`<k>`(#noDots(.KList),#token("registersMessage","KItem")=>.K,#dots(.KList)),`<regstateseq>`(#dots(.KList),`.List`(.KList)=>`_List_`(`ListItem`(#SemanticCastToMap(RSMap)),`ListItem`(#SemanticCastToMap(FMap))),#noDots(.KList))),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap),#noDots(.KList))),`<functarget>`(#noDots(.KList),#SemanticCastToMap(FMap),#noDots(.KList))),`<instructiontext>`(#noDots(.KList),code(#SemanticCastToMap(IMap)),#noDots(.KList))) requires `notBool_`(`_in_keys(_)_MAP`(`project:Ptm`(`Map:lookup`(#SemanticCastToMap(RSMap),#token("\"R15\"","String"))),#SemanticCastToMap(IMap))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(157) org.kframework.attributes.Location(Location(157,8,162,61)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(#cells(#cells(#cells(`<k>`(#noDots(.KList),#token("registersMessage","KItem")=>.K,#dots(.KList)),`<regstateseq>`(#dots(.KList),`.List`(.KList)=>`ListItem`(#SemanticCastToMap(RSMap)),#noDots(.KList))),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap),#noDots(.KList))),`<functarget>`(#noDots(.KList),#SemanticCastToMap(FMap),#noDots(.KList))),`<instructiontext>`(#noDots(.KList),code(#SemanticCastToMap(IMap)),#noDots(.KList))) requires `_in_keys(_)_MAP`(`project:Ptm`(`Map:lookup`(#SemanticCastToMap(RSMap),#token("\"R15\"","String"))),#SemanticCastToMap(IMap)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(150) org.kframework.attributes.Location(Location(150,8,155,53)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  ModuleComment(registersMessage ~>,[org.kframework.attributes.Location(Location(70,20,70,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(registersMessage ~>,[org.kframework.attributes.Location(Location(65,20,65,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(registersMessage ~>,[org.kframework.attributes.Location(Location(60,20,60,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(registersMessage ~>,[org.kframework.attributes.Location(Location(55,20,55,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(registersMessage ~>,[org.kframework.attributes.Location(Location(137,41,137,63)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(registersMessage ~>,[org.kframework.attributes.Location(Location(120,20,120,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(registersMessage ~>,[org.kframework.attributes.Location(Location(107,20,107,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(registersMessage ~>,[org.kframework.attributes.Location(Location(104,20,104,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(registersMessage ~>,[org.kframework.attributes.Location(Location(101,20,101,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment( requires (OP ==K end),[org.kframework.attributes.Location(Location(28,8,28,32)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment( registersMessage ~>,[org.kframework.attributes.Location(Location(131,19,131,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment( registersMessage ~>,[org.kframework.attributes.Location(Location(110,19,110,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment( in_keys in stl,[org.kframework.attributes.Location(Location(148,65,148,82)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment( for vector lane, store the specific R to one element of Q.,[org.kframework.attributes.Location(Location(117,3,117,64)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment( end,[org.kframework.attributes.Location(Location(164,3,164,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment( Unroll instructions into KList,[org.kframework.attributes.Location(Location(11,3,11,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment( 
    for check
  ,[org.kframework.attributes.Location(Location(168,3,170,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(
    vmov
  ,[org.kframework.attributes.Location(Location(95,3,97,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(
    set the begin point
  ,[org.kframework.attributes.Location(Location(32,3,34,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(
    scan: scan the program and get them, for 4 beat
  ,[org.kframework.attributes.Location(Location(49,3,51,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(
    mov
  ,[org.kframework.attributes.Location(Location(126,3,128,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(
    if no more instruction, then exit
  ,[org.kframework.attributes.Location(Location(142,3,144,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(
    R15 is set to the entry point address corresponding to labels
    "start"
  ,[org.kframework.attributes.Location(Location(40,3,43,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
  ModuleComment(
                   beat1Result(OP . S OPR, 0) ~> 
                   execinstr1Beat(OP . S OPR, 0) ~>
                   registersMessage ~> 
                   
                   beat2Result(OP . S OPR) ~>
                   execinstr2Beat(OP . S OPR) ~>
                   registersMessage ~> 
                   
                   beat3Result(OP . S OPR) ~>
                   execinstr3Beat(OP . S OPR) ~>
                   registersMessage ~> 
                   
                   
                   beat4Result(OP . S OPR) ~>
                   execinstr4Beat(OP . S OPR) ~>
                   registersMessage ~>
               ,[org.kframework.attributes.Location(Location(72,17,89,17)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))])
endmodule


module ARMV8-LOADER$SYNTAX [org.kframework.attributes.Location(Location(7,1,187,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))]
  imports ARMV8-LOADER-SYNTAX$SYNTAX
  imports ARMV8-CONFIGURATION$SYNTAX
  syntax KItem ::= "End"
endmodule


module ARMV8-LOADER-SYNTAX [org.kframework.attributes.Location(Location(3,1,5,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))]
  imports ARMV8-LOADER-SYNTAX$SYNTAX
endmodule


module ARMV8-LOADER-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(3,1,5,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-loader.k))]
endmodule


module ARMV8-MINT [org.kframework.attributes.Location(Location(131,1,354,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))]
  imports ARMV8-MINT-SYNTAX
  imports ARMV8-MINT$SYNTAX
  rule zeroExtend(#SemanticCastToMInt(MI),#SemanticCastToInt(N))=>concatenateMInt(mi(`_-Int_`(#SemanticCastToInt(N),bitwidthMInt(#SemanticCastToMInt(MI))),#token("0","Int")),#SemanticCastToMInt(MI)) requires `_>Int_`(#SemanticCastToInt(N),bitwidthMInt(#SemanticCastToMInt(MI))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(274) org.kframework.attributes.Location(Location(274,8,275,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule zeroExtend(#SemanticCastToMInt(MI),#SemanticCastToInt(N))=>#SemanticCastToMInt(MI) requires `_==Int_`(#SemanticCastToInt(N),bitwidthMInt(#SemanticCastToMInt(MI))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(271) org.kframework.attributes.Location(Location(271,8,272,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule truncate(#SemanticCastToMInt(MI),#SemanticCastToInt(To))=>mi(#SemanticCastToInt(To),svalueMInt(andMInt(#SemanticCastToMInt(MI),mi(bitwidthMInt(#SemanticCastToMInt(MI)),umaxMInt(#SemanticCastToInt(To)))))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(262) org.kframework.attributes.Location(Location(262,8,263,71)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule toBool(#SemanticCastToMInt(MI))=>`ifBool_then_else__ARMV8-MINT-SYNTAX`(`_=/=Int_`(uvalueMInt(#SemanticCastToMInt(MI)),#token("0","Int")),#token("true","Bool"),#token("false","Bool")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(226) org.kframework.attributes.Location(Location(226,8,227,32)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule signExtend(#SemanticCastToMInt(MI),#SemanticCastToInt(N))=>mi(#SemanticCastToInt(N),svalueMInt(#SemanticCastToMInt(MI))) requires `_>Int_`(#SemanticCastToInt(N),bitwidthMInt(#SemanticCastToMInt(MI))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(319) org.kframework.attributes.Location(Location(319,8,320,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule signExtend(#SemanticCastToMInt(MI),#SemanticCastToInt(N))=>#SemanticCastToMInt(MI) requires `_==Int_`(#SemanticCastToInt(N),bitwidthMInt(#SemanticCastToMInt(MI))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(316) org.kframework.attributes.Location(Location(316,8,317,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule popCount(#SemanticCastToMInt(MI))=>countOnes(#SemanticCastToMInt(MI),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(326) org.kframework.attributes.Location(Location(326,8,326,45)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule plugInMask(#SemanticCastToMInt(MITarget),#SemanticCastToMInt(MISrc),#SemanticCastToInt(P))=>concatenateMInt(extractMInt(#SemanticCastToMInt(MITarget),#token("0","Int"),`_-Int_`(bitwidthMInt(#SemanticCastToMInt(MITarget)),bitwidthMInt(#SemanticCastToMInt(MISrc)))),#SemanticCastToMInt(MISrc)) requires `_andBool_`(`_==Int_`(#SemanticCastToInt(P),#token("0","Int")),`_<Int_`(bitwidthMInt(#SemanticCastToMInt(MISrc)),bitwidthMInt(#SemanticCastToMInt(MITarget)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(293) org.kframework.attributes.Location(Location(293,8,297,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule plugInMask(#SemanticCastToMInt(MITarget),#SemanticCastToMInt(MISrc),#SemanticCastToInt(P))=>concatenateMInt(extractMInt(#SemanticCastToMInt(MITarget),#token("0","Int"),`_-Int_`(`_-Int_`(bitwidthMInt(#SemanticCastToMInt(MITarget)),bitwidthMInt(#SemanticCastToMInt(MISrc))),#SemanticCastToInt(P))),concatenateMInt(#SemanticCastToMInt(MISrc),extractMInt(#SemanticCastToMInt(MITarget),`_-Int_`(bitwidthMInt(#SemanticCastToMInt(MITarget)),#SemanticCastToInt(P)),bitwidthMInt(#SemanticCastToMInt(MITarget))))) requires `_andBool_`(`_=/=Int_`(#SemanticCastToInt(P),#token("0","Int")),`_<Int_`(`_+Int_`(#SemanticCastToInt(P),bitwidthMInt(#SemanticCastToMInt(MISrc))),bitwidthMInt(#SemanticCastToMInt(MITarget)))) ensures #token("true","Bool") [contentStartColumn(10) contentStartLine(303) org.kframework.attributes.Location(Location(303,10,310,95)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule plugInMask(#SemanticCastToMInt(MITarget),#SemanticCastToMInt(MISrc),#SemanticCastToInt(P))=>concatenateMInt(#SemanticCastToMInt(MISrc),extractMInt(#SemanticCastToMInt(MITarget),bitwidthMInt(#SemanticCastToMInt(MISrc)),bitwidthMInt(#SemanticCastToMInt(MITarget)))) requires `_andBool_`(`_=/=Int_`(#SemanticCastToInt(P),#token("0","Int")),`_==Int_`(`_+Int_`(#SemanticCastToInt(P),bitwidthMInt(#SemanticCastToMInt(MISrc))),bitwidthMInt(#SemanticCastToMInt(MITarget)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(299) org.kframework.attributes.Location(Location(299,8,300,96)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule plugInMask(#SemanticCastToMInt(MITarget),#SemanticCastToMInt(MISrc),#SemanticCastToInt(P))=>#SemanticCastToMInt(MISrc) requires `_andBool_`(`_==Int_`(#SemanticCastToInt(P),#token("0","Int")),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MISrc)),bitwidthMInt(#SemanticCastToMInt(MITarget)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(290) org.kframework.attributes.Location(Location(290,8,291,84)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule negateMInt(#SemanticCastToMInt(MI))=>xorMInt(#SemanticCastToMInt(MI),mi(bitwidthMInt(#SemanticCastToMInt(MI)),#token("-1","Int"))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(213) org.kframework.attributes.Location(Location(213,8,213,63)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule getSignBit(#SemanticCastToMInt(MI))=>extractMInt(#SemanticCastToMInt(MI),#token("0","Int"),#token("1","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(344) org.kframework.attributes.Location(Location(344,8,344,52)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule fromBoolToMInt(#SemanticCastToBool(B),#SemanticCastToInt(W))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(#SemanticCastToBool(B),mi(#SemanticCastToInt(W),#token("1","Int")),mi(#SemanticCastToInt(W),#token("0","Int"))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(229) org.kframework.attributes.Location(Location(229,8,230,53)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule extractMask(#SemanticCastToMInt(MI),#SemanticCastToInt(NUM),#SemanticCastToInt(P))=>extractMInt(#SemanticCastToMInt(MI),`_-Int_`(`_-Int_`(bitwidthMInt(#SemanticCastToMInt(MI)),#SemanticCastToInt(P)),#SemanticCastToInt(NUM)),`_-Int_`(bitwidthMInt(#SemanticCastToMInt(MI)),#SemanticCastToInt(P))) requires `_<=Int_`(`_+Int_`(#SemanticCastToInt(P),#SemanticCastToInt(NUM)),bitwidthMInt(#SemanticCastToMInt(MI))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(254) org.kframework.attributes.Location(Location(254,8,256,49)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule countOnes(#SemanticCastToMInt(MI),#SemanticCastToInt(C))=>countOnes(andMInt(#SemanticCastToMInt(MI),subMInt(#SemanticCastToMInt(MI),mi(bitwidthMInt(#SemanticCastToMInt(MI)),#token("1","Int")))),`_+Int_`(#SemanticCastToInt(C),#token("1","Int"))) requires `notBool_`(zeroMInt(#SemanticCastToMInt(MI))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(328) org.kframework.attributes.Location(Location(328,8,330,36)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule countOnes(#SemanticCastToMInt(MI),#SemanticCastToInt(C))=>#SemanticCastToInt(C) requires zeroMInt(#SemanticCastToMInt(MI)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(332) org.kframework.attributes.Location(Location(332,8,333,28)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule convertMIntsToSInts(mintlist(#SemanticCastToMInt(MI),#SemanticCastToMInts(MIs)))=>intlist(svalueMInt(#SemanticCastToMInt(MI)),convertMIntsToSInts(#SemanticCastToMInts(MIs))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(171) org.kframework.attributes.Location(Location(171,8,171,78)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertMIntsToSInts(`.List{"mintlist"}`(.KList))=>`.List{"intlist"}`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(172) org.kframework.attributes.Location(Location(172,8,172,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertMIntsToFps(mintlist(#SemanticCastToMInt(MI),#SemanticCastToMInts(MIs)),#SemanticCastToInt(P),#SemanticCastToInt(E))=>floatlist(`MInt2Float`(#SemanticCastToMInt(MI),#SemanticCastToInt(P),#SemanticCastToInt(E)),convertMIntsToFps(#SemanticCastToMInts(MIs),#SemanticCastToInt(P),#SemanticCastToInt(E))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(177) org.kframework.attributes.Location(Location(177,8,177,92)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertMIntsToFps(`.List{"mintlist"}`(.KList),#SemanticCastToInt(_),#SemanticCastToInt(_))=>`.List{"floatlist"}`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(178) org.kframework.attributes.Location(Location(178,8,178,50)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertIntsToMInts(intlist(#SemanticCastToInt(I),#SemanticCastToInts(Is)),#SemanticCastToInt(W))=>mintlist(mi(#SemanticCastToInt(I),#SemanticCastToInt(W)),convertIntsToMInts(#SemanticCastToInts(Is),#SemanticCastToInt(W))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(201) org.kframework.attributes.Location(Location(201,8,201,73)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertIntsToMInts(`.List{"intlist"}`(.KList),#SemanticCastToInt(_))=>`.List{"mintlist"}`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(202) org.kframework.attributes.Location(Location(202,8,202,46)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertIntsToFps(intlist(#SemanticCastToInt(I),#SemanticCastToInts(Is)),#SemanticCastToInt(P),#SemanticCastToInt(E))=>floatlist(`Int2Float`(#SemanticCastToInt(I),#SemanticCastToInt(P),#SemanticCastToInt(E)),convertIntsToFps(#SemanticCastToInts(Is),#SemanticCastToInt(P),#SemanticCastToInt(E))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(183) org.kframework.attributes.Location(Location(183,8,183,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertIntsToFps(`.List{"intlist"}`(.KList),#SemanticCastToInt(_),#SemanticCastToInt(_))=>`.List{"floatlist"}`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(184) org.kframework.attributes.Location(Location(184,8,184,48)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertFpsToMInts(floatlist(#SemanticCastToFloat(F),#SemanticCastToFloats(Fs)),#SemanticCastToInt(W))=>mintlist(`Float2MInt`(#SemanticCastToFloat(F),#SemanticCastToInt(W)),convertFpsToMInts(#SemanticCastToFloats(Fs),#SemanticCastToInt(W))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(195) org.kframework.attributes.Location(Location(195,8,195,79)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertFpsToMInts(`.List{"floatlist"}`(.KList),#SemanticCastToInt(_))=>`.List{"mintlist"}`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(196) org.kframework.attributes.Location(Location(196,8,196,47)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertFpsToInts(floatlist(#SemanticCastToFloat(F),#SemanticCastToFloats(Fs)))=>intlist(`Float2Int`(#SemanticCastToFloat(F)),convertFpsToInts(#SemanticCastToFloats(Fs))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(189) org.kframework.attributes.Location(Location(189,8,189,67)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertFpsToInts(`.List{"floatlist"}`(.KList))=>`.List{"intlist"}`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(190) org.kframework.attributes.Location(Location(190,8,190,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertFloatsToDoubles(floatlist(#SemanticCastToFloat(F),#SemanticCastToFloats(Fs)))=>floatlist(`Float2Double`(#SemanticCastToFloat(F)),convertFloatsToDoubles(#SemanticCastToFloats(Fs))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(207) org.kframework.attributes.Location(Location(207,8,207,82)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule convertFloatsToDoubles(`.List{"floatlist"}`(.KList))=>`.List{"floatlist"}`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(208) org.kframework.attributes.Location(Location(208,8,208,50)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule charAt(#SemanticCastToString(S),#SemanticCastToInt(I))=>ordChar(substrString(#SemanticCastToString(S),#SemanticCastToInt(I),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(154) org.kframework.attributes.Location(Location(154,8,154,72)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(`undefMInt8_ARMV8-MINT-SYNTAX`(.KList))=>#token("8","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(145) lemma() org.kframework.attributes.Location(Location(145,8,145,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(`undefMInt64_ARMV8-MINT-SYNTAX`(.KList))=>#token("64","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(148) lemma() org.kframework.attributes.Location(Location(148,8,148,39)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))=>#token("32","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(147) lemma() org.kframework.attributes.Location(Location(147,8,147,39)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(`undefMInt16_ARMV8-MINT-SYNTAX`(.KList))=>#token("16","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(146) lemma() org.kframework.attributes.Location(Location(146,8,146,39)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule addListMInt(#SemanticCastToInt(W),mintlist(#SemanticCastToMInt(MI1),mintlist(#SemanticCastToMInt(MI2),#SemanticCastToMInts(Rest))))=>addMInt(addMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),addListMInt(#SemanticCastToInt(W),#SemanticCastToMInts(Rest))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(218) org.kframework.attributes.Location(Location(218,8,219,53)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule addListMInt(#SemanticCastToInt(W),mintlist(#SemanticCastToMInt(MI),`.List{"mintlist"}`(.KList)))=>#SemanticCastToMInt(MI) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(220) org.kframework.attributes.Location(Location(220,8,220,48)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule addListMInt(#SemanticCastToInt(W),`.List{"mintlist"}`(.KList))=>mi(#SemanticCastToInt(W),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(221) org.kframework.attributes.Location(Location(221,8,221,45)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `zeroMIntW64_ARMV8-MINT-SYNTAX`(.KList)=>mi(#token("64","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(135) macro() org.kframework.attributes.Location(Location(135,8,135,34)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `zeroMIntW256_ARMV8-MINT-SYNTAX`(.KList)=>mi(#token("256","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(136) macro() org.kframework.attributes.Location(Location(136,8,136,34)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `zeroMIntW1_ARMV8-MINT-SYNTAX`(.KList)=>mi(#token("1","Int"),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(134) macro() org.kframework.attributes.Location(Location(134,8,134,34)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `oneMIntW64_ARMV8-MINT-SYNTAX`(.KList)=>mi(#token("64","Int"),#token("1","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(138) macro() org.kframework.attributes.Location(Location(138,8,138,34)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `oneMIntW1_ARMV8-MINT-SYNTAX`(.KList)=>mi(#token("1","Int"),#token("1","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(137) macro() org.kframework.attributes.Location(Location(137,8,137,34)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `ifMInts_then_else__ARMV8-MINT-SYNTAX`(#SemanticCastToBool(B),#SemanticCastToMInts(_),#SemanticCastToMInts(M))=>#SemanticCastToMInts(M) requires `notBool_`(#SemanticCastToBool(B)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(166) org.kframework.attributes.Location(Location(166,8,166,55)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `ifMInts_then_else__ARMV8-MINT-SYNTAX`(#SemanticCastToBool(B),#SemanticCastToMInts(M),#SemanticCastToMInts(_))=>#SemanticCastToMInts(M) requires #SemanticCastToBool(B) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(165) org.kframework.attributes.Location(Location(165,8,165,47)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `ifMInt_then_else__ARMV8-MINT-SYNTAX`(#SemanticCastToBool(B),#SemanticCastToMInt(_),#SemanticCastToMInt(M))=>#SemanticCastToMInt(M) requires `notBool_`(#SemanticCastToBool(B)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(160) org.kframework.attributes.Location(Location(160,8,160,54)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `ifMInt_then_else__ARMV8-MINT-SYNTAX`(#SemanticCastToBool(B),#SemanticCastToMInt(M),#SemanticCastToMInt(_))=>#SemanticCastToMInt(M) requires #SemanticCastToBool(B) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(159) org.kframework.attributes.Location(Location(159,8,159,46)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `ifInt_then_else__ARMV8-MINT-SYNTAX`(#SemanticCastToBool(B),#SemanticCastToInt(_),#SemanticCastToInt(M))=>#SemanticCastToInt(M) requires `notBool_`(#SemanticCastToBool(B)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(162) org.kframework.attributes.Location(Location(162,8,162,53)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `ifInt_then_else__ARMV8-MINT-SYNTAX`(#SemanticCastToBool(B),#SemanticCastToInt(M),#SemanticCastToInt(_))=>#SemanticCastToInt(M) requires #SemanticCastToBool(B) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(161) org.kframework.attributes.Location(Location(161,8,161,45)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `ifBool_then_else__ARMV8-MINT-SYNTAX`(#SemanticCastToBool(B),#SemanticCastToBool(_),#SemanticCastToBool(M))=>#SemanticCastToBool(M) requires `notBool_`(#SemanticCastToBool(B)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(164) org.kframework.attributes.Location(Location(164,8,164,54)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `ifBool_then_else__ARMV8-MINT-SYNTAX`(#SemanticCastToBool(B),#SemanticCastToBool(M),#SemanticCastToBool(_))=>#SemanticCastToBool(M) requires #SemanticCastToBool(B) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(163) org.kframework.attributes.Location(Location(163,8,163,46)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `IsUndef`(#SemanticCastToMInt(MI))=>#token("true","Bool") requires `_orBool_`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToMInt(MI),`undefMInt16_ARMV8-MINT-SYNTAX`(.KList)),`_==K_`(#SemanticCastToMInt(MI),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_==K_`(#SemanticCastToMInt(MI),`undefMInt8_ARMV8-MINT-SYNTAX`(.KList))),`_==K_`(#SemanticCastToMInt(MI),`undefMInt64_ARMV8-MINT-SYNTAX`(.KList))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(346) org.kframework.attributes.Location(Location(346,8,349,32)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `IsUndef`(#SemanticCastToMInt(MI))=>#token("false","Bool") requires `notBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_==K_`(#SemanticCastToMInt(MI),`undefMInt16_ARMV8-MINT-SYNTAX`(.KList)),`_==K_`(#SemanticCastToMInt(MI),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_==K_`(#SemanticCastToMInt(MI),`undefMInt8_ARMV8-MINT-SYNTAX`(.KList))),`_==K_`(#SemanticCastToMInt(MI),`undefMInt64_ARMV8-MINT-SYNTAX`(.KList)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(350) org.kframework.attributes.Location(Location(350,8,353,34)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  ModuleComment( truncate(MI, To) Truncates a mi(From,V1) to mi(To,V2)
    Todo : type check
  ,[org.kframework.attributes.Location(Location(258,3,260,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment( extractMask(MI, W, S) Extracts the lower W bits
    from MInt starting from lower significant bit position S.

    Ex: extractMask(MI, 16, 8):
        MI:64' 0x 00 ff 00 ff 00 ff 00 ff
        Output:                  <--->
          MI:16' 0x                 ff 00

    extractMask(MI, 4, 1)
      6 5 4 3 2 1 0
      * * * * * * *
          ------^

    extractMask(MI, NUM, P) <==> extractMInt(MI, S , S + NUM)
      where S = bitwidthMInt(MI) - (P + NUM)

    Example, extractMInt(MI, 2, 6) // Bits in range [2..6)

      0 1 2 3 4 5 6
      * * * * * * *
          ^-------^
  ,[org.kframework.attributes.Location(Location(232,3,253,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    zeroExtend(MI, N): Zero extend MInt MI to a MInt of
      N bitwidth.
  rule zeroExtend(MI:MInt, N:Int) => mi(N, uvalueMInt(MI))
    requires N >=Int bitwidthMInt(MI)
  ,[org.kframework.attributes.Location(Location(265,3,270,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    signExtend(MI, N): Sign extend MInt MI to a MInt of
      N bitwidth.
  ,[org.kframework.attributes.Location(Location(312,3,315,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    popCount(MI, N): Count the number of set bits, V, in MI and
    create a MINt(N, V)
  ,[org.kframework.attributes.Location(Location(322,3,325,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    plugInMask(MITarget, MISrc, P):
      Let MITarget == mi(WT, VT)
      Let MISrc == mi(WS, VS)
      plugInMask updates the lower WS bits of VT starting at
      lower significant bit position P with VS.

      Ex: plugInMask(MIT,MIS, 8):
        MIT:64' 0x 00 ff 00 ff 00 ff 00 ff
        MIS:16' 0x                   55 44
        Output:
            64' 0x 00 ff 00 ff 00 55 44 ff
  ,[org.kframework.attributes.Location(Location(277,3,289,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    getSignBit(MI): return mi(1, signBit of MI)
  rule getSignBit(MI:MInt) =>
    fromBoolToMInt( toBool(
        andMInt(MI,
            mi(bitwidthMInt(MI), sminMInt(bitwidthMInt(MI)))
        )
      ), 1)
  ,[org.kframework.attributes.Location(Location(335,3,343,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    The bitwodth of undef is defined as 8 bits.
    Used while allocating the undef stack memory,
  ,[org.kframework.attributes.Location(Location(141,3,144,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    If Else Then for Sorts
  ,[org.kframework.attributes.Location(Location(156,3,158,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    Get Ascii value of a char.
  ,[org.kframework.attributes.Location(Location(150,3,152,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    Covert Single Precision Float to Double preceson Float.
  ,[org.kframework.attributes.Location(Location(204,3,206,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    Covert MInts to Floats(or BigFloats).
  ,[org.kframework.attributes.Location(Location(174,3,176,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    Covert Ints to MInts.
  ,[org.kframework.attributes.Location(Location(198,3,200,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    Covert Ints to Floats(or BigFloats).
  ,[org.kframework.attributes.Location(Location(180,3,182,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    Covert Floats to MInts.
  ,[org.kframework.attributes.Location(Location(192,3,194,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    Covert Floats to Ints.
  ,[org.kframework.attributes.Location(Location(186,3,188,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    Convert MInts to Signed Ints.
  ,[org.kframework.attributes.Location(Location(168,3,170,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    Conversion from/to MInt and Bool
  ,[org.kframework.attributes.Location(Location(223,3,225,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    Bitwise negation
  ,[org.kframework.attributes.Location(Location(210,3,212,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    Adding MInt List.
  ,[org.kframework.attributes.Location(Location(215,3,217,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
endmodule


module ARMV8-MINT$SYNTAX [org.kframework.attributes.Location(Location(131,1,354,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))]
  imports ARMV8-MINT-SYNTAX$SYNTAX
  syntax Int ::= "charAt" "(" String "," Int ")" [function() klabel(charAt)]
endmodule


module ARMV8-MINT-SORTS [org.kframework.attributes.Location(Location(3,1,7,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))]
  imports ARMV8-MINT-SORTS$SYNTAX
endmodule


module ARMV8-MINT-SORTS$SYNTAX [org.kframework.attributes.Location(Location(3,1,7,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))]
  syntax MInts [org.kframework.attributes.Location(Location(4,3,4,14)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))]
  syntax Ints [org.kframework.attributes.Location(Location(6,3,6,13)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))]
  syntax Floats [org.kframework.attributes.Location(Location(5,3,5,15)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))]
endmodule


module ARMV8-MINT-SYNTAX [org.kframework.attributes.Location(Location(9,1,129,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))]
  imports STRING
  imports MINT
  imports MAP
  imports INT
  imports FLOAT
  imports ARMV8-MINT-SYNTAX$SYNTAX
  imports ARMV8-MINT-SORTS
  imports ARMV8-CONVERSIONS
  ModuleComment( truncate(MI, To) Truncates a mi(From,V1) to mi(To,V2)
    Todo : type check
  ,[org.kframework.attributes.Location(Location(85,3,87,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment( extractMask(MI, W, S) Extracts the lower W bits
    from MInt starting from lower significant bit position S.

    Ex: extractMask(MI, 16, 8):
        MI:64' 0x 00 ff 00 ff 00 ff 00 ff
        Output:                  <--->
          MI:16' 0x                 ff 00
    Todo :check for MI wodth < W
  ,[org.kframework.attributes.Location(Location(74,3,82,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment( Covert Single Precision Float to Double preceson Float.,[org.kframework.attributes.Location(Location(61,3,61,61)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment( Covert Ints to MInts.,[org.kframework.attributes.Location(Location(58,3,58,27)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment( Covert Floats to MInts.,[org.kframework.attributes.Location(Location(55,3,55,29)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment( Convert MInts to Signed Ints,[org.kframework.attributes.Location(Location(43,3,43,34)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment( Convert MInts to Floats,[org.kframework.attributes.Location(Location(46,3,46,29)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment( Convert Ints to Floats,[org.kframework.attributes.Location(Location(49,3,49,28)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment( Convert Floats to Ints,[org.kframework.attributes.Location(Location(52,3,52,28)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment( Conversion from/to MInt and Bool,[org.kframework.attributes.Location(Location(70,3,70,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment( Bitwise negation,[org.kframework.attributes.Location(Location(64,3,64,22)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment( Adding MInt List.,[org.kframework.attributes.Location(Location(67,3,67,23)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    zeroExtend(MI, N): Zero extend MInt MI to a MInt of
      N bitwidth.
  ,[org.kframework.attributes.Location(Location(90,3,93,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    signExtend(MI, N): Sign extend MInt MI to a MInt of
      N bitwidth.
  ,[org.kframework.attributes.Location(Location(111,3,114,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    popCount(MI, N): Count the number of set bits, V, in MI and
    create a MInt(N, V)
  ,[org.kframework.attributes.Location(Location(117,3,120,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    plugInMask(MITarget, MISrc, S):
      Let MITarget == mi(WT, VT)
      Let MISrc == mi(WS, VS)
      plugInMask updates the lower WS bits of VT starting at
      lower significant bit position S with VS.

      Ex: plugInMask(MIT,MIS, 8):
        MIT:64' 0x 00 ff 00 ff 00 ff 00 ff
        MIS:16' 0x                   55 44
        Output:
            64' 0x 00 ff 00 ff 00 55 44 ff
  ,[org.kframework.attributes.Location(Location(96,3,108,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
  ModuleComment(
    getSignBit(MI): return mi(1, signBit of MI)
  ,[org.kframework.attributes.Location(Location(124,3,126,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))])
endmodule


module ARMV8-MINT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(9,1,129,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-mint.k))]
  imports STRING$SYNTAX
  imports MINT$SYNTAX
  imports MAP$SYNTAX
  imports INT$SYNTAX
  imports FLOAT$SYNTAX
  imports ARMV8-MINT-SORTS$SYNTAX
  imports ARMV8-CONVERSIONS$SYNTAX
  syntax MInts ::= MInt "" MInts [klabel(mintlist) right() userList(*)]
  syntax MInts ::= "ifMInts" Bool "then" MInts "else" MInts [function() smtlib(ite)]
  syntax MInts ::= "convertIntsToMInts" "(" Ints "," Int ")" [function() klabel(convertIntsToMInts)]
  syntax MInts ::= "convertFpsToMInts" "(" Floats "," Int ")" [function() klabel(convertFpsToMInts)]
  syntax MInts ::= ".MInts" [klabel(.List{"mintlist"}) userList(*)]
  syntax MInt ::= "zeroMIntW64"
  syntax MInt ::= "zeroMIntW256"
  syntax MInt ::= "zeroMIntW1"
  syntax MInt ::= "zeroExtend" "(" MInt "," Int ")" [function() klabel(zeroExtend)]
  syntax MInt ::= "undefMInt8"
  syntax MInt ::= "undefMInt64"
  syntax MInt ::= "undefMInt32"
  syntax MInt ::= "undefMInt16"
  syntax MInt ::= "undefMInt"
  syntax MInt ::= "truncate" "(" MInt "," Int ")" [function() klabel(truncate)]
  syntax MInt ::= "signExtend" "(" MInt "," Int ")" [function() klabel(signExtend)]
  syntax MInt ::= "plugInMask" "(" MInt "," MInt "," Int ")" [function() klabel(plugInMask)]
  syntax MInt ::= "oneMIntW64"
  syntax MInt ::= "oneMIntW1"
  syntax MInt ::= "negateMInt" "(" MInt ")" [function() klabel(negateMInt)]
  syntax MInt ::= "ifMInt" Bool "then" MInt "else" MInt [function() smtlib(ite)]
  syntax MInt ::= "getSignBit" "(" MInt ")" [function() klabel(getSignBit)]
  syntax MInt ::= "fromBoolToMInt" "(" Bool "," Int ")" [function() klabel(fromBoolToMInt)]
  syntax MInt ::= "extractMask" "(" MInt "," Int "," Int ")" [function() klabel(extractMask)]
  syntax MInt ::= "divideError"
  syntax MInt ::= "addListMInt" "(" Int "," MInts ")" [function() klabel(addListMInt)]
  syntax Ints ::= Int "" Ints [klabel(intlist) right() userList(*)]
  syntax Ints ::= "convertMIntsToSInts" "(" MInts ")" [function() klabel(convertMIntsToSInts)]
  syntax Ints ::= "convertFpsToInts" "(" Floats ")" [function() klabel(convertFpsToInts)]
  syntax Ints ::= ".Ints" [klabel(.List{"intlist"}) userList(*)]
  syntax Int ::= "popCount" "(" MInt ")" [function() klabel(popCount)]
  syntax Int ::= "ifInt" Bool "then" Int "else" Int [function() smtlib(ite)]
  syntax Int ::= "countOnes" "(" MInt "," Int ")" [function() klabel(countOnes)]
  syntax Floats ::= Float "" Floats [klabel(floatlist) right() userList(*)]
  syntax Floats ::= "convertMIntsToFps" "(" MInts "," Int "," Int ")" [function() klabel(convertMIntsToFps)]
  syntax Floats ::= "convertIntsToFps" "(" Ints "," Int "," Int ")" [function() klabel(convertIntsToFps)]
  syntax Floats ::= "convertFloatsToDoubles" "(" Floats ")" [function() klabel(convertFloatsToDoubles)]
  syntax Floats ::= ".Floats" [klabel(.List{"floatlist"}) userList(*)]
  syntax Bool ::= "undefBool"
  syntax Bool ::= "toBool" "(" MInt ")" [function() klabel(toBool)]
  syntax Bool ::= "ifBool" Bool "then" Bool "else" Bool [function() smtlib(ite)]
  syntax Bool ::= "IsUndef" "(" MInt ")" [function() klabel(IsUndef)]
endmodule


module ARMV8-SEMANTICS [org.kframework.attributes.Location(Location(39,1,78,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/./armv8-semantics.k))]
  imports VMOV
  imports VMLAV
  imports VMINV
  imports VMINNMV
  imports VMINNMAV
  imports VMINNMA
  imports VMINNM
  imports VMINAV
  imports VMINA
  imports VMIN
  imports VMAXV
  imports VMAXNMV
  imports VMAXNMAV
  imports VMAXNMA
  imports VMAXNM
  imports VMAXAV
  imports VMAXA
  imports VMAX
  imports UINT
  imports STO
  imports SST
  imports SINT
  imports MOV
  imports MAX-FOR-TEST
  imports MAA
  imports EXT
  imports EXIT
  imports DTC
  imports CONCA
  imports CMP
  imports ARMV8-VERIFICATION
  imports ARMV8-SEMANTICS$SYNTAX
  imports ARMV8-MINT
  imports ARMV8-LOADER
  imports ARMV8-ABSTRACT-SEMANTIC
  imports ADD-FOR-TEST
  ModuleComment(add for check,[org.kframework.attributes.Location(Location(67,3,67,18)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/./armv8-semantics.k))])
endmodule


module ARMV8-SEMANTICS$SYNTAX [org.kframework.attributes.Location(Location(39,1,78,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/./armv8-semantics.k))]
  imports VMOV$SYNTAX
  imports VMLAV$SYNTAX
  imports VMINV$SYNTAX
  imports VMINNMV$SYNTAX
  imports VMINNMAV$SYNTAX
  imports VMINNMA$SYNTAX
  imports VMINNM$SYNTAX
  imports VMINAV$SYNTAX
  imports VMINA$SYNTAX
  imports VMIN$SYNTAX
  imports VMAXV$SYNTAX
  imports VMAXNMV$SYNTAX
  imports VMAXNMAV$SYNTAX
  imports VMAXNMA$SYNTAX
  imports VMAXNM$SYNTAX
  imports VMAXAV$SYNTAX
  imports VMAXA$SYNTAX
  imports VMAX$SYNTAX
  imports UINT$SYNTAX
  imports STO$SYNTAX
  imports SST$SYNTAX
  imports SINT$SYNTAX
  imports MOV$SYNTAX
  imports MAX-FOR-TEST$SYNTAX
  imports MAA$SYNTAX
  imports EXT$SYNTAX
  imports EXIT$SYNTAX
  imports DTC$SYNTAX
  imports CONCA$SYNTAX
  imports CMP$SYNTAX
  imports ARMV8-VERIFICATION$SYNTAX
  imports ARMV8-MINT$SYNTAX
  imports ARMV8-LOADER$SYNTAX
  imports ARMV8-ABSTRACT-SEMANTIC$SYNTAX
  imports ADD-FOR-TEST$SYNTAX
endmodule


module ARMV8-SYNTAX [org.kframework.attributes.Location(Location(27,1,225,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  imports STRING
  imports MINT
  imports INT
  imports ID
  imports FLOAT
  imports BOOL
  imports ARMV8-SYNTAX-SORTS
  imports ARMV8-SYNTAX$SYNTAX
  ModuleComment(syntax Q128 ::= Lane,[org.kframework.attributes.Location(Location(123,3,123,25)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment(syntax Lane ::= Q128 "[" Idx "]",[org.kframework.attributes.Location(Location(122,3,122,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment(for test,[org.kframework.attributes.Location(Location(64,49,64,59)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment( vector,[org.kframework.attributes.Location(Location(112,33,112,42)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment( r0-r12 general,[org.kframework.attributes.Location(Location(107,33,107,50)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment( for store to vector lane.,[org.kframework.attributes.Location(Location(193,3,193,31)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment( add for check,[org.kframework.attributes.Location(Location(212,3,212,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment( VMLAVA is VMLAV{A} format,[org.kframework.attributes.Location(Location(58,19,58,47)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment( SP,[org.kframework.attributes.Location(Location(108,33,108,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment( PC,[org.kframework.attributes.Location(Location(110,33,110,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment( LR,[org.kframework.attributes.Location(Location(109,33,109,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment( <dt>,[org.kframework.attributes.Location(Location(181,3,181,10)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment(
    Captures the Assembly syntax instructions of ARMv8.1-M, 
    example: VMAX<v>.<dt> Qd, Qn, Qm
    <v> dose not affect the encode
  ,[org.kframework.attributes.Location(Location(36,3,40,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
endmodule


module ARMV8-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(27,1,225,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  imports STRING$SYNTAX
  imports MINT$SYNTAX
  imports INT$SYNTAX
  imports ID$SYNTAX
  imports FLOAT$SYNTAX
  imports BOOL$SYNTAX
  imports ARMV8-SYNTAX-SORTS$SYNTAX
  syntax VirtualReg ::= "result64"
  syntax VirtualReg ::= "result"
  syntax String ::= Label
  syntax StepCommand ::= "uint" [token()]
  syntax StepCommand ::= "sto" [token()]
  syntax StepCommand ::= "sst" [token()]
  syntax StepCommand ::= "sint" [token()]
  syntax StepCommand ::= "maa" [token()]
  syntax StepCommand ::= "ext" [token()]
  syntax StepCommand ::= "dtc" [token()]
  syntax StepCommand ::= "conca" [token()]
  syntax StepCommand ::= "cmp" [token()]
  syntax Start ::= "start" [token()]
  syntax S32 ::= "s9"
  syntax S32 ::= "s8"
  syntax S32 ::= "s7"
  syntax S32 ::= "s6"
  syntax S32 ::= "s5"
  syntax S32 ::= "s4"
  syntax S32 ::= "s31"
  syntax S32 ::= "s30"
  syntax S32 ::= "s3"
  syntax S32 ::= "s29"
  syntax S32 ::= "s28"
  syntax S32 ::= "s27"
  syntax S32 ::= "s26"
  syntax S32 ::= "s25"
  syntax S32 ::= "s24"
  syntax S32 ::= "s23"
  syntax S32 ::= "s22"
  syntax S32 ::= "s21"
  syntax S32 ::= "s20"
  syntax S32 ::= "s2"
  syntax S32 ::= "s19"
  syntax S32 ::= "s18"
  syntax S32 ::= "s17"
  syntax S32 ::= "s16"
  syntax S32 ::= "s15"
  syntax S32 ::= "s14"
  syntax S32 ::= "s13"
  syntax S32 ::= "s12"
  syntax S32 ::= "s11"
  syntax S32 ::= "s10"
  syntax S32 ::= "s1"
  syntax S32 ::= "s0"
  syntax Register ::= VirtualReg
  syntax Register ::= S32
  syntax Register ::= R32
  syntax Register ::= Q128
  syntax Register ::= MRegs
  syntax Register ::= D64
  syntax R32 ::= "r9"
  syntax R32 ::= "r8"
  syntax R32 ::= "r7"
  syntax R32 ::= "r6"
  syntax R32 ::= "r5"
  syntax R32 ::= "r4"
  syntax R32 ::= "r3"
  syntax R32 ::= "r2"
  syntax R32 ::= "r15"
  syntax R32 ::= "r14"
  syntax R32 ::= "r13"
  syntax R32 ::= "r12"
  syntax R32 ::= "r11"
  syntax R32 ::= "r10"
  syntax R32 ::= "r1"
  syntax R32 ::= "r0"
  syntax Q128 ::= Q128 "[" Idx "]"
  syntax Q128 ::= "q7"
  syntax Q128 ::= "q6"
  syntax Q128 ::= "q5"
  syntax Q128 ::= "q4"
  syntax Q128 ::= "q3"
  syntax Q128 ::= "q2"
  syntax Q128 ::= "q1"
  syntax Q128 ::= "q0"
  syntax Operands ::= Operand "," Operands [right() userList(*)]
  syntax Operands ::= ".Operands" [klabel(.List{"_,__ARMV8-SYNTAX"}) userList(*)]
  syntax Operand ::= Register
  syntax Operand ::= Imm
  syntax Opcode ::= StepCommand
  syntax Opcode ::= "end"
  syntax Opcode ::= "VMOV" [token()]
  syntax Opcode ::= "VMLAVA" [token()]
  syntax Opcode ::= "VMLAV" [token()]
  syntax Opcode ::= "VMINV" [token()]
  syntax Opcode ::= "VMINNMV" [token()]
  syntax Opcode ::= "VMINNMAV" [token()]
  syntax Opcode ::= "VMINNMA" [token()]
  syntax Opcode ::= "VMINNM" [token()]
  syntax Opcode ::= "VMINAV" [token()]
  syntax Opcode ::= "VMINA" [token()]
  syntax Opcode ::= "VMIN" [token()]
  syntax Opcode ::= "VMAXV" [token()]
  syntax Opcode ::= "VMAXNMV" [token()]
  syntax Opcode ::= "VMAXNMAV" [token()]
  syntax Opcode ::= "VMAXNMA" [token()]
  syntax Opcode ::= "VMAXNM" [token()]
  syntax Opcode ::= "VMAXAV" [token()]
  syntax Opcode ::= "VMAXA" [token()]
  syntax Opcode ::= "VMAX" [token()]
  syntax Opcode ::= "MOV" [token()]
  syntax Opcode ::= "MAX" [token()]
  syntax Opcode ::= "ADD" [token()]
  syntax NLabel ::= "$" Int
  syntax MRegs ::= "vpr"
  syntax MRegs ::= "nsacr"
  syntax MRegs ::= "mvfr1"
  syntax MRegs ::= "fpscr"
  syntax MRegs ::= "fpccr_s"
  syntax MRegs ::= "fpccr_ns"
  syntax MRegs ::= "fpccr"
  syntax MRegs ::= "epsr"
  syntax MRegs ::= "cppwr_s"
  syntax MRegs ::= "cppwr_ns"
  syntax MRegs ::= "cppwr"
  syntax MRegs ::= "cpacr_s"
  syntax MRegs ::= "cpacr_ns"
  syntax MRegs ::= "cpacr"
  syntax MRegs ::= "control_s"
  syntax MRegs ::= "control_ns"
  syntax MRegs ::= "control"
  syntax Label ::= "U8"
  syntax Label ::= "U32"
  syntax Label ::= "U16"
  syntax Label ::= "S8"
  syntax Label ::= "S32"
  syntax Label ::= "S16"
  syntax Label ::= "F64"
  syntax Label ::= "F32"
  syntax Label ::= "F16"
  syntax Instructions ::= Instruction "" Instructions [klabel(instructionlist) right() userList(*)]
  syntax Instructions ::= ".Instructions" [klabel(.List{"instructionlist"}) userList(*)]
  syntax Instruction ::= Opcode Operands
  syntax Instruction ::= Opcode "." NLabel Operands
  syntax Instruction ::= Opcode "." Label Operands
  syntax Instruction ::= Beginp
  syntax Imm ::= HexInt
  syntax Imm ::= "#" Int
  syntax Idx ::= Int
  syntax HexInt ::= r"#0x[0-9a-fA-F]+" [token()]
  syntax D64 ::= "d9"
  syntax D64 ::= "d8"
  syntax D64 ::= "d7"
  syntax D64 ::= "d6"
  syntax D64 ::= "d5"
  syntax D64 ::= "d4"
  syntax D64 ::= "d3"
  syntax D64 ::= "d2"
  syntax D64 ::= "d15"
  syntax D64 ::= "d14"
  syntax D64 ::= "d13"
  syntax D64 ::= "d12"
  syntax D64 ::= "d11"
  syntax D64 ::= "d10"
  syntax D64 ::= "d1"
  syntax D64 ::= "d0"
  syntax Beginp ::= Start ":"
endmodule


module ARMV8-SYNTAX-SORTS [org.kframework.attributes.Location(Location(5,1,25,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  imports ARMV8-SYNTAX-SORTS$SYNTAX
  ModuleComment(syntax Lane,[org.kframework.attributes.Location(Location(23,3,23,16)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
  ModuleComment( sorts of armv8.1-m,[org.kframework.attributes.Location(Location(5,33,5,54)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))])
endmodule


module ARMV8-SYNTAX-SORTS$SYNTAX [org.kframework.attributes.Location(Location(5,1,25,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax StepCommand [org.kframework.attributes.Location(Location(22,3,22,20)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Start [org.kframework.attributes.Location(Location(20,3,20,14)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax S32 [org.kframework.attributes.Location(Location(12,3,12,12)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Register [org.kframework.attributes.Location(Location(8,3,8,17)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax R32 [org.kframework.attributes.Location(Location(10,3,10,12)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Q128 [org.kframework.attributes.Location(Location(11,3,11,13)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Operands [org.kframework.attributes.Location(Location(16,3,16,17)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Operand [org.kframework.attributes.Location(Location(15,3,15,16)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Opcode [org.kframework.attributes.Location(Location(6,3,6,15)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax MRegs [org.kframework.attributes.Location(Location(9,3,9,14)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Label [org.kframework.attributes.Location(Location(14,3,14,14)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Instructions [org.kframework.attributes.Location(Location(18,3,18,21)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Instruction [org.kframework.attributes.Location(Location(17,3,17,20)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Imm [org.kframework.attributes.Location(Location(7,3,7,12)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Idx [org.kframework.attributes.Location(Location(24,3,24,12)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax D64 [org.kframework.attributes.Location(Location(13,3,13,12)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Builtin [org.kframework.attributes.Location(Location(19,3,19,16)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
  syntax Beginp [org.kframework.attributes.Location(Location(21,3,21,15)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-syntax.k))]
endmodule


module ARMV8-VERIFICATION [org.kframework.attributes.Location(Location(382,1,384,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))]
  imports MINT-LEMMAS
  imports ARMV8-VERIFICATION$SYNTAX
endmodule


module ARMV8-VERIFICATION$SYNTAX [org.kframework.attributes.Location(Location(382,1,384,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))]
  imports MINT-LEMMAS$SYNTAX
endmodule


module ARRAY$SYNTAX [org.kframework.attributes.Location(Location(86,1,90,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports ARRAY-SYMBOLIC$SYNTAX
endmodule


module ARRAY-IN-K$SYNTAX [org.kframework.attributes.Location(Location(58,1,84,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports LIST$SYNTAX
  imports K-EQUAL$SYNTAX
  imports INT$SYNTAX
  imports ARRAY-SYNTAX$SYNTAX
  syntax List ::= "ensureOffsetList" "(" List "," Int "," KItem ")" [function() klabel(ensureOffsetList)]
  syntax Array ::= "makeArray" "(" Int "," KItem ")" [function() hook(ARRAY.make) klabel(makeArray)]
  syntax Array ::= "arr" "(" List "," Int "," KItem ")" [klabel(arr)]
endmodule


module ARRAY-SYMBOLIC$SYNTAX [org.kframework.attributes.Location(Location(50,1,52,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) symbolic()]
  imports ARRAY-IN-K$SYNTAX
endmodule


module ARRAY-SYNTAX [org.kframework.attributes.Location(Location(24,1,38,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports LIST
  imports ARRAY-SYNTAX$SYNTAX
  ModuleComment( Sets a range of indices (given by an index into the array and the number
   of indices to set) to the same value. ,[org.kframework.attributes.Location(Location(33,3,34,43)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module ARRAY-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(24,1,38,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports LIST$SYNTAX
  syntax KItem ::= Array "[" Int "]" [function() hook(ARRAY.lookup)]
  syntax Bool ::= Int "in_keys" "(" Array ")" [function() functional() hook(ARRAY.in_keys)]
  syntax Array [element(_[_<-_]) hook(ARRAY.Array) org.kframework.attributes.Location(Location(27,3,27,69)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) unit(arrayCtor)]
  syntax Array ::= Array "[" Int "<-" KItem "]" [function() hook(ARRAY.update) klabel(_[_<-_]) symbol()]
  syntax Array ::= Array "[" Int "<-" "undef" "]" [function() hook(ARRAY.remove)]
  syntax Array ::= "updateArray" "(" Array "," Int "," List ")" [function() hook(ARRAY.updateAll) klabel(updateArray)]
  syntax Array ::= "fillArray" "(" Array "," Int "," Int "," KItem ")" [function() hook(ARRAY.fill) klabel(fillArray)]
endmodule


module AUTO-CASTS [org.kframework.attributes.Location(Location(180,1,188,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports AUTO-CASTS$SYNTAX
  ModuleComment( this is part of the mechanism that allows concrete user syntax in K,[org.kframework.attributes.Location(Location(187,3,187,73)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( if this module is imported, the parser automatically,[org.kframework.attributes.Location(Location(181,3,181,58)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( generates, for all sorts, productions of the form:,[org.kframework.attributes.Location(Location(182,3,182,56)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( Sort  ::= Sort ":Sort",[org.kframework.attributes.Location(Location(184,3,184,28)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( Sort  ::= Sort "::Sort",[org.kframework.attributes.Location(Location(183,3,183,29)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( Sort  ::= K    ":>Sort",[org.kframework.attributes.Location(Location(186,3,186,29)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( KBott ::= Sort "<:Sort",[org.kframework.attributes.Location(Location(185,3,185,29)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
endmodule


module AUTO-CASTS$SYNTAX [org.kframework.attributes.Location(Location(180,1,188,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
endmodule


module AUTO-FOLLOW [org.kframework.attributes.Location(Location(190,1,201,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports AUTO-FOLLOW$SYNTAX
  ModuleComment( syntax K ::= K K,[org.kframework.attributes.Location(Location(197,3,197,22)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( syntax K ::= "b",[org.kframework.attributes.Location(Location(195,3,195,22)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( syntax K ::= "ab",[org.kframework.attributes.Location(Location(196,3,196,23)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( syntax K ::= "a",[org.kframework.attributes.Location(Location(194,3,194,22)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( of another terminal. This is useful to prevent ambiguities such as:,[org.kframework.attributes.Location(Location(193,3,193,73)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( if this module is imported, the parser automatically,[org.kframework.attributes.Location(Location(191,3,191,58)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( generates a follow restriction for every terminal which is a prefix,[org.kframework.attributes.Location(Location(192,3,192,73)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( because it would turn the terminal into the terminal "ab".,[org.kframework.attributes.Location(Location(200,3,200,64)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( In the above example, the terminal "a" is not allowed to be followed by a "b",[org.kframework.attributes.Location(Location(199,3,199,83)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( #parse("ab", "K"),[org.kframework.attributes.Location(Location(198,3,198,23)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
endmodule


module AUTO-FOLLOW$SYNTAX [org.kframework.attributes.Location(Location(190,1,201,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
endmodule


module BASIC-K [org.kframework.attributes.Location(Location(8,1,13,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports ML-SYNTAX
  imports BASIC-K$SYNTAX
endmodule


module BASIC-K$SYNTAX [org.kframework.attributes.Location(Location(8,1,13,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports ML-SYNTAX$SYNTAX
  syntax KItem [hook(K.KItem) org.kframework.attributes.Location(Location(10,3,10,30)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  syntax KConfigVar [org.kframework.attributes.Location(Location(12,3,12,27)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k)) token()]
  syntax K ::= KItem
endmodule


module BOOL [org.kframework.attributes.Location(Location(311,1,359,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports BOOL-SYNTAX
  imports BOOL$SYNTAX
  imports BASIC-K
  rule `notBool_`(#token("true","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(325) org.kframework.attributes.Location(Location(325,8,325,29)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `notBool_`(#token("false","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(326) org.kframework.attributes.Location(Location(326,8,326,29)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_xorBool_`(#token("false","Bool"),#SemanticCastToBool(B))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(338) org.kframework.attributes.Location(Location(338,8,338,38)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_xorBool_`(#SemanticCastToBool(B),#token("false","Bool"))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(339) org.kframework.attributes.Location(Location(339,8,339,38)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_xorBool_`(#SemanticCastToBool(B),#SemanticCastToBool(B))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(340) org.kframework.attributes.Location(Location(340,8,340,38)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orElseBool_`(#token("true","Bool"),#SemanticCastToBool(_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(347) org.kframework.attributes.Location(Location(347,8,347,33)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orElseBool_`(#token("false","Bool"),#SemanticCastToBool(K))=>#SemanticCastToBool(K) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(349) org.kframework.attributes.Location(Location(349,8,349,37)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orElseBool_`(#SemanticCastToBool(_),#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(348) org.kframework.attributes.Location(Location(348,8,348,33)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orElseBool_`(#SemanticCastToBool(K),#token("false","Bool"))=>#SemanticCastToBool(K) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(350) org.kframework.attributes.Location(Location(350,8,350,37)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orBool_`(#token("true","Bool"),#SemanticCastToBool(_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(342) org.kframework.attributes.Location(Location(342,8,342,34)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orBool_`(#token("false","Bool"),#SemanticCastToBool(B))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(344) org.kframework.attributes.Location(Location(344,8,344,32)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orBool_`(#SemanticCastToBool(_),#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(343) org.kframework.attributes.Location(Location(343,8,343,34)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_orBool_`(#SemanticCastToBool(B),#token("false","Bool"))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(345) org.kframework.attributes.Location(Location(345,8,345,32)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_impliesBool_`(#token("true","Bool"),#SemanticCastToBool(B))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(352) org.kframework.attributes.Location(Location(352,8,352,36)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_impliesBool_`(#token("false","Bool"),#SemanticCastToBool(_))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(353) org.kframework.attributes.Location(Location(353,8,353,40)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_impliesBool_`(#SemanticCastToBool(_),#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(354) org.kframework.attributes.Location(Location(354,8,354,39)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_impliesBool_`(#SemanticCastToBool(B),#token("false","Bool"))=>`notBool_`(#SemanticCastToBool(B)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(355) org.kframework.attributes.Location(Location(355,8,355,45)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andThenBool_`(#token("true","Bool"),#SemanticCastToBool(K))=>#SemanticCastToBool(K) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(333) org.kframework.attributes.Location(Location(333,8,333,37)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andThenBool_`(#token("false","Bool"),#SemanticCastToBool(_))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(335) org.kframework.attributes.Location(Location(335,8,335,36)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andThenBool_`(#SemanticCastToBool(_),#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(336) org.kframework.attributes.Location(Location(336,8,336,36)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andThenBool_`(#SemanticCastToBool(K),#token("true","Bool"))=>#SemanticCastToBool(K) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(334) org.kframework.attributes.Location(Location(334,8,334,37)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andBool_`(#token("true","Bool"),#SemanticCastToBool(B))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(328) org.kframework.attributes.Location(Location(328,8,328,37)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andBool_`(#token("false","Bool"),#SemanticCastToBool(_))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(330) org.kframework.attributes.Location(Location(330,8,330,37)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andBool_`(#SemanticCastToBool(_),#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(331) org.kframework.attributes.Location(Location(331,8,331,37)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_andBool_`(#SemanticCastToBool(B),#token("true","Bool"))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(329) org.kframework.attributes.Location(Location(329,8,329,37)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_=/=Bool_`(#SemanticCastToBool(B1),#SemanticCastToBool(B2))=>`notBool_`(`_==Bool_`(#SemanticCastToBool(B1),#SemanticCastToBool(B2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(357) org.kframework.attributes.Location(Location(357,8,357,57)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module BOOL$SYNTAX [org.kframework.attributes.Location(Location(311,1,359,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports BOOL-SYNTAX$SYNTAX
  imports BASIC-K$SYNTAX
  syntax priority notBool_ > _orElseBool_ _orBool_ _andThenBool_ _impliesBool_ _andBool_ _xorBool_ > _==Bool_ _=/=Bool_
  syntax associativity left _xorBool_
  syntax associativity left _orElseBool_
  syntax associativity left _orBool_
  syntax associativity left _impliesBool_
  syntax associativity left _andThenBool_
  syntax associativity left _andBool_
  syntax associativity left _==Bool_ _=/=Bool_
  syntax associativity left _==Bool_
  syntax associativity left _=/=Bool_
  syntax Bool ::= Bool "xorBool" Bool [boolOperation() function() functional() hook(BOOL.xor) klabel(_xorBool_) left() smt-hook(xor) symbol()]
  syntax Bool ::= Bool "orElseBool" Bool [boolOperation() function() functional() hook(BOOL.orElse) klabel(_orElseBool_) left() smt-hook(or) symbol()]
  syntax Bool ::= Bool "orBool" Bool [boolOperation() function() functional() hook(BOOL.or) klabel(_orBool_) latex({#1}\vee_{\scriptstyle\it Bool}{#2}) left() smt-hook(or)]
  syntax Bool ::= Bool "impliesBool" Bool [boolOperation() function() functional() hook(BOOL.implies) klabel(_impliesBool_) left() smt-hook(=>) symbol()]
  syntax Bool ::= Bool "andThenBool" Bool [boolOperation() function() functional() hook(BOOL.andThen) klabel(_andThenBool_) left() smt-hook(and) symbol()]
  syntax Bool ::= Bool "andBool" Bool [boolOperation() function() functional() hook(BOOL.and) klabel(_andBool_) latex({#1}\wedge_{\scriptstyle\it Bool}{#2}) left() smt-hook(and) symbol()]
  syntax Bool ::= Bool "==Bool" Bool [function() functional() hook(BOOL.eq) klabel(_==Bool_) left() smt-hook(=) symbol()]
  syntax Bool ::= Bool "=/=Bool" Bool [function() functional() hook(BOOL.ne) klabel(_=/=Bool_) left() smt-hook(distinct) symbol()]
  syntax Bool ::= "notBool" Bool [boolOperation() function() functional() hook(BOOL.not) klabel(notBool_) latex(\neg_{\scriptstyle\it Bool}{#1}) smt-hook(not) symbol()]
endmodule


module BOOL-SYNTAX [org.kframework.attributes.Location(Location(305,1,309,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports BOOL-SYNTAX$SYNTAX
endmodule


module BOOL-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(305,1,309,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax Bool [hook(BOOL.Bool) org.kframework.attributes.Location(Location(306,3,306,31)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax Bool ::= "true" [token()]
  syntax Bool ::= "false" [token()]
endmodule


module BUILTIN-ID-TOKENS [org.kframework.attributes.Location(Location(20,1,23,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports BUILTIN-ID-TOKENS$SYNTAX
endmodule


module BUILTIN-ID-TOKENS$SYNTAX [org.kframework.attributes.Location(Location(20,1,23,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  syntax #UpperId ::= r"[A-Z][a-zA-Z0-9]*" [prec(2) token()]
  syntax #LowerId ::= r"[a-z][a-zA-Z0-9]*" [prec(2) token()]
endmodule


module BYTES$SYNTAX [org.kframework.attributes.Location(Location(804,1,818,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports INT$SYNTAX
  imports BYTES-SYMBOLIC$SYNTAX
endmodule


module BYTES-HOOKED$SYNTAX [org.kframework.attributes.Location(Location(680,1,709,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING-SYNTAX$SYNTAX
  syntax associativity right _+Bytes__BYTES-HOOKED
  syntax String ::= "Bytes2String" "(" Bytes ")" [function() functional() hook(BYTES.bytes2string) klabel(Bytes2String)]
  syntax Signedness ::= "Unsigned" [klabel(unsignedBytes) symbol()]
  syntax Signedness ::= "Signed" [klabel(signedBytes) symbol()]
  syntax Int ::= Bytes "[" Int "]" [function() hook(BYTES.get)]
  syntax Int ::= "lengthBytes" "(" Bytes ")" [function() functional() hook(BYTES.length) klabel(lengthBytes) smtlib(lengthBytes)]
  syntax Int ::= "Bytes2Int" "(" Bytes "," Endianness "," Signedness ")" [function() functional() hook(BYTES.bytes2int) klabel(Bytes2Int)]
  syntax Endianness ::= "LE" [klabel(littleEndianBytes) symbol()]
  syntax Endianness ::= "BE" [klabel(bigEndianBytes) symbol()]
  syntax Bytes [hook(BYTES.Bytes) org.kframework.attributes.Location(Location(683,3,683,41)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) token()]
  syntax Bytes ::= Bytes "[" Int "<-" Int "]" [function() hook(BYTES.update)]
  syntax Bytes ::= Bytes "+Bytes" Bytes [function() functional() hook(BYTES.concat) right()]
  syntax Bytes ::= "substrBytes" "(" Bytes "," Int "," Int ")" [function() hook(BYTES.substr) klabel(substrBytes)]
  syntax Bytes ::= "reverseBytes" "(" Bytes ")" [function() functional() hook(BYTES.reverse) klabel(reverseBytes)]
  syntax Bytes ::= "replaceAtBytes" "(" Bytes "," Int "," Bytes ")" [function() hook(BYTES.replaceAt) klabel(replaceAtBytes)]
  syntax Bytes ::= "padRightBytes" "(" Bytes "," Int "," Int ")" [function() hook(BYTES.padRight) klabel(padRightBytes)]
  syntax Bytes ::= "padLeftBytes" "(" Bytes "," Int "," Int ")" [function() hook(BYTES.padLeft) klabel(padLeftBytes)]
  syntax Bytes ::= "String2Bytes" "(" String ")" [function() functional() hook(BYTES.string2bytes) klabel(String2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Int "," Endianness ")" [function() functional() hook(BYTES.int2bytes) klabel(Int2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Endianness "," Signedness ")" [function() functional() klabel(Int2BytesNoLen)]
  syntax Bytes ::= ".Bytes" [function() functional() hook(BYTES.empty)]
endmodule


module BYTES-IN-K$SYNTAX [org.kframework.attributes.Location(Location(711,1,790,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING-BUFFER$SYNTAX
  imports STRING$SYNTAX
  imports K-EQUAL$SYNTAX
  imports INT$SYNTAX
  syntax associativity right _+Bytes__BYTES-IN-K
  syntax String ::= "Bytes2String" "(" Bytes "," StringBuffer ")" [function() klabel(Bytes2StringAux)]
  syntax String ::= "Bytes2String" "(" Bytes ")" [function() functional() klabel(Bytes2String)]
  syntax Signedness ::= "Unsigned" [klabel(unsignedBytes) symbol()]
  syntax Signedness ::= "Signed" [klabel(signedBytes) symbol()]
  syntax Int ::= Bytes "[" Int "]" [function()]
  syntax Int ::= "lengthBytes" "(" Bytes "," Int ")" [function() klabel(lengthBytesAux) smtlib(lengthBytesAux)]
  syntax Int ::= "lengthBytes" "(" Bytes ")" [function() functional() klabel(lengthBytes) smtlib(lengthBytes)]
  syntax Int ::= "Bytes2Int" "(" Bytes "," Endianness "," Signedness ")" [function() functional() klabel(Bytes2Int)]
  syntax Endianness ::= "LE" [klabel(littleEndianBytes) symbol()]
  syntax Endianness ::= "BE" [klabel(bigEndianBytes) symbol()]
  syntax Bytes ::= Int ":" Bytes
  syntax Bytes ::= Bytes "[" Int "<-" Int "]" [function()]
  syntax Bytes ::= Bytes "+Bytes" Bytes [function() functional() right()]
  syntax Bytes ::= "substrBytes" "(" Bytes "," Int "," Int ")" [function() klabel(substrBytes)]
  syntax Bytes ::= "reverseBytes" "(" Bytes "," Bytes ")" [function() klabel(reverseBytesAux)]
  syntax Bytes ::= "reverseBytes" "(" Bytes ")" [function() functional() klabel(reverseBytes)]
  syntax Bytes ::= "replaceAtBytes" "(" Bytes "," Int "," Bytes ")" [function() klabel(replaceAtBytes)]
  syntax Bytes ::= "padRightBytes" "(" Bytes "," Int "," Int ")" [function() klabel(padRightBytes)]
  syntax Bytes ::= "padLeftBytes" "(" Bytes "," Int "," Int ")" [function() klabel(padLeftBytes)]
  syntax Bytes ::= "nilBytes"
  syntax Bytes ::= "String2Bytes" "(" String ")" [function() functional() klabel(String2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Int "," Endianness ")" [function() functional() klabel(Int2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Endianness "," Signedness ")" [function() functional() klabel(Int2BytesNoLen)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Bytes ")" [function() klabel(Int2BytesAux)]
  syntax Bytes ::= ".Bytes" [function() functional()]
endmodule


module BYTES-SYMBOLIC$SYNTAX [kast() org.kframework.attributes.Location(Location(800,1,802,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) symbolic()]
  imports BYTES-IN-K$SYNTAX
endmodule


module CMP [org.kframework.attributes.Location(Location(8,1,175,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k))]
  imports CMP$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("cmp","StepCommand")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I1))),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I2))),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I3))),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I1),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I3),#token("0","Int")),signExtend(`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>Int_`(svalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))),svalueMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap)))),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>Int_`(uvalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))),uvalueMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap)))),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>Int_`(svalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int"))),svalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int"))),uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>Int_`(svalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int"))),svalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int"))),uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))))))),#token("32","Int")),zeroExtend(`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>Int_`(svalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))),svalueMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap)))),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>Int_`(uvalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))),uvalueMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap)))),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>Int_`(svalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int"))),svalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int"))),uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>Int_`(svalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int"))),svalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int"))),uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))))))),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I3),#token("0","Int")),signExtend(`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<Int_`(svalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))),svalueMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap)))),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<Int_`(uvalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))),uvalueMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap)))),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<Int_`(svalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int"))),svalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int"))),uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<Int_`(svalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int"))),svalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int"))),uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))))))),#token("32","Int")),zeroExtend(`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<Int_`(svalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))),svalueMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap)))),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<Int_`(uvalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))),uvalueMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap)))),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I2),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<Int_`(svalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int"))),svalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int"))),uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")),`_*Int_`(`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("2","Int"))),#token("16","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<Int_`(svalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int"))),svalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int"))),uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int"))))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I2),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")),`_*Int_`(`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I2),#token("4","Int"))),#token("8","Int")))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))))))),#token("32","Int")))))),#noDots(.KList))) requires `_andBool_`(`_andBool_`(`_orBool_`(`_==Int_`(#SemanticCastToInt(I1),#token("0","Int")),`_==Int_`(#SemanticCastToInt(I1),#token("1","Int"))),`_orBool_`(`_==Int_`(#SemanticCastToInt(I3),#token("0","Int")),`_==Int_`(#SemanticCastToInt(I3),#token("1","Int")))),`_orBool_`(`_orBool_`(`_andBool_`(`_andBool_`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList))),`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList))),`_>=Int_`(#SemanticCastToInt(I2),#token("0","Int"))),`_<=Int_`(#SemanticCastToInt(I2),#token("3","Int"))),`_andBool_`(`_andBool_`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList))),`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList))),`_>=Int_`(#SemanticCastToInt(I2),#token("0","Int"))),`_<=Int_`(#SemanticCastToInt(I2),#token("7","Int")))),`_andBool_`(`_andBool_`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList))),`_>=Int_`(#SemanticCastToInt(I2),#token("0","Int"))),`_<=Int_`(#SemanticCastToInt(I2),#token("15","Int"))))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(39) org.kframework.attributes.Location(Location(39,8,162,21)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  ModuleComment( TODO: for vertor compare vector,[org.kframework.attributes.Location(Location(164,3,164,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k))])
  ModuleComment( TODO for FP,[org.kframework.attributes.Location(Location(96,39,96,53)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k))])
  ModuleComment( TODO for FP,[org.kframework.attributes.Location(Location(69,39,69,53)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k))])
  ModuleComment( TODO for FP,[org.kframework.attributes.Location(Location(151,39,151,53)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k))])
  ModuleComment( TODO for FP,[org.kframework.attributes.Location(Location(124,39,124,53)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k))])
  ModuleComment(
  rule <k> setDefaultRegs(dtc:StepCommand) => . ... </k>
       <regstate>
         RSMap:Map
       </regstate>
  ,[org.kframework.attributes.Location(Location(11,3,16,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k))])
  ModuleComment(
  rule <k> execinstr(cmp:StepCommand . S:Label Rd:R32, Qd:Q128, (# I:Int):Imm, .Operands) => . 
       ...</k>
       <regstate> RSMap:Map => updateMap(RSMap,
         "RESULT" |-> ifMInt (I ==Int 0) then ( ifMInt (getRegI("V_TEMP1", RSMap) <=Int getRegI("V_TEMP2", RSMap)) then (signExtend( (ifMInt ((S ==K S8) orBool (S ==K U8)) then mi(8, getRegI("V_TEMP2", RSMap)) else (ifMInt ((S ==K S16) orBool (S ==K U16)) then mi(16, getRegI("V_TEMP2", RSMap)) else (ifMInt ((S ==K S32) orBool (S ==K U32)) then (mi(32, getRegI("V_TEMP2", RSMap))) else (undefMInt) ))), 32)) else ( signExtend( (ifMInt ((S ==K S8) orBool (S ==K U8)) then mi(8, getRegI("V_TEMP1", RSMap)) else (ifMInt ((S ==K S16) orBool (S ==K U16)) then mi(16, getRegI("V_TEMP1", RSMap)) else (ifMInt ((S ==K S32) orBool (S ==K U32)) then (mi(32, getRegI("V_TEMP1", RSMap))) else (undefMInt) ))), 32) ) ) else ( ifMInt (getRegI("V_TEMP1", RSMap) <=Int getRegI("V_TEMP2", RSMap)) then (signExtend( (ifMInt ((S ==K S8) orBool (S ==K U8)) then mi(8, getRegI("V_TEMP1", RSMap)) else (ifMInt ((S ==K S16) orBool (S ==K U16)) then mi(16, getRegI("V_TEMP1", RSMap)) else (ifMInt ((S ==K S32) orBool (S ==K U32)) then (mi(32, getRegI("V_TEMP1", RSMap))) else (undefMInt) ))), 32)) else ( signExtend( (ifMInt ((S ==K S8) orBool (S ==K U8)) then mi(8, getRegI("V_TEMP2", RSMap)) else (ifMInt ((S ==K S16) orBool (S ==K U16)) then mi(16, getRegI("V_TEMP2", RSMap)) else (ifMInt ((S ==K S32) orBool (S ==K U32)) then (mi(32, getRegI("V_TEMP2", RSMap))) else (undefMInt) ))), 32) ) )
         
       ) </regstate>
  ,[org.kframework.attributes.Location(Location(23,3,30,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k))])
  ModuleComment(
  rule <k> execinstr(cmp:StepCommand . S:Label Qd:Q128, Qn:Q128, Qm:Q128, (# I1:Int):Imm, (# I2:Int):Imm, (# I3:Int):Imm, .Operands) => .
        ...</k>
      <regstate> RSMap:Map => updateMap(RSMap,

      )

      </regstate>
      ,[org.kframework.attributes.Location(Location(165,3,173,8)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k))])
  ModuleComment(
    for test
    when I equal to 0, cmp gets max one,
    cmp gets min others.
  ,[org.kframework.attributes.Location(Location(18,3,22,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k))])
  ModuleComment(
    for step by step, R is destination register
    I1 for cmp mode, 0 for max, 1 for min
    I2 for the element index of Qd to compare 
    I3 for extend the bitvector mode, 0 for signExtend, 1 for zeroExtend
    decide type of Int or Float by S
   ,[org.kframework.attributes.Location(Location(32,3,38,5)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k))])
endmodule


module CMP$SYNTAX [org.kframework.attributes.Location(Location(8,1,175,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/cmp.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module COLLECTIONS [org.kframework.attributes.Location(Location(295,1,303,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports SET
  imports MAP
  imports LIST
  imports COLLECTIONS$SYNTAX
endmodule


module COLLECTIONS$SYNTAX [org.kframework.attributes.Location(Location(295,1,303,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports SET$SYNTAX
  imports MAP$SYNTAX
  imports LIST$SYNTAX
  syntax Set ::= "List2Set" "(" List ")" [function() functional() hook(SET.list2set) klabel(List2Set)]
  syntax List ::= "Set2List" "(" Set ")" [function() hook(SET.set2list) klabel(Set2List)]
endmodule


module CONCA [org.kframework.attributes.Location(Location(7,1,25,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/conca.k))]
  imports CONCA$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("conca","StepCommand")),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(I1),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(I2),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"TEMP4\"","String"),concatenateMInt(mi(#token("32","Int"),modImm32(#SemanticCastToImm(I1))),mi(#token("32","Int"),modImm32(#SemanticCastToImm(I2)))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(17) org.kframework.attributes.Location(Location(17,8,22,21)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/conca.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment(
  rule <k> setDefaultRegs(conca:StepCommand) => . ... </k>
       <regstate>
         RSMap:Map
       </regstate>
  ,[org.kframework.attributes.Location(Location(10,3,15,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/conca.k))])
endmodule


module CONCA$SYNTAX [org.kframework.attributes.Location(Location(7,1,25,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/conca.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module CONFIG-CELLS [org.kframework.attributes.Location(Location(133,1,147,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports RULE-LISTS
  imports KCELLS
  imports CONFIG-CELLS$SYNTAX
endmodule


module CONFIG-CELLS$SYNTAX [org.kframework.attributes.Location(Location(133,1,147,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports RULE-LISTS$SYNTAX
  imports KCELLS$SYNTAX
  syntax Cell ::= "<" #CellName #CellProperties ">" K "</" #CellName ">" [klabel(#configCell) symbol()]
  syntax Cell ::= "<" #CellName "/>" [klabel(#externalCell) symbol()]
  syntax #CellProperty ::= #CellName "=" KString [klabel(#cellProperty) symbol()]
  syntax #CellProperties ::= #CellProperty #CellProperties [klabel(#cellPropertyList) symbol()]
  syntax #CellProperties ::= "" [klabel(#cellPropertyListTerminator) symbol()]
  syntax #CellName ::= r"[a-zA-Z][a-zA-Z0-9\\-]*" [prec(1) token()]
  syntax #CellName ::= #UpperId [token()]
  syntax #CellName ::= #LowerId [token()]
endmodule


module CONFIGURATION-PRIMITIVES [org.kframework.attributes.Location(Location(1403,1,1405,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports CONFIGURATION-PRIMITIVES$SYNTAX
endmodule


module CONFIGURATION-PRIMITIVES$SYNTAX [org.kframework.attributes.Location(Location(1403,1,1405,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax K ::= "#RESTORE_CONFIGURATION" "(" K ")" [klabel(#RESTORE_CONFIGURATION)]
endmodule


module DEFAULT-LAYOUT [org.kframework.attributes.Location(Location(224,1,228,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports DEFAULT-LAYOUT$SYNTAX
endmodule


module DEFAULT-LAYOUT$SYNTAX [org.kframework.attributes.Location(Location(224,1,228,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  syntax #Layout ::= r"(\\/\\/[^\\n\\r]*)"
  syntax #Layout ::= r"(\\/\\*([^\\*]|(\\*+([^\\*\\/])))*\\*+\\/)"
  syntax #Layout ::= r"([\\ \\n\\r\\t])"
endmodule


module DOMAINS$SYNTAX [org.kframework.attributes.Location(Location(11,1,22,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING$SYNTAX
  imports SET$SYNTAX
  imports MAP$SYNTAX
  imports LIST$SYNTAX
  imports K-REFLECTION$SYNTAX
  imports K-IO$SYNTAX
  imports INT$SYNTAX
  imports DOMAINS-SYNTAX$SYNTAX
  imports BOOL$SYNTAX
  imports BASIC-K$SYNTAX
endmodule


module DOMAINS-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(4,1,9,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports UNSIGNED-INT-SYNTAX$SYNTAX
  imports STRING-SYNTAX$SYNTAX
  imports ID$SYNTAX
  imports BOOL-SYNTAX$SYNTAX
endmodule


module DTC [org.kframework.attributes.Location(Location(7,1,31,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/dtc.k))]
  imports DTC$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("dtc","StepCommand")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"V_TEMP2\"","String"),`ifInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList))),`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList))),svalueMInt(getReg(#token("\"TEMP2\"","String"),#SemanticCastToMap(RSMap))),`ifInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList))),`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList))),uvalueMInt(getReg(#token("\"TEMP2\"","String"),#SemanticCastToMap(RSMap))),#token("-1","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(24) org.kframework.attributes.Location(Location(24,8,29,21)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/dtc.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("dtc","StepCommand")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"V_TEMP1\"","String"),`ifInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList))),`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList))),svalueMInt(getReg(#token("\"TEMP1\"","String"),#SemanticCastToMap(RSMap))),`ifInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList))),`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList))),uvalueMInt(getReg(#token("\"TEMP1\"","String"),#SemanticCastToMap(RSMap))),#token("-1","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(17) org.kframework.attributes.Location(Location(17,8,22,21)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/dtc.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment(( ifMInt (((S ==K F16) orBool (S ==K F32)) orBool (S ==K F64) ) then extractMInt(getParentValue(Qd, RSMap), (128 -Int I1 -Int 32), (128 -Int I1)) else (undefMInt) ),[org.kframework.attributes.Location(Location(27,237,27,404)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/dtc.k))])
  ModuleComment(( ifMInt (((S ==K F16) orBool (S ==K F32)) orBool (S ==K F64) ) then extractMInt(getParentValue(Qd, RSMap), (128 -Int I1 -Int 32), (128 -Int I1)) else (undefMInt) ),[org.kframework.attributes.Location(Location(20,237,20,404)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/dtc.k))])
  ModuleComment(
  rule <k> setDefaultRegs(dtc:StepCommand) => . ... </k>
       <regstate>
         RSMap:Map
       </regstate>
  ,[org.kframework.attributes.Location(Location(10,3,15,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/dtc.k))])
endmodule


module DTC$SYNTAX [org.kframework.attributes.Location(Location(7,1,31,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/dtc.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module EXIT [org.kframework.attributes.Location(Location(3,1,12,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/exit.k))]
  imports EXIT$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(`end_ARMV8-SYNTAX`(.KList)))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(7) org.kframework.attributes.Location(Location(7,8,8,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/exit.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(`end_ARMV8-SYNTAX`(.KList)),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(10) org.kframework.attributes.Location(Location(10,8,11,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/exit.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( context execinstr(end:Opcode .Operands),[org.kframework.attributes.Location(Location(6,3,6,45)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/exit.k))])
endmodule


module EXIT$SYNTAX [org.kframework.attributes.Location(Location(3,1,12,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/exit.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module EXT [org.kframework.attributes.Location(Location(7,1,31,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/ext.k))]
  imports EXT$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("ext","StepCommand")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I1))),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"TEMP2\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_>=Int_`(#SemanticCastToInt(I1),#token("0","Int")),`_<Int_`(#SemanticCastToInt(I1),#token("32","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),`_-Int_`(`_-Int_`(#token("32","Int"),#SemanticCastToInt(I1)),#token("8","Int")),`_-Int_`(#token("32","Int"),#SemanticCastToInt(I1))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),`_-Int_`(`_-Int_`(#token("32","Int"),#SemanticCastToInt(I1)),#token("16","Int")),`_-Int_`(#token("32","Int"),#SemanticCastToInt(I1))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList))),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),`_-Int_`(`_-Int_`(#token("32","Int"),#SemanticCastToInt(I1)),#token("32","Int")),`_-Int_`(#token("32","Int"),#SemanticCastToInt(I1))),`undefMInt_ARMV8-MINT-SYNTAX`(.KList)))),`undefMInt_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(24) org.kframework.attributes.Location(Location(24,8,29,21)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/ext.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("ext","StepCommand")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I1))),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"TEMP1\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_>=Int_`(#SemanticCastToInt(I1),#token("0","Int")),`_<Int_`(#SemanticCastToInt(I1),#token("128","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList))),extractMInt(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),`_-Int_`(`_-Int_`(#token("128","Int"),#SemanticCastToInt(I1)),#token("8","Int")),`_-Int_`(#token("128","Int"),#SemanticCastToInt(I1))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList))),extractMInt(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),`_-Int_`(`_-Int_`(#token("128","Int"),#SemanticCastToInt(I1)),#token("16","Int")),`_-Int_`(#token("128","Int"),#SemanticCastToInt(I1))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList))),extractMInt(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),`_-Int_`(`_-Int_`(#token("128","Int"),#SemanticCastToInt(I1)),#token("32","Int")),`_-Int_`(#token("128","Int"),#SemanticCastToInt(I1))),`undefMInt_ARMV8-MINT-SYNTAX`(.KList)))),`undefMInt_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(17) org.kframework.attributes.Location(Location(17,8,22,21)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/ext.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment(orBool (S ==K F32),[org.kframework.attributes.Location(Location(27,388,27,409)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/ext.k))])
  ModuleComment(orBool (S ==K F32),[org.kframework.attributes.Location(Location(20,393,20,414)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/ext.k))])
  ModuleComment(orBool (S ==K F16),[org.kframework.attributes.Location(Location(27,236,27,257)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/ext.k))])
  ModuleComment(orBool (S ==K F16),[org.kframework.attributes.Location(Location(20,239,20,260)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/ext.k))])
  ModuleComment(
  rule <k> setDefaultRegs(ext:StepCommand) => . ... </k>
       <regstate>
         RSMap:Map
       </regstate>
  ,[org.kframework.attributes.Location(Location(10,3,15,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/ext.k))])
endmodule


module EXT$SYNTAX [org.kframework.attributes.Location(Location(7,1,31,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/ext.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module FLOAT [org.kframework.attributes.Location(Location(494,1,558,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports INT-SYNTAX
  imports FLOAT-SYNTAX
  imports FLOAT$SYNTAX
  imports BOOL
  rule sqrtFloat(#SemanticCastToFloat(F))=>rootFloat(#SemanticCastToFloat(F),#token("2","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(554) org.kframework.attributes.Location(Location(554,8,554,45)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule isInfinite(#SemanticCastToFloat(F))=>`_orBool_`(`_>Float__FLOAT`(#SemanticCastToFloat(F),maxValueFloat(precisionFloat(#SemanticCastToFloat(F)),exponentBitsFloat(#SemanticCastToFloat(F)))),`_<Float__FLOAT`(#SemanticCastToFloat(F),`--Float__FLOAT`(maxValueFloat(precisionFloat(#SemanticCastToFloat(F)),exponentBitsFloat(#SemanticCastToFloat(F)))))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(556) org.kframework.attributes.Location(Location(556,8,556,173)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_=/=Float__FLOAT`(#SemanticCastToFloat(F1),#SemanticCastToFloat(F2))=>`notBool_`(`_==Float_`(#SemanticCastToFloat(F1),#SemanticCastToFloat(F2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(549) org.kframework.attributes.Location(Location(549,8,549,61)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( For floating point SMT hooks: http://smtlib.cs.uiowa.edu/theories-FloatingPoint.shtml,[org.kframework.attributes.Location(Location(500,1,500,89)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module FLOAT$SYNTAX [org.kframework.attributes.Location(Location(494,1,558,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports INT-SYNTAX$SYNTAX
  imports FLOAT-SYNTAX$SYNTAX
  imports BOOL$SYNTAX
  syntax priority --Float__FLOAT > _^Float__FLOAT > _*Float__FLOAT _/Float__FLOAT _%Float__FLOAT > _+Float__FLOAT _-Float__FLOAT
  syntax associativity left _^Float__FLOAT
  syntax associativity left _>Float__FLOAT
  syntax associativity left _>=Float__FLOAT
  syntax associativity left _==Float_
  syntax associativity left _=/=Float__FLOAT
  syntax associativity left _<Float__FLOAT
  syntax associativity left _<=Float__FLOAT
  syntax associativity left _/Float__FLOAT
  syntax associativity left _-Float__FLOAT
  syntax associativity left _+Float__FLOAT _-Float__FLOAT
  syntax associativity left _+Float__FLOAT
  syntax associativity left _*Float__FLOAT _/Float__FLOAT _%Float__FLOAT
  syntax associativity left _*Float__FLOAT
  syntax associativity left _%Float__FLOAT
  syntax MInt ::= "significandFloat" "(" Float ")" [function() hook(FLOAT.significand) klabel(significandFloat)]
  syntax Int ::= "precisionFloat" "(" Float ")" [function() functional() hook(FLOAT.precision) klabel(precisionFloat)]
  syntax Int ::= "exponentFloat" "(" Float ")" [function() functional() hook(FLOAT.exponent) klabel(exponentFloat)]
  syntax Int ::= "exponentBitsFloat" "(" Float ")" [function() functional() hook(FLOAT.exponentBits) klabel(exponentBitsFloat)]
  syntax Int ::= "Float2Int" "(" Float ")" [function() functional() hook(FLOAT.float2int) klabel(Float2Int) latex({\\it{}Float2Int})]
  syntax Float ::= Float "^Float" Float [function() hook(FLOAT.pow) latex({#1}^{#2}) left()]
  syntax Float ::= Float "/Float" Float [function() hook(FLOAT.div) latex({#1}\mathrel{\div_{\scriptstyle\it Float}}{#2}) left() smt-hook((fp.div roundNearestTiesToEven #1 #2))]
  syntax Float ::= Float "-Float" Float [function() hook(FLOAT.sub) latex({#1}\mathrel{-_{\scriptstyle\it Float}}{#2}) left() smt-hook((fp.sub roundNearestTiesToEven #1 #2))]
  syntax Float ::= Float "+Float" Float [function() hook(FLOAT.add) latex({#1}\mathrel{+_{\scriptstyle\it Float}}{#2}) left() smt-hook((fp.add roundNearestTiesToEven #1 #2))]
  syntax Float ::= Float "*Float" Float [function() hook(FLOAT.mul) latex({#1}\mathrel{\ast_{\scriptstyle\it Float}}{#2}) left() smt-hook((fp.mul roundNearestTiesToEven #1 #2))]
  syntax Float ::= Float "%Float" Float [function() hook(FLOAT.rem) latex({#1}\mathrel{\%_{\scriptstyle\it Float}}{#2}) left() smt-hook((fp.rem roundNearestTiesToEven #1 #2))]
  syntax Float ::= "tanFloat" "(" Float ")" [function() hook(FLOAT.tan) klabel(tanFloat)]
  syntax Float ::= "sqrtFloat" "(" Float ")" [function() klabel(sqrtFloat)]
  syntax Float ::= "sinFloat" "(" Float ")" [function() functional() hook(FLOAT.sin) klabel(sinFloat)]
  syntax Float ::= "roundFloat" "(" Float "," Int "," Int ")" [function() hook(FLOAT.round) klabel(roundFloat)]
  syntax Float ::= "rootFloat" "(" Float "," Int ")" [function() hook(FLOAT.root) klabel(rootFloat)]
  syntax Float ::= "minValueFloat" "(" Int "," Int ")" [function() hook(FLOAT.minValue) klabel(minValueFloat)]
  syntax Float ::= "minFloat" "(" Float "," Float ")" [function() hook(FLOAT.min) klabel(minFloat) smt-hook(fp.min)]
  syntax Float ::= "maxValueFloat" "(" Int "," Int ")" [function() hook(FLOAT.maxValue) klabel(maxValueFloat)]
  syntax Float ::= "maxFloat" "(" Float "," Float ")" [function() hook(FLOAT.max) klabel(maxFloat) smt-hook(fp.max)]
  syntax Float ::= "logFloat" "(" Float ")" [function() hook(FLOAT.log) klabel(logFloat)]
  syntax Float ::= "floorFloat" "(" Float ")" [function() functional() hook(FLOAT.floor) klabel(floorFloat)]
  syntax Float ::= "expFloat" "(" Float ")" [function() functional() hook(FLOAT.exp) klabel(expFloat)]
  syntax Float ::= "cosFloat" "(" Float ")" [function() functional() hook(FLOAT.cos) klabel(cosFloat)]
  syntax Float ::= "ceilFloat" "(" Float ")" [function() functional() hook(FLOAT.ceil) klabel(ceilFloat)]
  syntax Float ::= "atanFloat" "(" Float ")" [function() functional() hook(FLOAT.atan) klabel(atanFloat)]
  syntax Float ::= "atan2Float" "(" Float "," Float ")" [function() hook(FLOAT.atan2) klabel(atan2Float)]
  syntax Float ::= "asinFloat" "(" Float ")" [function() hook(FLOAT.asin) klabel(asinFloat)]
  syntax Float ::= "acosFloat" "(" Float ")" [function() hook(FLOAT.acos) klabel(acosFloat)]
  syntax Float ::= "absFloat" "(" Float ")" [function() functional() hook(FLOAT.abs) klabel(absFloat) smt-hook(fp.abs)]
  syntax Float ::= "Int2Float" "(" Int "," Int "," Int ")" [function() hook(FLOAT.int2float) klabel(Int2Float) latex({\\it{}Int2Float})]
  syntax Float ::= "--Float" Float [function() functional() hook(FLOAT.neg) smt-hook(fp.neg)]
  syntax Bool ::= Float ">Float" Float [function() hook(FLOAT.gt) latex({#1}\mathrel{>_{\scriptstyle\it Float}}{#2}) left() smt-hook(fg.gt)]
  syntax Bool ::= Float ">=Float" Float [function() hook(FLOAT.ge) latex({#1}\mathrel{\geq_{\scriptstyle\it Float}}{#2}) left() smt-hook(fp.geq)]
  syntax Bool ::= Float "==Float" Float [function() hook(FLOAT.eq) klabel(_==Float_) latex({#1}\mathrel{==_{\scriptstyle\it Float}}{#2}) left() smt-hook(fp.eq)]
  syntax Bool ::= Float "=/=Float" Float [function() latex({#1}\mathrel{\neq_{\scriptstyle\it Float}}{#2}) left() smt-hook((not (fp.eq #1 #2)))]
  syntax Bool ::= Float "<Float" Float [function() hook(FLOAT.lt) latex({#1}\mathrel{<_{\scriptstyle\it Float}}{#2}) left() smt-hook(fp.lt)]
  syntax Bool ::= Float "<=Float" Float [function() hook(FLOAT.le) latex({#1}\mathrel{\leq_{\scriptstyle\it Float}}{#2}) left() smt-hook(fp.leq)]
  syntax Bool ::= "signFloat" "(" Float ")" [function() functional() hook(FLOAT.sign) klabel(signFloat)]
  syntax Bool ::= "isNaN" "(" Float ")" [function() functional() hook(FLOAT.isNaN) klabel(isNaN) smt-hook(fp.isNaN)]
  syntax Bool ::= "isInfinite" "(" Float ")" [function() functional() klabel(isInfinite)]
endmodule


module FLOAT-SYNTAX [org.kframework.attributes.Location(Location(487,1,492,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports FLOAT-SYNTAX$SYNTAX
endmodule


module FLOAT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(487,1,492,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax Float [hook(FLOAT.Float) org.kframework.attributes.Location(Location(488,3,488,34)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax Float ::= r"[\\+-]?Infinity([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3) token()]
  syntax Float ::= r"NaN([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3) token()]
  syntax Float ::= r"([\\+-]?[0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][\\+-]?([0-9]+(\\.[0-9]*)?|\\.[0-9]d+))?([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(1) token()]
endmodule


module ID [org.kframework.attributes.Location(Location(838,1,844,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING
  imports ID-SYNTAX
  imports ID-SYMBOLIC
  imports ID$SYNTAX
  rule freshId(#SemanticCastToInt(I))=>`String2Id`(`_+String__STRING`(#token("\"_\"","String"),`Int2String`(#SemanticCastToInt(I)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(843) org.kframework.attributes.Location(Location(843,8,843,62)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module ID$SYNTAX [org.kframework.attributes.Location(Location(838,1,844,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING$SYNTAX
  imports ID-SYNTAX$SYNTAX
  imports ID-SYMBOLIC$SYNTAX
endmodule


module ID-PROGRAM-PARSING [org.kframework.attributes.Location(Location(820,1,825,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports ID-PROGRAM-PARSING$SYNTAX
  imports BUILTIN-ID-TOKENS
endmodule


module ID-PROGRAM-PARSING$SYNTAX [org.kframework.attributes.Location(Location(820,1,825,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports BUILTIN-ID-TOKENS$SYNTAX
  syntax Id ::= r"(?<![A-Za-z0-9\\_])[A-Za-z\\_][A-Za-z0-9\\_]*" [prec(1) token()]
  syntax Id ::= #UpperId [token()]
  syntax Id ::= #LowerId [token()]
endmodule


module ID-SYMBOLIC [kast() org.kframework.attributes.Location(Location(846,1,850,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) symbolic()]
  imports ID-SYNTAX
  imports ID-SYMBOLIC$SYNTAX
  rule `String2Id`(#SemanticCastToString(S))=>`project:Id`(`#parseIdToken(_,_)_ID-SYMBOLIC`(#token("\"Id\"","String"),#SemanticCastToString(S))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(849) org.kframework.attributes.Location(Location(849,8,849,59)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module ID-SYMBOLIC$SYNTAX [kast() org.kframework.attributes.Location(Location(846,1,850,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) symbolic()]
  imports ID-SYNTAX$SYNTAX
  syntax KItem ::= "#parseIdToken" "(" String "," String ")" [function() hook(STRING.parseToken)]
endmodule


module ID-SYNTAX [org.kframework.attributes.Location(Location(827,1,836,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING-SYNTAX
  imports INT-SYNTAX
  imports ID-SYNTAX$SYNTAX
endmodule


module ID-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(827,1,836,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING-SYNTAX$SYNTAX
  imports INT-SYNTAX$SYNTAX
  syntax String ::= "Id2String" "(" Id ")" [function() functional() hook(STRING.token2string) klabel(Id2String)]
  syntax Id [org.kframework.attributes.Location(Location(831,3,831,19)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) token()]
  syntax Id ::= "freshId" "(" Int ")" [freshGenerator() function() functional() klabel(freshId)]
  syntax Id ::= "String2Id" "(" String ")" [function() functional() hook(STRING.string2token) klabel(String2Id)]
endmodule


module INT [org.kframework.attributes.Location(Location(456,1,485,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports K-EQUAL
  imports INT-COMMON
  imports INT$SYNTAX
  rule signExtendBitRangeInt(#SemanticCastToInt(I),#SemanticCastToInt(IDX),#SemanticCastToInt(LEN))=>`_-Int_`(`_modInt_`(`_+Int_`(bitRangeInt(#SemanticCastToInt(I),#SemanticCastToInt(IDX),#SemanticCastToInt(LEN)),`_<<Int_`(#token("1","Int"),`_-Int_`(#SemanticCastToInt(LEN),#token("1","Int")))),`_<<Int_`(#token("1","Int"),#SemanticCastToInt(LEN))),`_<<Int_`(#token("1","Int"),`_-Int_`(#SemanticCastToInt(LEN),#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(463) org.kframework.attributes.Location(Location(463,8,463,164)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule freshInt(#SemanticCastToInt(I))=>#SemanticCastToInt(I) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(481) org.kframework.attributes.Location(Location(481,8,481,28)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitRangeInt(#SemanticCastToInt(I),#SemanticCastToInt(IDX),#SemanticCastToInt(LEN))=>`_modInt_`(`_>>Int_`(#SemanticCastToInt(I),#SemanticCastToInt(IDX)),`_<<Int_`(#token("1","Int"),#SemanticCastToInt(LEN))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(461) org.kframework.attributes.Location(Location(461,8,461,85)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `minInt(_,_)_INT-COMMON`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>#SemanticCastToInt(I2) requires `_>=Int_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(474) org.kframework.attributes.Location(Location(474,8,474,57)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `minInt(_,_)_INT-COMMON`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>#SemanticCastToInt(I1) requires `_<=Int_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(473) org.kframework.attributes.Location(Location(473,8,473,57)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_modInt_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`_%Int_`(`_+Int_`(`_%Int_`(#SemanticCastToInt(I1),absInt(#SemanticCastToInt(I2))),absInt(#SemanticCastToInt(I2))),absInt(#SemanticCastToInt(I2))) requires `_=/=Int_`(#SemanticCastToInt(I2),#token("0","Int")) ensures #token("true","Bool") [concrete() contentStartColumn(5) contentStartLine(468) org.kframework.attributes.Location(Location(468,5,471,23)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_dividesInt__INT-COMMON`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`_==Int_`(`_%Int_`(#SemanticCastToInt(I2),#SemanticCastToInt(I1)),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(478) org.kframework.attributes.Location(Location(478,8,478,58)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_divInt_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`_/Int_`(`_-Int_`(#SemanticCastToInt(I1),`_modInt_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))),#SemanticCastToInt(I2)) requires `_=/=Int_`(#SemanticCastToInt(I2),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(465) org.kframework.attributes.Location(Location(465,8,466,23)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_==Int_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`_==K_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(476) org.kframework.attributes.Location(Location(476,8,476,40)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_=/=Int_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))=>`notBool_`(`_==Int_`(#SemanticCastToInt(I1),#SemanticCastToInt(I2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(477) org.kframework.attributes.Location(Location(477,8,477,53)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module INT$SYNTAX [org.kframework.attributes.Location(Location(456,1,485,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports K-EQUAL$SYNTAX
  imports INT-SYMBOLIC$SYNTAX
  imports INT-COMMON$SYNTAX
  syntax K ::= "srandInt" "(" Int ")" [function() hook(INT.srand) klabel(srandInt)]
  syntax Int ::= "randInt" "(" Int ")" [function() hook(INT.rand) klabel(randInt)]
  syntax Int ::= "freshInt" "(" Int ")" [freshGenerator() function() functional() klabel(freshInt)]
endmodule


module INT-COMMON [org.kframework.attributes.Location(Location(371,1,415,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports INT-SYNTAX
  imports INT-COMMON$SYNTAX
  imports BOOL
  ModuleComment( divInt and modInt implement e-division ,[org.kframework.attributes.Location(Location(384,16,384,59)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( FIXME: translate /Int and %Int into smtlib ,[org.kframework.attributes.Location(Location(380,16,380,63)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( /Int and %Int implement t-division ,[org.kframework.attributes.Location(Location(381,16,381,55)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module INT-COMMON$SYNTAX [org.kframework.attributes.Location(Location(371,1,415,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports INT-SYNTAX$SYNTAX
  imports BOOL$SYNTAX
  syntax priority ~Int_ > _^Int_ _^%Int__ > _divInt_ _%Int_ _/Int_ _*Int_ _modInt_ > _+Int_ _-Int_ > _>>Int_ _<<Int_ > _&Int_ > _xorInt_ > _|Int_
  syntax associativity left _|Int_
  syntax associativity left _xorInt_
  syntax associativity left _modInt_
  syntax associativity left _divInt_ _%Int_ _/Int_ _*Int_ _modInt_
  syntax associativity left _divInt_
  syntax associativity left _^Int_ _^%Int__
  syntax associativity left _^Int_
  syntax associativity left _^%Int__
  syntax associativity left _>Int_
  syntax associativity left _>>Int_ _<<Int_
  syntax associativity left _>>Int_
  syntax associativity left _>=Int_
  syntax associativity left _==Int_
  syntax associativity left _=/=Int_
  syntax associativity left _<Int_
  syntax associativity left _<=Int_
  syntax associativity left _<<Int_
  syntax associativity left _/Int_
  syntax associativity left _-Int_
  syntax associativity left _+Int_ _-Int_
  syntax associativity left _+Int_
  syntax associativity left _*Int_
  syntax associativity left _&Int_
  syntax associativity left _%Int_
  syntax Int ::= Int "|Int" Int [function() functional() hook(INT.or) klabel(_|Int_) latex({#1}\mathrel{|_{\scriptstyle\it Int}}{#2}) left() smtlib(orInt) symbol()]
  syntax Int ::= Int "xorInt" Int [function() functional() hook(INT.xor) klabel(_xorInt_) latex({#1}\mathrel{\oplus_{\scriptstyle\it Int}}{#2}) left() smtlib(xorInt) symbol()]
  syntax Int ::= Int "modInt" Int [function() hook(INT.emod) klabel(_modInt_) left() smt-hook(mod) symbol()]
  syntax Int ::= Int "divInt" Int [function() hook(INT.ediv) klabel(_divInt_) left() smt-hook(div) symbol()]
  syntax Int ::= Int "^Int" Int [function() hook(INT.pow) klabel(_^Int_) latex({#1}\mathrel{{\char`\^}_{\!\scriptstyle\it Int}}{#2}) left() smt-hook(^) symbol()]
  syntax Int ::= Int "^%Int" Int Int [function() hook(INT.powmod) klabel(_^%Int__) left() smt-hook((mod (^ #1 #2) #3)) symbol()]
  syntax Int ::= Int ">>Int" Int [function() hook(INT.shr) klabel(_>>Int_) latex({#1}\mathrel{\gg_{\scriptstyle\it Int}}{#2}) left() smtlib(shrInt) symbol()]
  syntax Int ::= Int "<<Int" Int [function() hook(INT.shl) klabel(_<<Int_) latex({#1}\mathrel{\ll_{\scriptstyle\it Int}}{#2}) left() smtlib(shlInt) symbol()]
  syntax Int ::= Int "/Int" Int [function() hook(INT.tdiv) klabel(_/Int_) latex({#1}\mathrel{\div_{\scriptstyle\it Int}}{#2}) left() smt-hook(div) symbol()]
  syntax Int ::= Int "-Int" Int [function() functional() hook(INT.sub) klabel(_-Int_) latex({#1}\mathrel{-_{\scriptstyle\it Int}}{#2}) left() smt-hook(-) symbol()]
  syntax Int ::= Int "+Int" Int [function() functional() hook(INT.add) klabel(_+Int_) latex({#1}\mathrel{+_{\scriptstyle\it Int}}{#2}) left() smt-hook(+) symbol()]
  syntax Int ::= Int "*Int" Int [function() functional() hook(INT.mul) klabel(_*Int_) latex({#1}\mathrel{\ast_{\scriptstyle\it Int}}{#2}) left() smt-hook(*) symbol()]
  syntax Int ::= Int "&Int" Int [function() functional() hook(INT.and) klabel(_&Int_) latex({#1}\mathrel{\&_{\scriptstyle\it Int}}{#2}) left() smtlib(andInt) symbol()]
  syntax Int ::= Int "%Int" Int [function() hook(INT.tmod) klabel(_%Int_) latex({#1}\mathrel{\%_{\scriptstyle\it Int}}{#2}) left() smt-hook(mod) symbol()]
  syntax Int ::= "~Int" Int [function() functional() hook(INT.not) klabel(~Int_) latex(\mathop{\sim_{\scriptstyle\it Int}}{#1}) smtlib(notInt) symbol()]
  syntax Int ::= "signExtendBitRangeInt" "(" Int "," Int "," Int ")" [function() hook(INT.signExtendBitRange) klabel(signExtendBitRangeInt)]
  syntax Int ::= "minInt" "(" Int "," Int ")" [function() functional() hook(INT.min) smtlib(int_min)]
  syntax Int ::= "maxInt" "(" Int "," Int ")" [function() functional() hook(INT.max) smtlib(int_max)]
  syntax Int ::= "log2Int" "(" Int ")" [function() hook(INT.log2) klabel(log2Int)]
  syntax Int ::= "bitRangeInt" "(" Int "," Int "," Int ")" [function() hook(INT.bitRange) klabel(bitRangeInt)]
  syntax Int ::= "absInt" "(" Int ")" [function() functional() hook(INT.abs) klabel(absInt) smtlib(int_abs)]
  syntax Bool ::= Int "dividesInt" Int [function()]
  syntax Bool ::= Int ">Int" Int [function() functional() hook(INT.gt) klabel(_>Int_) latex({#1}\mathrel{>_{\scriptstyle\it Int}}{#2}) left() smt-hook(>) symbol()]
  syntax Bool ::= Int ">=Int" Int [function() functional() hook(INT.ge) klabel(_>=Int_) latex({#1}\mathrel{\geq_{\scriptstyle\it Int}}{#2}) left() smt-hook(>=) symbol()]
  syntax Bool ::= Int "==Int" Int [function() functional() hook(INT.eq) klabel(_==Int_) latex({#1}\mathrel{{=}{=}_{\scriptstyle\it Int}}{#2}) left() smt-hook(=) symbol()]
  syntax Bool ::= Int "=/=Int" Int [function() functional() hook(INT.ne) klabel(_=/=Int_) latex({#1}\mathrel{{=}{/}{=}_{\scriptstyle\it Int}}{#2}) left() smt-hook(distinct) symbol()]
  syntax Bool ::= Int "<Int" Int [function() functional() hook(INT.lt) klabel(_<Int_) latex({#1}\mathrel{<_{\scriptstyle\it Int}}{#2}) left() smt-hook(<) symbol()]
  syntax Bool ::= Int "<=Int" Int [function() functional() hook(INT.le) klabel(_<=Int_) latex({#1}\mathrel{\leq_{\scriptstyle\it Int}}{#2}) left() smt-hook(<=) symbol()]
endmodule


module INT-SYMBOLIC$SYNTAX [kore() org.kframework.attributes.Location(Location(417,1,454,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) symbolic()]
  imports ML-SYNTAX$SYNTAX
  imports INT-COMMON$SYNTAX
endmodule


module INT-SYNTAX [org.kframework.attributes.Location(Location(366,1,369,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports UNSIGNED-INT-SYNTAX
  imports INT-SYNTAX$SYNTAX
endmodule


module INT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(366,1,369,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports UNSIGNED-INT-SYNTAX$SYNTAX
  syntax Int ::= r"[\\+-]?[0-9]+" [prec(2) prefer() token()]
endmodule


module K [org.kframework.attributes.Location(Location(244,1,274,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports REQUIRES-ENSURES
  imports RECORD-PRODUCTIONS
  imports KSEQ-SYMBOLIC
  imports K-SORT-LATTICE
  imports K$SYNTAX
  imports AUTO-FOLLOW
  imports AUTO-CASTS
  ModuleComment( functions that preserve sorts and can therefore have inner rewrites,[org.kframework.attributes.Location(Location(257,3,257,73)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( functions that do not preserve sort and therefore cannot have inner rewrites,[org.kframework.attributes.Location(Location(259,3,259,82)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( Set membership over terms. In addition to equality over
      concrete patterns, K also supports computing equality
      between a concrete pattern and a symbolic pattern.
      This is compiled efficiently down to pattern matching,
      and can be used by putting a term with unbound variables
      in the left child of :=K or =/=K. Note that this does not
      bind variables used on the lhs however (although this may
      change in the future).,[org.kframework.attributes.Location(Location(262,3,269,30)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
endmodule


module K$SYNTAX [org.kframework.attributes.Location(Location(244,1,274,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports REQUIRES-ENSURES$SYNTAX
  imports RECORD-PRODUCTIONS$SYNTAX
  imports KSEQ-SYMBOLIC$SYNTAX
  imports K-SORT-LATTICE$SYNTAX
  imports AUTO-FOLLOW$SYNTAX
  imports AUTO-CASTS$SYNTAX
  syntax {Sort} Sort ::= Sort "=>" Sort [klabel(#KRewrite) symbol()]
  syntax {Sort} Sort ::= Sort "#as" Sort [klabel(#KAs) symbol()]
  syntax {Sort} Sort ::= "#fun" "(" Sort ")" "(" Sort ")" [klabel(#fun2) prefer() symbol()]
  syntax {Sort1, Sort2} Sort1 ::= "#fun" "(" Sort2 "=>" Sort1 ")" "(" Sort2 ")" [klabel(#fun3) symbol()]
  syntax priority #KRewrite > #withConfig
  syntax associativity non-assoc #KRewrite
  syntax associativity left _:=K_ _:/=K_
  syntax Bool ::= K ":=K" K [equalEqualK() function() functional() klabel(_:=K_) symbol()]
  syntax Bool ::= K ":/=K" K [function() functional() klabel(_:/=K_) notEqualEqualK() symbol()]
endmodule


module K-BOTTOM-SORT [org.kframework.attributes.Location(Location(169,1,173,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-KBOTT
  imports K-BOTTOM-SORT$SYNTAX
endmodule


module K-BOTTOM-SORT$SYNTAX [org.kframework.attributes.Location(Location(169,1,173,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-KBOTT$SYNTAX
  syntax {Sort} Sort ::= KBott
  syntax KItem ::= KBott
endmodule


module K-EQUAL [org.kframework.attributes.Location(Location(852,1,870,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports K-EQUAL$SYNTAX
  imports BOOL
  imports BASIC-K
  rule `_==Bool_`(#SemanticCastToBool(K1),#SemanticCastToBool(K2))=>`_==K_`(#SemanticCastToBool(K1),#SemanticCastToBool(K2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(863) org.kframework.attributes.Location(Location(863,8,863,43)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_=/=K_`(#SemanticCastToK(K1),#SemanticCastToK(K2))=>`notBool_`(`_==K_`(#SemanticCastToK(K1),#SemanticCastToK(K2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(861) org.kframework.attributes.Location(Location(861,8,861,45)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#if_#then_#else_#fi_K-EQUAL`(#SemanticCastToBool(C),#SemanticCastToK(_),#SemanticCastToK(B2))=>#SemanticCastToK(B2) requires `notBool_`(#SemanticCastToBool(C)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(868) org.kframework.attributes.Location(Location(868,8,868,67)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `#if_#then_#else_#fi_K-EQUAL`(#SemanticCastToBool(C),#SemanticCastToK(B1),#SemanticCastToK(_))=>#SemanticCastToK(B1) requires #SemanticCastToBool(C) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(867) org.kframework.attributes.Location(Location(867,8,867,59)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
endmodule


module K-EQUAL$SYNTAX [org.kframework.attributes.Location(Location(852,1,870,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports BOOL$SYNTAX
  imports BASIC-K$SYNTAX
  syntax {Sort} Sort ::= "#if" Bool "#then" Sort "#else" Sort "#fi" [function() functional() hook(KEQUAL.ite) smt-hook(ite)]
  syntax priority _:=K_ _=/=K_ _:/=K_ _==K_ > #And _orElseBool_ weakExistsFinally _orBool_ #Implies _andThenBool_ _impliesBool_ #Floor #Exists #Ceil _andBool_ #Forall #Not #Or notBool_ #AG #Equals _xorBool_
  syntax associativity left _=/=K_ _==K_
  syntax Bool ::= K "==K" K [equalEqualK() function() functional() hook(KEQUAL.eq) klabel(_==K_) latex({#1}\mathrel{=_K}{#2}) smt-hook(=) symbol()]
  syntax Bool ::= K "=/=K" K [function() functional() hook(KEQUAL.ne) klabel(_=/=K_) latex({#1}\mathrel{\neq_K}{#2}) notEqualEqualK() smt-hook(distinct) symbol()]
endmodule


module K-IO [org.kframework.attributes.Location(Location(907,1,1035,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING
  imports LIST
  imports K-REFLECTION
  imports K-IO$SYNTAX
  rule `#stdout_K-IO`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1014) org.kframework.attributes.Location(Location(1014,8,1014,20)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#stdin_K-IO`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1013) org.kframework.attributes.Location(Location(1013,8,1013,19)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#stderr_K-IO`(.KList)=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1015) org.kframework.attributes.Location(Location(1015,8,1015,20)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `#open(_)_K-IO`(#SemanticCastToString(S))=>`#open(_,_)_K-IO`(#SemanticCastToString(S),#token("\"r+\"","String")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1007) org.kframework.attributes.Location(Location(1007,8,1007,48)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( stdout ,[org.kframework.attributes.Location(Location(1025,71,1025,82)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( stderr ,[org.kframework.attributes.Location(Location(1025,95,1025,106)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( exit code ,[org.kframework.attributes.Location(Location(1025,44,1025,58)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( executes the given command line with `sh -c cmd:String` on unix or,[org.kframework.attributes.Location(Location(1022,3,1022,72)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( `cmd /c cmd:String` on windows and returns #systemResult,[org.kframework.attributes.Location(Location(1023,3,1023,62)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( System,[org.kframework.attributes.Location(Location(1020,1,1020,10)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Remove a file or empty directory from the disk. Returns .K on success or an IOError on failure.,[org.kframework.attributes.Location(Location(1033,3,1033,101)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( ------------------------------,[org.kframework.attributes.Location(Location(1019,1,1019,34)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( #tempFile(path: String, fd: Int),[org.kframework.attributes.Location(Location(1031,21,1031,56)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( #make safe temp ( template: String):IOFile - creates a temporary file in the default system location,[org.kframework.attributes.Location(Location(1028,3,1028,106)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module K-IO$SYNTAX [org.kframework.attributes.Location(Location(907,1,1035,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING$SYNTAX
  imports LIST$SYNTAX
  imports K-REFLECTION$SYNTAX
  syntax Stream ::= "#buffer" "(" K ")" [klabel(#buffer)]
  syntax KItem ::= "#systemResult" "(" Int "," String "," String ")" [klabel(#systemResult) symbol()]
  syntax KItem ::= "#system" "(" String ")" [function() hook(IO.system) impure() klabel(#system)]
  syntax KItem ::= "#stat" "(" String ")" [function() hook(IO.stat) impure()]
  syntax KItem ::= "#opendir" "(" String ")" [function() hook(IO.opendir) impure()]
  syntax KItem ::= "#lstat" "(" String ")" [function() hook(IO.lstat) impure()]
  syntax K ::= "#write" "(" Int "," String ")" [function() hook(IO.write) impure()]
  syntax K ::= "#unlock" "(" Int "," Int ")" [function() hook(IO.unlock) impure()]
  syntax K ::= "#shutdownWrite" "(" Int ")" [function() hook(IO.shutdownWrite) impure()]
  syntax K ::= "#seekEnd" "(" Int "," Int ")" [function() hook(IO.seekEnd) impure()]
  syntax K ::= "#seek" "(" Int "," Int ")" [function() hook(IO.seek) impure()]
  syntax K ::= "#remove" "(" String ")" [function() functional() hook(IO.remove) impure() klabel(#remove)]
  syntax K ::= "#putc" "(" Int "," Int ")" [function() hook(IO.putc) impure()]
  syntax K ::= "#logToFile" "(" String "," String ")" [function() functional() hook(IO.log) impure() klabel(#logToFile) returnsUnit() symbol()]
  syntax K ::= "#lock" "(" Int "," Int ")" [function() hook(IO.lock) impure()]
  syntax K ::= "#close" "(" Int ")" [function() hook(IO.close) impure()]
  syntax Int ::= "#time" "(" ")" [function() hook(IO.time) impure()]
  syntax Int ::= "#stdout" [function() functional()]
  syntax Int ::= "#stdin" [function() functional()]
  syntax Int ::= "#stderr" [function() functional()]
  syntax IOString ::= String
  syntax IOString ::= IOError
  syntax IOString ::= "#read" "(" Int "," Int ")" [function() hook(IO.read) impure()]
  syntax IOInt ::= Int
  syntax IOInt ::= IOError
  syntax IOInt ::= "#tell" "(" Int ")" [function() hook(IO.tell) impure()]
  syntax IOInt ::= "#open" "(" String "," String ")" [function() hook(IO.open) impure()]
  syntax IOInt ::= "#open" "(" String ")" [function()]
  syntax IOInt ::= "#getc" "(" Int ")" [function() hook(IO.getc) impure()]
  syntax IOInt ::= "#accept" "(" Int ")" [function() hook(IO.accept) impure()]
  syntax IOFile ::= IOError
  syntax IOFile ::= "#tempFile" "(" String "," Int ")" [klabel(#tempFile) symbol()]
  syntax IOFile ::= "#mkstemp" "(" String ")" [function() hook(IO.mkstemp) impure() klabel(#mkstemp)]
  syntax IOError ::= "#unknownIOError" "(" Int ")" [klabel(#unknownIOError) symbol()]
  syntax IOError ::= "#EXDEV" [klabel(#EXDEV) symbol()]
  syntax IOError ::= "#EWOULDBLOCK" [klabel(#EWOULDBLOCK) symbol()]
  syntax IOError ::= "#ETOOMANYREFS" [klabel(#ETOOMANYREFS) symbol()]
  syntax IOError ::= "#ETIMEDOUT" [klabel(#ETIMEDOUT) symbol()]
  syntax IOError ::= "#ESRCH" [klabel(#ESRCH) symbol()]
  syntax IOError ::= "#ESPIPE" [klabel(#ESPIPE) symbol()]
  syntax IOError ::= "#ESOCKTNOSUPPORT" [klabel(#ESOCKTNOSUPPORT) symbol()]
  syntax IOError ::= "#ESHUTDOWN" [klabel(#ESHUTDOWN) symbol()]
  syntax IOError ::= "#EROFS" [klabel(#EROFS) symbol()]
  syntax IOError ::= "#ERANGE" [klabel(#ERANGE) symbol()]
  syntax IOError ::= "#EPROTOTYPE" [klabel(#EPROTOTYPE) symbol()]
  syntax IOError ::= "#EPROTONOSUPPORT" [klabel(#EPROTONOSUPPORT) symbol()]
  syntax IOError ::= "#EPIPE" [klabel(#EPIPE) symbol()]
  syntax IOError ::= "#EPFNOSUPPORT" [klabel(#EPFNOSUPPORT) symbol()]
  syntax IOError ::= "#EPERM" [klabel(#EPERM) symbol()]
  syntax IOError ::= "#EOVERFLOW" [klabel(#EOVERFLOW) symbol()]
  syntax IOError ::= "#EOPNOTSUPP" [klabel(#EOPNOTSUPP) symbol()]
  syntax IOError ::= "#EOF" [klabel(#EOF) symbol()]
  syntax IOError ::= "#ENXIO" [klabel(#ENXIO) symbol()]
  syntax IOError ::= "#ENOTTY" [klabel(#ENOTTY) symbol()]
  syntax IOError ::= "#ENOTSOCK" [klabel(#ENOTSOCK) symbol()]
  syntax IOError ::= "#ENOTEMPTY" [klabel(#ENOTEMPTY) symbol()]
  syntax IOError ::= "#ENOTDIR" [klabel(#ENOTDIR) symbol()]
  syntax IOError ::= "#ENOTCONN" [klabel(#ENOTCONN) symbol()]
  syntax IOError ::= "#ENOSYS" [klabel(#ENOSYS) symbol()]
  syntax IOError ::= "#ENOSPC" [klabel(#ENOSPC) symbol()]
  syntax IOError ::= "#ENOPROTOOPT" [klabel(#ENOPROTOOPT) symbol()]
  syntax IOError ::= "#ENOMEM" [klabel(#ENOMEM) symbol()]
  syntax IOError ::= "#ENOLCK" [klabel(#ENOLCK) symbol()]
  syntax IOError ::= "#ENOEXEC" [klabel(#ENOEXEC) symbol()]
  syntax IOError ::= "#ENOENT" [klabel(#ENOENT) symbol()]
  syntax IOError ::= "#ENODEV" [klabel(#ENODEV) symbol()]
  syntax IOError ::= "#ENOBUFS" [klabel(#ENOBUFS) symbol()]
  syntax IOError ::= "#ENFILE" [klabel(#ENFILE) symbol()]
  syntax IOError ::= "#ENETUNREACH" [klabel(#ENETUNREACH) symbol()]
  syntax IOError ::= "#ENETRESET" [klabel(#ENETRESET) symbol()]
  syntax IOError ::= "#ENETDOWN" [klabel(#ENETDOWN) symbol()]
  syntax IOError ::= "#ENAMETOOLONG" [klabel(#ENAMETOOLONG) symbol()]
  syntax IOError ::= "#EMSGSIZE" [klabel(#EMSGSIZE) symbol()]
  syntax IOError ::= "#EMLINK" [klabel(#EMLINK) symbol()]
  syntax IOError ::= "#EMFILE" [klabel(#EMFILE) symbol()]
  syntax IOError ::= "#ELOOP" [klabel(#ELOOP) symbol()]
  syntax IOError ::= "#EISDIR" [klabel(#EISDIR) symbol()]
  syntax IOError ::= "#EISCONN" [klabel(#EISCONN) symbol()]
  syntax IOError ::= "#EIO" [klabel(#EIO) symbol()]
  syntax IOError ::= "#EINVAL" [klabel(#EINVAL) symbol()]
  syntax IOError ::= "#EINTR" [klabel(#EINTR) symbol()]
  syntax IOError ::= "#EINPROGRESS" [klabel(#EINPROGRESS) symbol()]
  syntax IOError ::= "#EHOSTUNREACH" [klabel(#EHOSTUNREACH) symbol()]
  syntax IOError ::= "#EHOSTDOWN" [klabel(#EHOSTDOWN) symbol()]
  syntax IOError ::= "#EFBIG" [klabel(#EFBIG) symbol()]
  syntax IOError ::= "#EFAULT" [klabel(#EFAULT) symbol()]
  syntax IOError ::= "#EEXIST" [klabel(#EEXIST) symbol()]
  syntax IOError ::= "#EDOM" [klabel(#EDOM) symbol()]
  syntax IOError ::= "#EDESTADDRREQ" [klabel(#EDESTADDRREQ) symbol()]
  syntax IOError ::= "#EDEADLK" [klabel(#EDEADLK) symbol()]
  syntax IOError ::= "#ECONNRESET" [klabel(#ECONNRESET) symbol()]
  syntax IOError ::= "#ECONNREFUSED" [klabel(#ECONNREFUSED) symbol()]
  syntax IOError ::= "#ECONNABORTED" [klabel(#ECONNABORTED) symbol()]
  syntax IOError ::= "#ECHILD" [klabel(#ECHILD) symbol()]
  syntax IOError ::= "#EBUSY" [klabel(#EBUSY) symbol()]
  syntax IOError ::= "#EBADF" [klabel(#EBADF) symbol()]
  syntax IOError ::= "#EALREADY" [klabel(#EALREADY) symbol()]
  syntax IOError ::= "#EAGAIN" [klabel(#EAGAIN) symbol()]
  syntax IOError ::= "#EAFNOSUPPORT" [klabel(#EAFNOSUPPORT) symbol()]
  syntax IOError ::= "#EADDRNOTAVAIL" [klabel(#EADDRNOTAVAIL) symbol()]
  syntax IOError ::= "#EADDRINUSE" [klabel(#EADDRINUSE) symbol()]
  syntax IOError ::= "#EACCES" [klabel(#EACCES) symbol()]
  syntax IOError ::= "#E2BIG" [klabel(#E2BIG) symbol()]
endmodule


module K-REFLECTION [org.kframework.attributes.Location(Location(872,1,893,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING
  imports K-REFLECTION-SYMBOLIC
  imports K-REFLECTION$SYNTAX
  imports BASIC-K
  ModuleComment( undefined,[org.kframework.attributes.Location(Location(885,3,885,15)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( meaningful only for the purposes of compilation to a binary, otherwise,[org.kframework.attributes.Location(Location(884,3,884,76)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Takes as input a string and returns a K term,[org.kframework.attributes.Location(Location(888,3,888,50)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module K-REFLECTION$SYNTAX [org.kframework.attributes.Location(Location(872,1,893,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING$SYNTAX
  imports K-REFLECTION-SYMBOLIC$SYNTAX
  imports BASIC-K$SYNTAX
  syntax {Sort} Sort ::= "#parseKORE" "(" String ")" [function() hook(KREFLECTION.parseKORE) klabel(#parseKORE)]
  syntax {Sort} Sort ::= "#parseKAST" "(" String ")" [function() hook(KREFLECTION.parseKAST) klabel(#parseKAST)]
  syntax String ::= "#sort" "(" K ")" [function() hook(KREFLECTION.sort) klabel(#sort)]
  syntax String ::= "#getenv" "(" String ")" [function() hook(KREFLECTION.getenv) impure() klabel(#getenv)]
  syntax List ::= "#argv" "(" ")" [function() hook(KREFLECTION.argv) klabel(#argv)]
  syntax KItem ::= "getKLabel" "(" K ")" [function() hook(KREFLECTION.getKLabel) klabel(getKLabel)]
  syntax KItem ::= "#fresh" "(" String ")" [function() hook(KREFLECTION.fresh) impure() klabel(#fresh)]
  syntax K ::= "#configuration" [function() hook(KREFLECTION.configuration) impure()]
  syntax IOError ::= "#noParse" "(" String ")" [klabel(#noParse) symbol()]
endmodule


module K-REFLECTION-SYMBOLIC [org.kframework.attributes.Location(Location(895,1,905,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) symbolic()]
  imports STRING
  imports K-REFLECTION-SYMBOLIC$SYNTAX
  imports BASIC-K
  ModuleComment( return true if no variable nor unresolved function appears in any subterm,[org.kframework.attributes.Location(Location(902,3,902,79)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( return empty string if the term has no klabel,[org.kframework.attributes.Location(Location(899,3,899,51)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module K-REFLECTION-SYMBOLIC$SYNTAX [org.kframework.attributes.Location(Location(895,1,905,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) symbolic()]
  imports STRING$SYNTAX
  imports BASIC-K$SYNTAX
  syntax String ::= "#getKLabelString" "(" K ")" [function() hook(KREFLECTION.getKLabelString) klabel(#getKLabelString)]
  syntax Bool ::= "#isVariable" "(" K ")" [function() hook(KREFLECTION.isVariable) klabel(#isVariable)]
  syntax Bool ::= "#isConcrete" "(" K ")" [function() hook(KREFLECTION.isConcrete) klabel(#isConcrete)]
endmodule


module K-SORT-LATTICE [org.kframework.attributes.Location(Location(175,1,178,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports K-TOP-SORT
  imports K-SORT-LATTICE$SYNTAX
  imports K-BOTTOM-SORT
endmodule


module K-SORT-LATTICE$SYNTAX [org.kframework.attributes.Location(Location(175,1,178,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports K-TOP-SORT$SYNTAX
  imports K-BOTTOM-SORT$SYNTAX
endmodule


module K-TERM [org.kframework.attributes.Location(Location(277,1,283,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports RECORD-PRODUCTIONS
  imports KSEQ-SYMBOLIC
  imports K-TERM$SYNTAX
  imports K-SORT-LATTICE
  imports AUTO-FOLLOW
  imports AUTO-CASTS
endmodule


module K-TERM$SYNTAX [org.kframework.attributes.Location(Location(277,1,283,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports RECORD-PRODUCTIONS$SYNTAX
  imports KSEQ-SYMBOLIC$SYNTAX
  imports K-SORT-LATTICE$SYNTAX
  imports AUTO-FOLLOW$SYNTAX
  imports AUTO-CASTS$SYNTAX
endmodule


module K-TOP-SORT [org.kframework.attributes.Location(Location(163,1,167,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-KBOTT
  imports K-TOP-SORT$SYNTAX
endmodule


module K-TOP-SORT$SYNTAX [org.kframework.attributes.Location(Location(163,1,167,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-KBOTT$SYNTAX
  syntax {Sort} KItem ::= Sort
  syntax KItem ::= KBott
endmodule


module KAST [org.kframework.attributes.Location(Location(30,1,50,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-KBOTT
  imports KSTRING
  imports KAST$SYNTAX
  imports BUILTIN-ID-TOKENS
  imports BASIC-K
  ModuleComment( something that doesn't collide with meta-variables,[org.kframework.attributes.Location(Location(44,24,44,77)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
endmodule


module KAST$SYNTAX [org.kframework.attributes.Location(Location(30,1,50,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-KBOTT$SYNTAX
  imports KSTRING$SYNTAX
  imports BUILTIN-ID-TOKENS$SYNTAX
  imports BASIC-K$SYNTAX
  syntax associativity left #KList
  syntax KList ::= KList "," KList [assoc() klabel(#KList) left() prefer() symbol() unit(#EmptyKList)]
  syntax KList ::= K
  syntax KList ::= ".KList" [klabel(#EmptyKList) symbol()]
  syntax KList ::= ".::KList" [klabel(#EmptyKList) symbol()]
  syntax KLabel ::= r"`(\\\\`|\\\\\\\\|[^`\\\\\\n\\r])+`" [token()]
  syntax KLabel ::= r"(?<![a-zA-Z0-9])[#a-z][a-zA-Z0-9]*" [prec(1) token()]
  syntax KLabel ::= #LowerId [token()]
  syntax KItem ::= KBott
  syntax KBott ::= KLabel "(" KList ")" [klabel(#KApply) symbol()]
  syntax KBott ::= "#token" "(" KString "," KString ")" [klabel(#KToken) symbol()]
  syntax KBott ::= "#klabel" "(" KLabel ")" [klabel(#WrappedKLabel) symbol()]
endmodule


module KCELLS [org.kframework.attributes.Location(Location(106,1,119,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports KCELLS$SYNTAX
  imports KAST
endmodule


module KCELLS$SYNTAX [org.kframework.attributes.Location(Location(106,1,119,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports KAST$SYNTAX
  syntax associativity non-assoc #withConfig
  syntax associativity left #cells
  syntax KItem ::= Bag
  syntax Cell [org.kframework.attributes.Location(Location(109,3,109,13)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  syntax Bag ::= KBott
  syntax Bag ::= Cell
  syntax Bag ::= Bag Bag [assoc() klabel(#cells) left() symbol() unit(#cells)]
  syntax Bag ::= ".Bag" [klabel(#cells) symbol()]
  syntax Bag ::= ".::Bag" [klabel(#cells) symbol()]
  syntax Bag ::= "(" Bag ")" [bracket()]
  syntax #RuleBody ::= "[" "[" K "]" "]" Bag [avoid() klabel(#withConfig) symbol()]
endmodule


module KSEQ [org.kframework.attributes.Location(Location(54,1,63,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports KSEQ$SYNTAX
  imports KAST
  imports K-TOP-SORT
endmodule


module KSEQ$SYNTAX [org.kframework.attributes.Location(Location(54,1,63,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports KAST$SYNTAX
  imports K-TOP-SORT$SYNTAX
  syntax {Sort} Sort ::= "(" Sort ")" [bracket()]
  syntax associativity left #KSequence
  syntax K ::= K "~>" K [assoc() klabel(#KSequence) left() symbol() unit(#EmptyK)]
  syntax K ::= ".K" [klabel(#EmptyK) symbol() unparseAvoid()]
  syntax K ::= ".::K" [klabel(#EmptyK) symbol() unparseAvoid()]
  syntax K ::= "." [klabel(#EmptyK) symbol()]
endmodule


module KSEQ-SYMBOLIC [org.kframework.attributes.Location(Location(94,1,104,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports ML-SYNTAX
  imports KSEQ-SYMBOLIC$SYNTAX
  imports KSEQ
endmodule


module KSEQ-SYMBOLIC$SYNTAX [org.kframework.attributes.Location(Location(94,1,104,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports ML-SYNTAX$SYNTAX
  imports KSEQ$SYNTAX
  syntax KLabel ::= #KVariable
  syntax KConfigVar ::= r"(?<![A-Za-z0-9_\\$!\\?@])(\\$)([A-Z][A-Za-z0-9'_]*)" [token()]
  syntax KBott ::= KConfigVar
  syntax KBott ::= #KVariable
  syntax #KVariable ::= r"(?<![A-Za-z0-9_\\$!\\?@])(\\!|\\?|@)?([A-Z][A-Za-z0-9'_]*|_)" [prec(1) token()]
  syntax #KVariable ::= #UpperId [token()]
endmodule


module KSTRING [org.kframework.attributes.Location(Location(15,1,18,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports KSTRING$SYNTAX
  ModuleComment( optionally qualified strings, like in Scala "abc", i"abc", r"a*bc", etc.,[org.kframework.attributes.Location(Location(17,3,17,78)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
endmodule


module KSTRING$SYNTAX [org.kframework.attributes.Location(Location(15,1,18,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  syntax KString ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token()]
endmodule


module LIST [org.kframework.attributes.Location(Location(228,1,293,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports LIST$SYNTAX
  imports INT-SYNTAX
  imports BASIC-K
  ModuleComment(| ".",[org.kframework.attributes.Location(Location(268,17,268,24)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(TODO(AndreiS): move the paragraph below,[org.kframework.attributes.Location(Location(244,3,244,44)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( \section{User-Defined Lists} It is very common in \K to define a shorthand
   for lists of user-defined sorts. \K 's builtin way of doing this is to use
   List\{KItem,"Separator"\}, where "Separator" is any valid character or
   sequence of characters used to separate distinct elements.
   For example, after defining \\
   syntax KItem ::= Elt\\
   a user could then define
   syntax Elts ::= List\{Elt,","\} \\
   which would be a comma-separated list whose elements are all of sort Elt. A
   user could just as well define \\
   syntax Elts ::= List\{Elt,"and"\} \\
   which would be a list containing elements of sort Elt that are separated with
   the word "and". If only one argument is given, the separator is asumed to be
   commas. So, \\
   syntax Elts = List\{Elt\} \\
   would define a comma-separated list containing elements of sort Elt.
  ,[org.kframework.attributes.Location(Location(245,3,261,4)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( \section{Description} \K lists are ordered collections that may contain
   duplicate elements. These behave more like lists in functional programming
   languages than arrays in imperative programming languages; there's no
   numerical indexing, but instead specific elements are refered to using the
   Mylist,Mylist construct in combination with the MyListItem construct. It's
   worth noting that \K lists aren't exactly like lists in functional languages;
   they're associative, which means that it's easy to access elements at both
   ends of the lists and concatenate them. For example, L:Mylist,E accesses
   element E at the end of a list. ,[org.kframework.attributes.Location(Location(234,3,242,37)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Remove elements from the beginning and the end of the List. ,[org.kframework.attributes.Location(Location(285,3,285,68)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Get the list length ,[org.kframework.attributes.Location(Location(291,3,291,28)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Get an element form the List by index. Positive indices mean from the
   beginning (0 is the first element), and negative indices mean from the end
   (-1 is the last element). ,[org.kframework.attributes.Location(Location(272,3,274,31)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Construct an empty List: ,[org.kframework.attributes.Location(Location(266,3,266,33)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Construct a singleton List (a list with only  one element) ,[org.kframework.attributes.Location(Location(269,3,269,67)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Construct a new List as the concatenation of two Lists. This is similar to
   the append "@" operation in many functional programming languages. ,[org.kframework.attributes.Location(Location(263,3,264,72)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Check element membership in the given list ,[org.kframework.attributes.Location(Location(288,3,288,51)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module LIST$SYNTAX [org.kframework.attributes.Location(Location(228,1,293,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports INT-SYNTAX$SYNTAX
  imports BASIC-K$SYNTAX
  syntax associativity left _List_
  syntax List [hook(LIST.List) org.kframework.attributes.Location(Location(232,3,232,31)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax List ::= List List [assoc() element(ListItem) format(%1%n%2) function() functional() hook(LIST.concat) klabel(_List_) left() smtlib(smt_seq_concat) symbol() unit(.List)]
  syntax List ::= List "[" Int "<-" KItem "]" [function() hook(LIST.update) klabel(List:set)]
  syntax List ::= "updateList" "(" List "," Int "," List ")" [function() hook(LIST.updateAll) klabel(updateList)]
  syntax List ::= "range" "(" List "," Int "," Int ")" [function() hook(LIST.range) klabel(List:range) symbol()]
  syntax List ::= "makeList" "(" Int "," KItem ")" [function() hook(LIST.make) klabel(makeList)]
  syntax List ::= "fillList" "(" List "," Int "," Int "," KItem ")" [function() hook(LIST.fill) klabel(fillList)]
  syntax List ::= "ListItem" "(" KItem ")" [function() functional() hook(LIST.element) klabel(ListItem) smtlib(smt_seq_elem) symbol()]
  syntax List ::= ".List" [function() functional() hook(LIST.unit) klabel(.List) latex(\dotCt{List}) smtlib(smt_seq_nil) symbol()]
  syntax KItem ::= List "[" Int "]" [function() hook(LIST.get) klabel(List:get) symbol()]
  syntax Int ::= "size" "(" List ")" [function() functional() hook(LIST.size) klabel(sizeList) smtlib(smt_seq_len)]
  syntax Bool ::= KItem "in" List [function() functional() hook(LIST.in) klabel(_inList_)]
endmodule


module MAA [org.kframework.attributes.Location(Location(3,1,66,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/maa.k))]
  imports MAA$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("maa","StepCommand")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),extractMInt(mi(#token("64","Int"),`_+Int_`(uvalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))),`_*Int_`(uvalueMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),uvalueMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))))),#token("32","Int"),#token("64","Int")))),#noDots(.KList))) requires `_andBool_`(`_andBool_`(`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList)),`_>=Int_`(#SemanticCastToInt(I),#token("0","Int"))),`_<=Int_`(#SemanticCastToInt(I),#token("3","Int"))) ensures #token("true","Bool") [contentStartColumn(10) contentStartLine(21) org.kframework.attributes.Location(Location(21,10,28,67)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/maa.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("maa","StepCommand")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),extractMInt(mi(#token("64","Int"),`_+Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int"))),`_*Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),`_/Int_`(#SemanticCastToInt(I),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(#token("8","Int"),`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I),#token("4","Int")))),`_*Int_`(#token("8","Int"),`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I),#token("4","Int")))))),uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),`_/Int_`(#SemanticCastToInt(I),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(#token("8","Int"),`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I),#token("4","Int")))),`_*Int_`(#token("8","Int"),`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I),#token("4","Int"))))))))),#token("32","Int"),#token("64","Int")))),#noDots(.KList))) requires `_andBool_`(`_andBool_`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),`_>=Int_`(#SemanticCastToInt(I),#token("0","Int"))),`_<=Int_`(#SemanticCastToInt(I),#token("15","Int"))) ensures #token("true","Bool") [contentStartColumn(10) contentStartLine(57) org.kframework.attributes.Location(Location(57,10,64,67)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/maa.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("maa","StepCommand")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),extractMInt(mi(#token("64","Int"),`_+Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int"))),`_*Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),`_/Int_`(#SemanticCastToInt(I),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(#token("16","Int"),`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I),#token("2","Int")))),`_*Int_`(#token("16","Int"),`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I),#token("2","Int")))))),uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),`_/Int_`(#SemanticCastToInt(I),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(#token("16","Int"),`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I),#token("2","Int")))),`_*Int_`(#token("16","Int"),`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I),#token("2","Int"))))))))),#token("32","Int"),#token("64","Int")))),#noDots(.KList))) requires `_andBool_`(`_andBool_`(`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList)),`_>=Int_`(#SemanticCastToInt(I),#token("0","Int"))),`_<=Int_`(#SemanticCastToInt(I),#token("7","Int"))) ensures #token("true","Bool") [contentStartColumn(10) contentStartLine(39) org.kframework.attributes.Location(Location(39,10,46,67)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/maa.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("maa","StepCommand")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),extractMInt(mi(#token("64","Int"),`_+Int_`(svalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))),`_*Int_`(svalueMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),svalueMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))))),#token("32","Int"),#token("64","Int")))),#noDots(.KList))) requires `_andBool_`(`_andBool_`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),`_>=Int_`(#SemanticCastToInt(I),#token("0","Int"))),`_<=Int_`(#SemanticCastToInt(I),#token("3","Int"))) ensures #token("true","Bool") [contentStartColumn(10) contentStartLine(13) org.kframework.attributes.Location(Location(13,10,19,67)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/maa.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("maa","StepCommand")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),extractMInt(mi(#token("64","Int"),`_+Int_`(svalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int"))),`_*Int_`(svalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),`_/Int_`(#SemanticCastToInt(I),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(#token("8","Int"),`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I),#token("4","Int")))),`_*Int_`(#token("8","Int"),`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I),#token("4","Int")))))),svalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),`_/Int_`(#SemanticCastToInt(I),#token("4","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(#token("8","Int"),`_-Int_`(#token("3","Int"),`_%Int_`(#SemanticCastToInt(I),#token("4","Int")))),`_*Int_`(#token("8","Int"),`_-Int_`(#token("4","Int"),`_%Int_`(#SemanticCastToInt(I),#token("4","Int"))))))))),#token("32","Int"),#token("64","Int")))),#noDots(.KList))) requires `_andBool_`(`_andBool_`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),`_>=Int_`(#SemanticCastToInt(I),#token("0","Int"))),`_<=Int_`(#SemanticCastToInt(I),#token("15","Int"))) ensures #token("true","Bool") [contentStartColumn(10) contentStartLine(48) org.kframework.attributes.Location(Location(48,10,55,67)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/maa.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("maa","StepCommand")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),extractMInt(mi(#token("64","Int"),`_+Int_`(svalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int"))),`_*Int_`(svalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),`_/Int_`(#SemanticCastToInt(I),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(#token("16","Int"),`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I),#token("2","Int")))),`_*Int_`(#token("16","Int"),`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I),#token("2","Int")))))),svalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),`_/Int_`(#SemanticCastToInt(I),#token("2","Int")),#SemanticCastToMap(RSMap)),`_*Int_`(#token("16","Int"),`_-Int_`(#token("1","Int"),`_%Int_`(#SemanticCastToInt(I),#token("2","Int")))),`_*Int_`(#token("16","Int"),`_-Int_`(#token("2","Int"),`_%Int_`(#SemanticCastToInt(I),#token("2","Int"))))))))),#token("32","Int"),#token("64","Int")))),#noDots(.KList))) requires `_andBool_`(`_andBool_`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),`_>=Int_`(#SemanticCastToInt(I),#token("0","Int"))),`_<=Int_`(#SemanticCastToInt(I),#token("7","Int"))) ensures #token("true","Bool") [contentStartColumn(10) contentStartLine(30) org.kframework.attributes.Location(Location(30,10,37,67)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/maa.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  ModuleComment(
        for inner production, multiplication and add.
        I point to the index of element in vector register.
        first multiply two elements and then compute the sum of prod and val in Rd.
    ,[org.kframework.attributes.Location(Location(7,5,11,6)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/maa.k))])
endmodule


module MAA$SYNTAX [org.kframework.attributes.Location(Location(3,1,66,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/maa.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module MAP [org.kframework.attributes.Location(Location(92,1,156,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports SET
  imports MAP$SYNTAX
  imports LIST
  ModuleComment(| "."                            [function, hook(MAP.unit)],[org.kframework.attributes.Location(Location(108,16,108,77)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(\section{Description} The Map represents a generalized associative array.
   Each key can be paired with an arbitrary value, and can be used to reference
   its associated value. Multiple bindings for the same key are not allowed. ,[org.kframework.attributes.Location(Location(98,3,100,79)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( breaks klabel uniqueness,[org.kframework.attributes.Location(Location(107,16,107,43)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Update the first map by adding all key/value pairs in the second map. If a
   key in the first map exists also in the second map, its associated value will
   be overwritten by the value from the second map. ,[org.kframework.attributes.Location(Location(131,3,133,54)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Update the Map by removing all key/value pairs with the key in the Set. ,[org.kframework.attributes.Location(Location(136,3,136,80)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Update a Map in form of  of keys and values: ,[org.kframework.attributes.Location(Location(121,3,121,53)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Retrieve the value associated with the given key ,[org.kframework.attributes.Location(Location(116,3,116,57)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Remove key/value pair associated with the key from map? ,[org.kframework.attributes.Location(Location(124,3,124,64)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Get the difference of two maps interpreted as sets of entries
   ($M_1 \setminus M2$) ,[org.kframework.attributes.Location(Location(127,3,128,26)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Get the Map size (number of key/value pairs) ,[org.kframework.attributes.Location(Location(148,3,148,53)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Get an arbitrarily chosen key of the Map  ,[org.kframework.attributes.Location(Location(154,3,154,50)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Get a Set consisting of all keys in the Map:,[org.kframework.attributes.Location(Location(139,3,139,52)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Get a List consisting of all values in the Map: ,[org.kframework.attributes.Location(Location(145,3,145,56)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Construct a singleton Map (a Map with only one key/value pair). The key
   is on the left and the value is on the right ,[org.kframework.attributes.Location(Location(109,3,110,50)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Construct a new Map consisting of key/value pairs of two Maps (the keys of
   the two Maps are assumed disjoint) ,[org.kframework.attributes.Location(Location(102,3,103,40)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Check map inclusion ,[org.kframework.attributes.Location(Location(151,3,151,28)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(  Construct an empty Map ,[org.kframework.attributes.Location(Location(105,3,105,32)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module MAP$SYNTAX [org.kframework.attributes.Location(Location(92,1,156,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports SET$SYNTAX
  imports LIST$SYNTAX
  syntax priority _|->_ > .Map _Map_
  syntax associativity non-assoc _|->_
  syntax associativity left _Map_
  syntax Set ::= "keys" "(" Map ")" [function() functional() hook(MAP.keys) klabel(keys)]
  syntax Map [hook(MAP.Map) org.kframework.attributes.Location(Location(96,3,96,28)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax Map ::= Map Map [assoc() comm() element(_|->_) format(%1%n%2) function() hook(MAP.concat) index(0) klabel(_Map_) left() symbol() unit(.Map)]
  syntax Map ::= Map "[" KItem "<-" KItem "]" [function() functional() hook(MAP.update) klabel(Map:update) prefer() symbol()]
  syntax Map ::= Map "[" KItem "<-" "undef" "]" [function() functional() hook(MAP.remove) klabel(_[_<-undef]) symbol()]
  syntax Map ::= Map "-Map" Map [function() functional() hook(MAP.difference) latex({#1}-_{\it Map}{#2})]
  syntax Map ::= KItem "|->" KItem [function() functional() hook(MAP.element) klabel(_|->_) latex({#1}\mapsto{#2}) symbol()]
  syntax Map ::= "updateMap" "(" Map "," Map ")" [function() functional() hook(MAP.updateAll) klabel(updateMap)]
  syntax Map ::= "removeAll" "(" Map "," Set ")" [function() functional() hook(MAP.removeAll) klabel(removeAll)]
  syntax Map ::= ".Map" [function() functional() hook(MAP.unit) klabel(.Map) latex(\dotCt{Map}) symbol()]
  syntax List ::= "values" "(" Map ")" [function() hook(MAP.values) klabel(values)]
  syntax List ::= "keys_list" "(" Map ")" [function() hook(MAP.keys_list)]
  syntax KItem ::= Map "[" KItem "]" [function() hook(MAP.lookup) klabel(Map:lookup) symbol()]
  syntax KItem ::= Map "[" KItem "]" "orDefault" KItem [function() functional() hook(MAP.lookupOrDefault) klabel(Map:lookupOrDefault)]
  syntax KItem ::= "choice" "(" Map ")" [function() hook(MAP.choice) klabel(Map:choice)]
  syntax Int ::= "size" "(" Map ")" [function() functional() hook(MAP.size) klabel(sizeMap)]
  syntax Bool ::= Map "<=Map" Map [function() functional() hook(MAP.inclusion)]
  syntax Bool ::= KItem "in_keys" "(" Map ")" [function() functional() hook(MAP.in_keys)]
endmodule


module MAP-SYMBOLIC$SYNTAX [org.kframework.attributes.Location(Location(158,1,182,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) symbolic()]
  imports MAP$SYNTAX
  imports K-EQUAL$SYNTAX
endmodule


module MAX-FOR-TEST [org.kframework.attributes.Location(Location(3,1,15,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/max-for-test.k))]
  imports MAX-FOR-TEST$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("MAX","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,7,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/max-for-test.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("MAX","Opcode")),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rn),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rm),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>=Int_`(uvalueMInt(getParentValue(#SemanticCastToR32(Rn),#SemanticCastToMap(RSMap))),uvalueMInt(getParentValue(#SemanticCastToR32(Rm),#SemanticCastToMap(RSMap)))),getParentValue(#SemanticCastToR32(Rn),#SemanticCastToMap(RSMap)),getParentValue(#SemanticCastToR32(Rm),#SemanticCastToMap(RSMap))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(9) org.kframework.attributes.Location(Location(9,8,14,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/max-for-test.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( mi(32, maxInt(uvalueMInt(getParentValue(Rn, RSMap)), uvalueMInt(getParentValue(Rm, RSMap)))) ,[org.kframework.attributes.Location(Location(12,34,12,131)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/max-for-test.k))])
endmodule


module MAX-FOR-TEST$SYNTAX [org.kframework.attributes.Location(Location(3,1,15,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/max-for-test.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module MINT [org.kframework.attributes.Location(Location(1209,1,1401,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports MINT$SYNTAX
  imports LIST
  imports K-EQUAL
  imports INT
  rule zeroMInt(#SemanticCastToMInt(MI))=>eqMInt(#SemanticCastToMInt(MI),xorMInt(#SemanticCastToMInt(MI),#SemanticCastToMInt(MI))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1383) org.kframework.attributes.Location(Location(1383,8,1383,56)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule uoverflowMInt(#SemanticCastToInt(N),#SemanticCastToInt(I))=>`_orBool_`(`_<Int_`(#SemanticCastToInt(I),uminMInt(#SemanticCastToInt(N))),`_>Int_`(#SemanticCastToInt(I),umaxMInt(#SemanticCastToInt(N)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(5) contentStartLine(1262) org.kframework.attributes.Location(Location(1262,5,1264,49)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule uminMInt(#SemanticCastToInt(_))=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1248) org.kframework.attributes.Location(Location(1248,8,1248,28)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule umaxMInt(#SemanticCastToInt(N))=>`_-Int_`(`_<<Int_`(#token("1","Int"),#SemanticCastToInt(N)),#token("1","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1249) org.kframework.attributes.Location(Location(1249,8,1249,45)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule soverflowMInt(#SemanticCastToInt(N),#SemanticCastToInt(I))=>`_orBool_`(`_<Int_`(#SemanticCastToInt(I),sminMInt(#SemanticCastToInt(N))),`_>Int_`(#SemanticCastToInt(I),smaxMInt(#SemanticCastToInt(N)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(5) contentStartLine(1258) org.kframework.attributes.Location(Location(1258,5,1260,49)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule sminMInt(#SemanticCastToInt(N))=>`_-Int_`(#token("0","Int"),`_<<Int_`(#token("1","Int"),`_-Int_`(#SemanticCastToInt(N),#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1246) org.kframework.attributes.Location(Location(1246,8,1246,54)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule smaxMInt(#SemanticCastToInt(N))=>`_-Int_`(`_<<Int_`(#token("1","Int"),`_-Int_`(#SemanticCastToInt(N),#token("1","Int"))),#token("1","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1247) org.kframework.attributes.Location(Location(1247,8,1247,54)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule overflowMInt(`_List_`(`ListItem`(#SemanticCastToMInt(_)),`ListItem`(#SemanticCastToBool(B))))=>#SemanticCastToBool(B) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1276) org.kframework.attributes.Location(Location(1276,8,1276,60)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule negMInt(#SemanticCastToMInt(MI))=>xorMInt(#SemanticCastToMInt(MI),mi(bitwidthMInt(#SemanticCastToMInt(MI)),#token("-1","Int"))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1334) org.kframework.attributes.Location(Location(1334,8,1334,65)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule miMInt(`_List_`(`ListItem`(#SemanticCastToMInt(MI)),`ListItem`(#SemanticCastToBool(_))))=>#SemanticCastToMInt(MI) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1274) org.kframework.attributes.Location(Location(1274,8,1274,56)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule mIntOfDigits(`_List_`(`_List_`(`ListItem`(#SemanticCastToMInt(MI1)),`ListItem`(#SemanticCastToMInt(MI2))),#SemanticCastToList(L)))=>concatenateMInt(#SemanticCastToMInt(MI1),mIntOfDigits(`_List_`(`ListItem`(#SemanticCastToMInt(MI2)),#SemanticCastToList(L)))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(5) contentStartLine(1397) org.kframework.attributes.Location(Location(1397,5,1399,56)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule mIntOfDigits(`ListItem`(#SemanticCastToMInt(MI)))=>#SemanticCastToMInt(MI) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1400) org.kframework.attributes.Location(Location(1400,8,1400,45)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule digitsOfMInt(#SemanticCastToMInt(_),#SemanticCastToInt(_),#token("0","Int"))=>`.List`(.KList) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1394) org.kframework.attributes.Location(Location(1394,8,1394,47)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule digitsOfMInt(#SemanticCastToMInt(MI),#SemanticCastToInt(N),#SemanticCastToInt(M))=>`_List_`(digitsOfMInt(#SemanticCastToMInt(MI),#SemanticCastToInt(N),`_-Int_`(#SemanticCastToInt(M),#token("1","Int"))),`ListItem`(extractMInt(#SemanticCastToMInt(MI),`_*Int_`(#SemanticCastToInt(N),`_-Int_`(#SemanticCastToInt(M),#token("1","Int"))),`_*Int_`(#SemanticCastToInt(N),#SemanticCastToInt(M))))) requires `_>Int_`(#SemanticCastToInt(M),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(5) contentStartLine(1389) org.kframework.attributes.Location(Location(1389,5,1393,16)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "when" K [klabel(#ruleRequires) symbol()])]
  ModuleComment(\section{Description} The MInt implements machine integers of arbitrary
   * bit width represented in 2's complement. ,[org.kframework.attributes.Location(Location(1216,3,1217,48)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( TODO(AndreiS): change,[org.kframework.attributes.Location(Location(1382,3,1382,27)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Machine integer of bit width and value. ,[org.kframework.attributes.Location(Location(1219,3,1219,48)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Function returning the bit width of this machine integer. ,[org.kframework.attributes.Location(Location(1222,3,1222,66)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Comparison operations ,[org.kframework.attributes.Location(Location(1336,3,1336,30)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Checks whether a machine integer is zero ,[org.kframework.attributes.Location(Location(1235,3,1235,49)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Bitwise operations ,[org.kframework.attributes.Location(Location(1328,3,1328,27)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * digitsOfMInt(mInt, digitBitWidth, count)
   *
   * Returns a list of the first digits representing the given machine integer,
   * each digit a machine integer on the given bitwidth. Useful for serializing
   * a integer to a sequence of bytes.
   ,[org.kframework.attributes.Location(Location(1366,3,1372,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Shift operations; the second operand must be non-negative
   *
   * ashrMInt   arithmetic shift: filling with leftmost bit (sign extension)
   * lshrMInt   logical shift: filling with zeros
   ,[org.kframework.attributes.Location(Location(1318,3,1323,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Returns a machine integer with the underlying bits; the bits of the first
   * machine integer concatenated with the bits of the second machine integer.
   * The bits of the first machine integer are on the more significant
   * positions. The resulting bit width is the sum of two inputs' bit widths.
   ,[org.kframework.attributes.Location(Location(1351,3,1356,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Returns a machine integer with the underlying bits of the given
   * machine integer in the given range. The bit on position 0 is the most
   * significant bit.
   ,[org.kframework.attributes.Location(Location(1359,3,1363,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Returns a machine integer representing the given list of digits. Each digit
   * is represented as a machine integers. The list must be non-empty. Useful
   * for deserializing an integer from a sequence of bytes.
   ,[org.kframework.attributes.Location(Location(1375,3,1379,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Projection functions for results of operations with overflow.
   * miInt(saddMInt(...))         returns the result of the operation (ignoring
   *                              overflow)
   * overflowMInt(saddMInt(...))  returns true if overflow is detected during
   *                              the execution of the operation
   ,[org.kframework.attributes.Location(Location(1266,3,1272,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Functions returning the signed and unsigned interpretations of this
   * machine integers.
   *   svalue  returns an integer between -2^(bitwidth - 1) and
   *           2^(bitwidth - 1) - 1
   *   uvalue  returns an integer between 0 and 2^bitwidth - 1
   ,[org.kframework.attributes.Location(Location(1225,3,1231,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Functions for signed and unsigned minimum and maximum values of a machine
   * integer on a given bit width.
   ,[org.kframework.attributes.Location(Location(1238,3,1241,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Functions checking whether a given integer can be represented on as signed
   * or unsigned on a given bit width without overflow.
   ,[org.kframework.attributes.Location(Location(1251,3,1254,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Division and reminder
   * sdiv/srem  operation interprets operands as signed; undefined if the second
   *            argument is 0; returns a pair of result and overflow flag
   *            represented as a list of 2 elements (overflow happens when the
   *            first operand is the minimum value and the second operand is -1)
   * udiv/urem  operation interprets operands as unsigned; undefined if the
   *            second argument is 0
   ,[org.kframework.attributes.Location(Location(1292,3,1300,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Conversion to and from a list of digits
   ,[org.kframework.attributes.Location(Location(1385,3,1387,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Arithmetic and comparison operations
   *   op   does not interprets the operands as either signed or unsigned
   *   sop  interprets the operands as signed
   *   uop  interprets the operands as unsigned
   ,[org.kframework.attributes.Location(Location(1278,3,1283,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Addition, subtraction, and multiplication are the same for signed and
   * unsigned integers represented in 2's complement
   ,[org.kframework.attributes.Location(Location(1284,3,1287,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
   * Addition, subtraction and multiplication with overflow detection; each
   * operation returns a pair of result and overflow flag represented as a list
   * of 2 elements
   ,[org.kframework.attributes.Location(Location(1306,3,1310,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module MINT$SYNTAX [org.kframework.attributes.Location(Location(1209,1,1401,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports LIST$SYNTAX
  imports K-EQUAL$SYNTAX
  imports INT$SYNTAX
  syntax MInt [hook(MINT.MInt) org.kframework.attributes.Location(Location(1214,3,1214,31)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax MInt ::= "xorMInt" "(" MInt "," MInt ")" [function() hook(MINT.xor) klabel(xorMInt) smt-hook(bvxor)]
  syntax MInt ::= "uremMInt" "(" MInt "," MInt ")" [function() hook(MINT.urem) klabel(uremMInt) smt-hook(bvurem)]
  syntax MInt ::= "udivMInt" "(" MInt "," MInt ")" [function() hook(MINT.udiv) klabel(udivMInt) smt-hook(bvudiv)]
  syntax MInt ::= "subMInt" "(" MInt "," MInt ")" [function() hook(MINT.sub) klabel(subMInt) smt-hook(bvsub)]
  syntax MInt ::= "shlMInt" "(" MInt "," Int ")" [function() hook(MINT.shl) klabel(shlMInt) smt-hook(bvshl)]
  syntax MInt ::= "sMinMInt" "(" MInt "," MInt ")" [function() klabel(sMinMInt) smt-hook((ite (bvslt #1 #2) #1 #2))]
  syntax MInt ::= "sMaxMInt" "(" MInt "," MInt ")" [function() klabel(sMaxMInt) smt-hook((ite (bvslt #1 #2) #2 #1))]
  syntax MInt ::= "orMInt" "(" MInt "," MInt ")" [function() hook(MINT.or) klabel(orMInt) smt-hook(bvor)]
  syntax MInt ::= "negMInt" "(" MInt ")" [function() functional() klabel(negMInt)]
  syntax MInt ::= "mulMInt" "(" MInt "," MInt ")" [function() hook(MINT.mul) klabel(mulMInt) smt-hook(bvmul)]
  syntax MInt ::= "miMInt" "(" List ")" [function() klabel(miMInt)]
  syntax MInt ::= "mi" "(" Int "," Int ")" [function() hook(MINT.constructor) klabel(mi)]
  syntax MInt ::= "mIntOfDigits" "(" List ")" [function() hook(MINT.fromDigits) klabel(mIntOfDigits)]
  syntax MInt ::= "lshrMInt" "(" MInt "," Int ")" [function() hook(MINT.lshr) klabel(lshrMInt) smt-hook(bvlshr)]
  syntax MInt ::= "extractMInt" "(" MInt "," Int "," Int ")" [function() hook(MINT.extract) klabel(extractMInt) smt-hook(extract)]
  syntax MInt ::= "concatenateMInt" "(" MInt "," MInt ")" [function() hook(MINT.concatenate) klabel(concatenateMInt) smtlib((concat #2 #1))]
  syntax MInt ::= "ashrMInt" "(" MInt "," Int ")" [function() hook(MINT.ashr) klabel(ashrMInt)]
  syntax MInt ::= "andMInt" "(" MInt "," MInt ")" [function() hook(MINT.and) klabel(andMInt) smt-hook(bvand)]
  syntax MInt ::= "addMInt" "(" MInt "," MInt ")" [function() hook(MINT.add) klabel(addMInt) smt-hook(bvadd)]
  syntax List ::= "usubMInt" "(" MInt "," MInt ")" [function() hook(MINT.usub) klabel(usubMInt)]
  syntax List ::= "umulMInt" "(" MInt "," MInt ")" [function() hook(MINT.umul) klabel(umulMInt)]
  syntax List ::= "uaddMInt" "(" MInt "," MInt ")" [function() hook(MINT.uadd) klabel(uaddMInt)]
  syntax List ::= "ssubMInt" "(" MInt "," MInt ")" [function() hook(MINT.ssub) klabel(ssubMInt)]
  syntax List ::= "sremMInt" "(" MInt "," MInt ")" [function() hook(MINT.srem) klabel(sremMInt)]
  syntax List ::= "smulMInt" "(" MInt "," MInt ")" [function() hook(MINT.smul) klabel(smulMInt)]
  syntax List ::= "sdivMInt" "(" MInt "," MInt ")" [function() hook(MINT.sdiv) klabel(sdivMInt)]
  syntax List ::= "saddMInt" "(" MInt "," MInt ")" [function() hook(MINT.sadd) klabel(saddMInt)]
  syntax List ::= "digitsOfMInt" "(" MInt "," Int "," Int ")" [function() hook(MINT.toDigits) klabel(digitsOfMInt)]
  syntax Int ::= "uvalueMInt" "(" MInt ")" [function() functional() hook(MINT.uvalue) klabel(uvalueMInt) smt-hook(bv2int)]
  syntax Int ::= "uminMInt" "(" Int ")" [function() klabel(uminMInt)]
  syntax Int ::= "umaxMInt" "(" Int ")" [function() klabel(umaxMInt)]
  syntax Int ::= "svalueMInt" "(" MInt ")" [function() functional() hook(MINT.svalue) klabel(svalueMInt)]
  syntax Int ::= "sminMInt" "(" Int ")" [function() klabel(sminMInt)]
  syntax Int ::= "smaxMInt" "(" Int ")" [function() klabel(smaxMInt)]
  syntax Int ::= "bitwidthMInt" "(" MInt ")" [function() functional() hook(MINT.bitwidth) klabel(bitwidthMInt)]
  syntax Bool ::= "zeroMInt" "(" MInt ")" [function() functional() hook(MINT.zero) klabel(zeroMInt)]
  syntax Bool ::= "uoverflowMInt" "(" Int "," Int ")" [function() klabel(uoverflowMInt)]
  syntax Bool ::= "ultMInt" "(" MInt "," MInt ")" [function() hook(MINT.ult) klabel(ultMInt) smt-hook(bvult)]
  syntax Bool ::= "uleMInt" "(" MInt "," MInt ")" [function() hook(MINT.ule) klabel(uleMInt) smt-hook(bvule)]
  syntax Bool ::= "ugtMInt" "(" MInt "," MInt ")" [function() hook(MINT.ugt) klabel(ugtMInt) smt-hook(bvugt)]
  syntax Bool ::= "ugeMInt" "(" MInt "," MInt ")" [function() hook(MINT.uge) klabel(ugeMInt) smt-hook(bvuge)]
  syntax Bool ::= "soverflowMInt" "(" Int "," Int ")" [function() klabel(soverflowMInt)]
  syntax Bool ::= "sltMInt" "(" MInt "," MInt ")" [function() hook(MINT.slt) klabel(sltMInt) smt-hook(bvslt)]
  syntax Bool ::= "sleMInt" "(" MInt "," MInt ")" [function() hook(MINT.sle) klabel(sleMInt) smt-hook(bvsle)]
  syntax Bool ::= "sgtMInt" "(" MInt "," MInt ")" [function() hook(MINT.sgt) klabel(sgtMInt) smt-hook(bvsgt)]
  syntax Bool ::= "sgeMInt" "(" MInt "," MInt ")" [function() hook(MINT.sge) klabel(sgeMInt) smt-hook(bvsge)]
  syntax Bool ::= "overflowMInt" "(" List ")" [function() klabel(overflowMInt)]
  syntax Bool ::= "neMInt" "(" MInt "," MInt ")" [function() hook(MINT.ne) klabel(neMInt) smt-hook(distinct)]
  syntax Bool ::= "eqMInt" "(" MInt "," MInt ")" [function() hook(MINT.eq) klabel(eqMInt) smt-hook(=)]
endmodule


module MINT-LEMMAS [org.kframework.attributes.Location(Location(3,1,380,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))]
  imports MINT-LEMMAS$SYNTAX
  imports MINT
  imports K-REFLECTION-SYMBOLIC
  imports ARMV8-MINT-SYNTAX
  rule xorMInt(#SemanticCastToMInt(MI),#SemanticCastToMInt(MI))=>mi(bitwidthMInt(#SemanticCastToMInt(MI)),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) lemma() org.kframework.attributes.Location(Location(32,8,32,60)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule uvalueMInt(mi(#SemanticCastToInt(M),#SemanticCastToInt(N)))=>`_+Int_`(`_^Int_`(#token("2","Int"),#SemanticCastToInt(M)),#SemanticCastToInt(N)) requires `_andBool_`(`_<Int_`(#SemanticCastToInt(N),#token("0","Int")),`_>=Int_`(#SemanticCastToInt(N),`_*Int_`(#token("-1","Int"),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int")))))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(286) org.kframework.attributes.Location(Location(286,8,288,49)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule uvalueMInt(mi(#SemanticCastToInt(M),#SemanticCastToInt(N)))=>#SemanticCastToInt(N) requires `_andBool_`(`_>=Int_`(#SemanticCastToInt(N),#token("0","Int")),`_<Int_`(#SemanticCastToInt(N),`_^Int_`(#token("2","Int"),#SemanticCastToInt(M)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(282) org.kframework.attributes.Location(Location(282,8,284,31)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule ultMInt(#SemanticCastToMInt(_),#SemanticCastToMInt(MI))=>#token("false","Bool") requires eqMInt(#SemanticCastToMInt(MI),mi(bitwidthMInt(#SemanticCastToMInt(MI)),#token("0","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(61) org.kframework.attributes.Location(Location(61,8,62,50)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule ultMInt(#SemanticCastToMInt(MI),#SemanticCastToMInt(MI))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(63) org.kframework.attributes.Location(Location(63,8,63,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule svalueMInt(mi(#SemanticCastToInt(M),#SemanticCastToInt(N)))=>`_+Int_`(`_*Int_`(#token("-1","Int"),`_^Int_`(#token("2","Int"),#SemanticCastToInt(M))),#SemanticCastToInt(N)) requires `_andBool_`(`_andBool_`(`_>=Int_`(#SemanticCastToInt(N),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int")))),`_<Int_`(#SemanticCastToInt(N),`_^Int_`(#token("2","Int"),#SemanticCastToInt(M)))),`_>Int_`(#SemanticCastToInt(M),#token("1","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(293) org.kframework.attributes.Location(Location(293,8,296,23)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule svalueMInt(mi(#SemanticCastToInt(M),#SemanticCastToInt(N)))=>#SemanticCastToInt(N) requires `_andBool_`(`_andBool_`(`_>Int_`(#SemanticCastToInt(M),#token("1","Int")),`_>=Int_`(#SemanticCastToInt(N),`_*Int_`(#token("-1","Int"),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int")))))),`_<Int_`(#SemanticCastToInt(N),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int"))))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(298) org.kframework.attributes.Location(Location(298,8,303,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule svalueMInt(mi(#SemanticCastToInt(M),#SemanticCastToInt(N)))=>#SemanticCastToInt(N) requires `_==Int_`(#SemanticCastToInt(M),#token("1","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(305) org.kframework.attributes.Location(Location(305,8,306,23)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule subMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2))=>mi(bitwidthMInt(#SemanticCastToMInt(MI1)),`_-Int_`(svalueMInt(#SemanticCastToMInt(MI1)),svalueMInt(#SemanticCastToMInt(MI2)))) requires `_andBool_`(`_orBool_`(`_andBool_`(`_>=Int_`(svalueMInt(#SemanticCastToMInt(MI1)),#token("0","Int")),`_>=Int_`(svalueMInt(#SemanticCastToMInt(MI2)),#token("0","Int"))),`_andBool_`(`_<Int_`(svalueMInt(#SemanticCastToMInt(MI1)),#token("0","Int")),`_<Int_`(svalueMInt(#SemanticCastToMInt(MI2)),#token("0","Int")))),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),bitwidthMInt(#SemanticCastToMInt(MI2)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(260) org.kframework.attributes.Location(Location(260,8,266,58)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule subMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2))=>mi(bitwidthMInt(#SemanticCastToMInt(MI1)),`_-Int_`(svalueMInt(#SemanticCastToMInt(MI1)),svalueMInt(#SemanticCastToMInt(MI2)))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_orBool_`(`_andBool_`(`_>=Int_`(svalueMInt(#SemanticCastToMInt(MI1)),#token("0","Int")),`_<Int_`(svalueMInt(#SemanticCastToMInt(MI2)),#token("0","Int"))),`_andBool_`(`_<Int_`(svalueMInt(#SemanticCastToMInt(MI1)),#token("0","Int")),`_>=Int_`(svalueMInt(#SemanticCastToMInt(MI2)),#token("0","Int")))),`_>=Int_`(`_-Int_`(svalueMInt(#SemanticCastToMInt(MI1)),svalueMInt(#SemanticCastToMInt(MI2))),`_*Int_`(#token("-1","Int"),`_^Int_`(#token("2","Int"),`_-Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("1","Int")))))),`_<Int_`(`_-Int_`(svalueMInt(#SemanticCastToMInt(MI1)),svalueMInt(#SemanticCastToMInt(MI2))),`_^Int_`(#token("2","Int"),`_-Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("1","Int"))))),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),bitwidthMInt(#SemanticCastToMInt(MI2)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(268) org.kframework.attributes.Location(Location(268,8,276,57)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule subMInt(#SemanticCastToMInt(MI),#SemanticCastToMInt(ZMI))=>#SemanticCastToMInt(MI) requires eqMInt(#SemanticCastToMInt(ZMI),mi(bitwidthMInt(#SemanticCastToMInt(ZMI)),#token("0","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(80) org.kframework.attributes.Location(Location(80,8,81,51)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule subMInt(#SemanticCastToMInt(MI),#SemanticCastToMInt(MI))=>mi(bitwidthMInt(#SemanticCastToMInt(MI)),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(78) lemma() org.kframework.attributes.Location(Location(78,8,78,50)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule shlMInt(#SemanticCastToMInt(MI),#token("0","Int"))=>#SemanticCastToMInt(MI) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(90) lemma() org.kframework.attributes.Location(Location(90,8,90,33)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule orMInt(#SemanticCastToMInt(_),#SemanticCastToMInt(MI_ALL_ONES))=>#SemanticCastToMInt(MI_ALL_ONES) requires `_==Int_`(svalueMInt(#SemanticCastToMInt(MI_ALL_ONES)),#token("-1","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(42) org.kframework.attributes.Location(Location(42,8,43,46)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule orMInt(#SemanticCastToMInt(ZMI),#SemanticCastToMInt(MI))=>#SemanticCastToMInt(MI) requires zeroMInt(#SemanticCastToMInt(ZMI)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(37) org.kframework.attributes.Location(Location(37,8,38,27)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule orMInt(#SemanticCastToMInt(MI_ALL_ONES),#SemanticCastToMInt(_))=>#SemanticCastToMInt(MI_ALL_ONES) requires `_==Int_`(svalueMInt(#SemanticCastToMInt(MI_ALL_ONES)),#token("-1","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(44) org.kframework.attributes.Location(Location(44,8,45,46)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule orMInt(#SemanticCastToMInt(MI),#SemanticCastToMInt(ZMI))=>#SemanticCastToMInt(MI) requires zeroMInt(#SemanticCastToMInt(ZMI)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(39) org.kframework.attributes.Location(Location(39,8,40,27)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule orMInt(#SemanticCastToMInt(MI),#SemanticCastToMInt(MI))=>#SemanticCastToMInt(MI) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(35) lemma() org.kframework.attributes.Location(Location(35,8,35,39)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule mi(#SemanticCastToInt(W),svalueMInt(concatenateMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2))))=>zeroExtend(#SemanticCastToMInt(MI2),#SemanticCastToInt(W)) requires zeroMInt(#SemanticCastToMInt(MI1)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(159) org.kframework.attributes.Location(Location(159,8,160,27)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule lshrMInt(lshrMInt(#SemanticCastToMInt(M),#SemanticCastToInt(I)),#SemanticCastToInt(J))=>lshrMInt(#SemanticCastToMInt(M),`_+Int_`(#SemanticCastToInt(I),#SemanticCastToInt(J))) requires `_andBool_`(`_<=Int_`(#SemanticCastToInt(I),bitwidthMInt(#SemanticCastToMInt(M))),`_<=Int_`(#SemanticCastToInt(J),bitwidthMInt(#SemanticCastToMInt(M)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(374) org.kframework.attributes.Location(Location(374,8,375,69)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule lshrMInt(#SemanticCastToMInt(MI),#token("0","Int"))=>#SemanticCastToMInt(MI) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(92) lemma() org.kframework.attributes.Location(Location(92,8,92,34)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule lshrMInt(#SemanticCastToMInt(M),#SemanticCastToInt(I))=>mi(bitwidthMInt(#SemanticCastToMInt(M)),#token("0","Int")) requires `_==Int_`(#SemanticCastToInt(I),bitwidthMInt(#SemanticCastToMInt(M))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(377) org.kframework.attributes.Location(Location(377,8,378,37)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(xorMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),#SemanticCastToInt(S),#SemanticCastToInt(E))=>xorMInt(extractMInt(#SemanticCastToMInt(MI1),#SemanticCastToInt(S),#SemanticCastToInt(E)),extractMInt(#SemanticCastToMInt(MI2),#SemanticCastToInt(S),#SemanticCastToInt(E))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(176) org.kframework.attributes.Location(Location(176,8,176,104)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule extractMInt(orMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),#SemanticCastToInt(S),#SemanticCastToInt(E))=>orMInt(extractMInt(#SemanticCastToMInt(MI1),#SemanticCastToInt(S),#SemanticCastToInt(E)),extractMInt(#SemanticCastToMInt(MI2),#SemanticCastToInt(S),#SemanticCastToInt(E))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(175) org.kframework.attributes.Location(Location(175,8,175,104)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule extractMInt(mi(#SemanticCastToInt(W),uvalueMInt(#SemanticCastToMInt(MI))),#SemanticCastToInt(S),#SemanticCastToInt(E))=>mi(`_-Int_`(#SemanticCastToInt(E),#SemanticCastToInt(S)),#token("0","Int")) requires `_<=Int_`(#SemanticCastToInt(E),`_-Int_`(#SemanticCastToInt(W),bitwidthMInt(#SemanticCastToMInt(MI)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(149) org.kframework.attributes.Location(Location(149,8,150,45)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(mi(#SemanticCastToInt(W),uvalueMInt(#SemanticCastToMInt(MI))),#SemanticCastToInt(S),#SemanticCastToInt(E))=>extractMInt(#SemanticCastToMInt(MI),`_+Int_`(`_-Int_`(#SemanticCastToInt(S),#SemanticCastToInt(W)),bitwidthMInt(#SemanticCastToMInt(MI))),`_+Int_`(`_-Int_`(#SemanticCastToInt(E),#SemanticCastToInt(W)),bitwidthMInt(#SemanticCastToMInt(MI)))) requires `_>=Int_`(#SemanticCastToInt(S),`_-Int_`(#SemanticCastToInt(W),bitwidthMInt(#SemanticCastToMInt(MI)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(146) org.kframework.attributes.Location(Location(146,8,147,45)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(mi(#SemanticCastToInt(W),uvalueMInt(#SemanticCastToMInt(MI))),#SemanticCastToInt(S),#SemanticCastToInt(E))=>concatenateMInt(mi(`_-Int_`(`_-Int_`(#SemanticCastToInt(W),bitwidthMInt(#SemanticCastToMInt(MI))),#SemanticCastToInt(S)),#token("0","Int")),extractMInt(#SemanticCastToMInt(MI),#token("0","Int"),`_+Int_`(`_-Int_`(#SemanticCastToInt(E),#SemanticCastToInt(W)),bitwidthMInt(#SemanticCastToMInt(MI))))) requires `_andBool_`(`_<Int_`(#SemanticCastToInt(S),`_-Int_`(#SemanticCastToInt(W),bitwidthMInt(#SemanticCastToMInt(MI)))),`_>Int_`(#SemanticCastToInt(E),`_-Int_`(#SemanticCastToInt(W),bitwidthMInt(#SemanticCastToMInt(MI))))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(152) org.kframework.attributes.Location(Location(152,8,154,87)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(mi(#SemanticCastToInt(W),svalueMInt(#SemanticCastToMInt(MI))),#SemanticCastToInt(S),#SemanticCastToInt(E))=>extractMInt(#SemanticCastToMInt(MI),`_+Int_`(`_-Int_`(#SemanticCastToInt(S),#SemanticCastToInt(W)),bitwidthMInt(#SemanticCastToMInt(MI))),`_+Int_`(`_-Int_`(#SemanticCastToInt(E),#SemanticCastToInt(W)),bitwidthMInt(#SemanticCastToMInt(MI)))) requires `_>=Int_`(#SemanticCastToInt(S),`_-Int_`(#SemanticCastToInt(W),bitwidthMInt(#SemanticCastToMInt(MI)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(138) org.kframework.attributes.Location(Location(138,8,139,45)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(mi(#SemanticCastToInt(M),`_+Int_`(#SemanticCastToInt(A),#SemanticCastToInt(B))),#SemanticCastToInt(S),#SemanticCastToInt(E))=>addMInt(extractMInt(mi(#SemanticCastToInt(M),#SemanticCastToInt(A)),#SemanticCastToInt(S),#SemanticCastToInt(E)),extractMInt(mi(#SemanticCastToInt(M),#SemanticCastToInt(B)),#SemanticCastToInt(S),#SemanticCastToInt(E))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(#SemanticCastToInt(M),#SemanticCastToInt(E)),`_>Int_`(#SemanticCastToInt(E),#SemanticCastToInt(S))),`_>=Int_`(#SemanticCastToInt(S),#token("0","Int"))),#isConcrete(#SemanticCastToInt(A))) ensures #token("true","Bool") [contentStartColumn(7) contentStartLine(234) org.kframework.attributes.Location(Location(234,7,237,29)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(extractMInt(#SemanticCastToMInt(MI),#SemanticCastToInt(S1),#SemanticCastToInt(E1)),#SemanticCastToInt(S2),#SemanticCastToInt(E2))=>extractMInt(#SemanticCastToMInt(MI),`_+Int_`(#SemanticCastToInt(S1),#SemanticCastToInt(S2)),`_+Int_`(#SemanticCastToInt(S1),#SemanticCastToInt(E2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(136) org.kframework.attributes.Location(Location(136,8,136,95)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule extractMInt(concatenateMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),#SemanticCastToInt(S),#SemanticCastToInt(E))=>extractMInt(#SemanticCastToMInt(MI2),`_-Int_`(#SemanticCastToInt(S),bitwidthMInt(#SemanticCastToMInt(MI1))),`_-Int_`(#SemanticCastToInt(E),bitwidthMInt(#SemanticCastToMInt(MI1)))) requires `_>=Int_`(#SemanticCastToInt(S),bitwidthMInt(#SemanticCastToMInt(MI1))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(122) org.kframework.attributes.Location(Location(122,8,123,39)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(concatenateMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),#SemanticCastToInt(S),#SemanticCastToInt(E))=>extractMInt(#SemanticCastToMInt(MI1),#SemanticCastToInt(S),#SemanticCastToInt(E)) requires `_<=Int_`(#SemanticCastToInt(E),bitwidthMInt(#SemanticCastToMInt(MI1))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(126) org.kframework.attributes.Location(Location(126,8,127,39)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(concatenateMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),#SemanticCastToInt(S),#SemanticCastToInt(E))=>concatenateMInt(extractMInt(#SemanticCastToMInt(MI1),#SemanticCastToInt(S),bitwidthMInt(#SemanticCastToMInt(MI1))),extractMInt(#SemanticCastToMInt(MI2),#token("0","Int"),`_-Int_`(#SemanticCastToInt(E),bitwidthMInt(#SemanticCastToMInt(MI1))))) requires `_andBool_`(`_<Int_`(#SemanticCastToInt(S),bitwidthMInt(#SemanticCastToMInt(MI1))),`_>Int_`(#SemanticCastToInt(E),bitwidthMInt(#SemanticCastToMInt(MI1)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(130) org.kframework.attributes.Location(Location(130,8,131,71)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(andMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),#SemanticCastToInt(S),#SemanticCastToInt(E))=>andMInt(extractMInt(#SemanticCastToMInt(MI1),#SemanticCastToInt(S),#SemanticCastToInt(E)),extractMInt(#SemanticCastToMInt(MI2),#SemanticCastToInt(S),#SemanticCastToInt(E))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(174) org.kframework.attributes.Location(Location(174,8,174,104)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule extractMInt(addMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),#SemanticCastToInt(S),#SemanticCastToInt(E))=>addMInt(extractMInt(#SemanticCastToMInt(MI1),#SemanticCastToInt(S),#SemanticCastToInt(E)),extractMInt(#SemanticCastToMInt(MI2),#SemanticCastToInt(S),#SemanticCastToInt(E))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),bitwidthMInt(#SemanticCastToMInt(MI2))),`_<=Int_`(#SemanticCastToInt(E),bitwidthMInt(#SemanticCastToMInt(MI1)))),`_<Int_`(#SemanticCastToInt(S),#SemanticCastToInt(E))),`_>=Int_`(#SemanticCastToInt(S),#token("0","Int"))),`_<Int_`(#SemanticCastToInt(E),bitwidthMInt(#SemanticCastToMInt(MI1)))),`_orBool_`(eqMInt(extractMInt(#SemanticCastToMInt(MI1),#SemanticCastToInt(E),bitwidthMInt(#SemanticCastToMInt(MI1))),mi(`_-Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#SemanticCastToInt(E)),#token("0","Int"))),eqMInt(extractMInt(#SemanticCastToMInt(MI1),#SemanticCastToInt(E),bitwidthMInt(#SemanticCastToMInt(MI1))),mi(`_-Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),#SemanticCastToInt(E)),#token("0","Int"))))) ensures #token("true","Bool") [contentStartColumn(9) contentStartLine(217) org.kframework.attributes.Location(Location(217,9,231,8)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(addMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),#SemanticCastToInt(S),#SemanticCastToInt(E))=>addMInt(extractMInt(#SemanticCastToMInt(MI1),#SemanticCastToInt(S),#SemanticCastToInt(E)),extractMInt(#SemanticCastToMInt(MI2),#SemanticCastToInt(S),#SemanticCastToInt(E))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),bitwidthMInt(#SemanticCastToMInt(MI2))),`_<=Int_`(#SemanticCastToInt(E),bitwidthMInt(#SemanticCastToMInt(MI1)))),`_<Int_`(#SemanticCastToInt(S),#SemanticCastToInt(E))),`_>=Int_`(#SemanticCastToInt(S),#token("0","Int"))),`_==Int_`(#SemanticCastToInt(E),bitwidthMInt(#SemanticCastToMInt(MI1)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(206) org.kframework.attributes.Location(Location(206,8,215,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(#SemanticCastToMInt(MI),#SemanticCastToInt(S),#SemanticCastToInt(E))=>mi(`_-Int_`(#SemanticCastToInt(E),#SemanticCastToInt(S)),uvalueMInt(#SemanticCastToMInt(MI))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI)),#SemanticCastToInt(E)),`_>Int_`(#SemanticCastToInt(E),#SemanticCastToInt(S))),`_>Int_`(bitwidthMInt(#SemanticCastToMInt(MI)),`_-Int_`(#SemanticCastToInt(E),#SemanticCastToInt(S)))),`_>=Int_`(uvalueMInt(#SemanticCastToMInt(MI)),#token("0","Int"))),`_<Int_`(uvalueMInt(#SemanticCastToMInt(MI)),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(E),#SemanticCastToInt(S))))),`_==Int_`(#SemanticCastToInt(S),#token("32","Int"))),`_==Int_`(#SemanticCastToInt(E),#token("64","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(318) org.kframework.attributes.Location(Location(318,8,324,44)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(#SemanticCastToMInt(MI),#SemanticCastToInt(S),#SemanticCastToInt(E))=>mi(`_-Int_`(#SemanticCastToInt(E),#SemanticCastToInt(S)),uvalueMInt(#SemanticCastToMInt(MI))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI)),#SemanticCastToInt(E)),`_>Int_`(#SemanticCastToInt(E),#SemanticCastToInt(S))),`_>Int_`(bitwidthMInt(#SemanticCastToMInt(MI)),`_-Int_`(#SemanticCastToInt(E),#SemanticCastToInt(S)))),`_>=Int_`(uvalueMInt(#SemanticCastToMInt(MI)),#token("0","Int"))),`_<Int_`(uvalueMInt(#SemanticCastToMInt(MI)),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(E),#SemanticCastToInt(S))))),`_==Int_`(#SemanticCastToInt(S),#token("1","Int"))),`_==Int_`(#SemanticCastToInt(E),#token("33","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(326) org.kframework.attributes.Location(Location(326,8,332,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(#SemanticCastToMInt(MI),#SemanticCastToInt(S),#SemanticCastToInt(E))=>mi(`_-Int_`(#SemanticCastToInt(E),#SemanticCastToInt(S)),#token("0","Int")) requires zeroMInt(#SemanticCastToMInt(MI)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(115) org.kframework.attributes.Location(Location(115,8,116,26)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule extractMInt(#SemanticCastToMInt(MI),#SemanticCastToInt(S),#SemanticCastToInt(E))=>#SemanticCastToMInt(MI) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI)),#SemanticCastToInt(E)),`_==Int_`(#SemanticCastToInt(S),#token("0","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(109) org.kframework.attributes.Location(Location(109,8,110,60)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule eqMInt(mi(#SemanticCastToInt(M),#SemanticCastToInt(I)),#SemanticCastToMInt(MI2))=>`_==Int_`(svalueMInt(#SemanticCastToMInt(MI2)),#SemanticCastToInt(I)) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI2)),#SemanticCastToInt(M)),#isConcrete(#SemanticCastToMInt(MI2))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(370) org.kframework.attributes.Location(Location(370,8,372,31)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule countOnes(concatenateMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),#SemanticCastToInt(I))=>countOnes(#SemanticCastToMInt(MI2),#SemanticCastToInt(I)) requires zeroMInt(#SemanticCastToMInt(MI1)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(181) org.kframework.attributes.Location(Location(181,8,182,27)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule countOnes(#SemanticCastToMInt(MI),#SemanticCastToInt(I))=>uvalueMInt(#SemanticCastToMInt(MI)) requires `_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI)),#token("1","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(183) org.kframework.attributes.Location(Location(183,8,184,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule concatenateMInt(extractMInt(#SemanticCastToMInt(MI1),#SemanticCastToInt(S1),#SemanticCastToInt(E1)),concatenateMInt(extractMInt(#SemanticCastToMInt(MI1),#SemanticCastToInt(S2),#SemanticCastToInt(E2)),#SemanticCastToMInt(MI2)))=>concatenateMInt(extractMInt(#SemanticCastToMInt(MI1),#SemanticCastToInt(S1),#SemanticCastToInt(E2)),#SemanticCastToMInt(MI2)) requires `_==Int_`(#SemanticCastToInt(E1),#SemanticCastToInt(S2)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(103) org.kframework.attributes.Location(Location(103,8,104,25)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule concatenateMInt(extractMInt(#SemanticCastToMInt(MI),#SemanticCastToInt(S1),#SemanticCastToInt(E1)),extractMInt(#SemanticCastToMInt(MI),#SemanticCastToInt(S2),#SemanticCastToInt(E2)))=>extractMInt(#SemanticCastToMInt(MI),#SemanticCastToInt(S1),#SemanticCastToInt(E2)) requires `_==Int_`(#SemanticCastToInt(E1),#SemanticCastToInt(S2)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(97) org.kframework.attributes.Location(Location(97,8,98,25)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule concatenateMInt(#SemanticCastToMInt(MI1),concatenateMInt(#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI3)))=>concatenateMInt(mi(`_+Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),bitwidthMInt(#SemanticCastToMInt(MI2))),#token("0","Int")),#SemanticCastToMInt(MI3)) requires `_andBool_`(zeroMInt(#SemanticCastToMInt(MI1)),zeroMInt(#SemanticCastToMInt(MI2))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(168) org.kframework.attributes.Location(Location(168,8,169,49)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule concatenateMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2))=>mi(`_+Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),bitwidthMInt(#SemanticCastToMInt(MI2))),uvalueMInt(#SemanticCastToMInt(MI2))) requires eqMInt(#SemanticCastToMInt(MI1),mi(bitwidthMInt(#SemanticCastToMInt(MI1)),#token("0","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(311) org.kframework.attributes.Location(Location(311,8,313,51)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule concatenateMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2))=>mi(`_+Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),bitwidthMInt(#SemanticCastToMInt(MI2))),#token("0","Int")) requires `_andBool_`(zeroMInt(#SemanticCastToMInt(MI1)),zeroMInt(#SemanticCastToMInt(MI2))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(165) org.kframework.attributes.Location(Location(165,8,166,49)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule bitwidthMInt(zeroExtend(#SemanticCastToMInt(_),#SemanticCastToInt(W)))=>#SemanticCastToInt(W) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(28) lemma() org.kframework.attributes.Location(Location(28,8,28,52)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(xorMInt(#SemanticCastToMInt(MIC),#SemanticCastToMInt(_)))=>bitwidthMInt(#SemanticCastToMInt(MIC)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(12) lemma() org.kframework.attributes.Location(Location(12,8,12,59)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(subMInt(#SemanticCastToMInt(MIC),#SemanticCastToMInt(_)))=>bitwidthMInt(#SemanticCastToMInt(MIC)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(11) lemma() org.kframework.attributes.Location(Location(11,8,11,59)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(signExtend(#SemanticCastToMInt(_),#SemanticCastToInt(W)))=>#SemanticCastToInt(W) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(29) lemma() org.kframework.attributes.Location(Location(29,8,29,52)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(shlMInt(#SemanticCastToMInt(MIC),#SemanticCastToInt(_)))=>bitwidthMInt(#SemanticCastToMInt(MIC)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(18) lemma() org.kframework.attributes.Location(Location(18,8,18,59)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(orMInt(#SemanticCastToMInt(MIC),#SemanticCastToMInt(_)))=>bitwidthMInt(#SemanticCastToMInt(MIC)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(13) lemma() org.kframework.attributes.Location(Location(13,8,13,59)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(negMInt(#SemanticCastToMInt(MIC)))=>bitwidthMInt(#SemanticCastToMInt(MIC)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(19) lemma() org.kframework.attributes.Location(Location(19,8,19,59)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(mi(#SemanticCastToInt(W),#SemanticCastToInt(_)))=>#SemanticCastToInt(W) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(25) lemma() org.kframework.attributes.Location(Location(25,8,25,39)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(lshrMInt(#SemanticCastToMInt(MIC),#SemanticCastToInt(_)))=>bitwidthMInt(#SemanticCastToMInt(MIC)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(16) lemma() org.kframework.attributes.Location(Location(16,8,16,59)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(extractMask(#SemanticCastToMInt(_),#SemanticCastToInt(W),#SemanticCastToInt(_)))=>#SemanticCastToInt(W) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(26) lemma() org.kframework.attributes.Location(Location(26,8,26,51)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(extractMInt(#SemanticCastToMInt(_),#SemanticCastToInt(S),#SemanticCastToInt(E)))=>`_-Int_`(#SemanticCastToInt(E),#SemanticCastToInt(S)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(27) lemma() org.kframework.attributes.Location(Location(27,8,27,62)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(concatenateMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)))=>`_+Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),bitwidthMInt(#SemanticCastToMInt(MI2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(20) lemma() org.kframework.attributes.Location(Location(20,8,20,101)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(ashrMInt(#SemanticCastToMInt(MIC),#SemanticCastToInt(_)))=>bitwidthMInt(#SemanticCastToMInt(MIC)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(17) lemma() org.kframework.attributes.Location(Location(17,8,17,59)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(andMInt(#SemanticCastToMInt(MIC),#SemanticCastToMInt(_)))=>bitwidthMInt(#SemanticCastToMInt(MIC)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(14) lemma() org.kframework.attributes.Location(Location(14,8,14,59)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(addMInt(#SemanticCastToMInt(MIC),#SemanticCastToMInt(_)))=>bitwidthMInt(#SemanticCastToMInt(MIC)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(10) lemma() org.kframework.attributes.Location(Location(10,8,10,59)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(`ifMInt_then_else__ARMV8-MINT-SYNTAX`(#SemanticCastToBool(B),#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)))=>bitwidthMInt(#SemanticCastToMInt(MI1)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(21) lemma() org.kframework.attributes.Location(Location(21,8,21,74)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule bitwidthMInt(`Float2MInt`(#SemanticCastToFloat(_),#SemanticCastToInt(W)))=>#SemanticCastToInt(W) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(22) lemma() org.kframework.attributes.Location(Location(22,8,22,53)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule ashrMInt(#SemanticCastToMInt(MI),#token("0","Int"))=>#SemanticCastToMInt(MI) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(91) lemma() org.kframework.attributes.Location(Location(91,8,91,34)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule andMInt(#SemanticCastToMInt(ZMI),#SemanticCastToMInt(MI))=>#SemanticCastToMInt(ZMI) requires zeroMInt(#SemanticCastToMInt(ZMI)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(50) org.kframework.attributes.Location(Location(50,8,51,27)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule andMInt(#SemanticCastToMInt(MI_ALL_ONES),#SemanticCastToMInt(MI))=>#SemanticCastToMInt(MI) requires `_==Int_`(svalueMInt(#SemanticCastToMInt(MI_ALL_ONES)),#token("-1","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(57) org.kframework.attributes.Location(Location(57,8,58,46)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule andMInt(#SemanticCastToMInt(MI),#SemanticCastToMInt(ZMI))=>#SemanticCastToMInt(ZMI) requires zeroMInt(#SemanticCastToMInt(ZMI)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(52) org.kframework.attributes.Location(Location(52,8,53,27)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule andMInt(#SemanticCastToMInt(MI),#SemanticCastToMInt(MI_ALL_ONES))=>#SemanticCastToMInt(MI) requires `_==Int_`(svalueMInt(#SemanticCastToMInt(MI_ALL_ONES)),#token("-1","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(55) org.kframework.attributes.Location(Location(55,8,56,46)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule andMInt(#SemanticCastToMInt(MI),#SemanticCastToMInt(MI))=>#SemanticCastToMInt(MI) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(48) org.kframework.attributes.Location(Location(48,8,48,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule addMInt(concatenateMInt(#SemanticCastToMInt(MIZ),#SemanticCastToMInt(MIF)),#SemanticCastToMInt(MI_MINUS_ONE))=>`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(#SemanticCastToMInt(MIF),mi(#token("1","Int"),#token("1","Int"))),mi(bitwidthMInt(#SemanticCastToMInt(MI_MINUS_ONE)),#token("0","Int")),#SemanticCastToMInt(MI_MINUS_ONE)) requires `_andBool_`(`_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MIF)),#token("1","Int")),zeroMInt(#SemanticCastToMInt(MIZ))),`_==Int_`(svalueMInt(#SemanticCastToMInt(MI_MINUS_ONE)),#token("-1","Int"))) ensures #token("true","Bool") [contentStartColumn(3) contentStartLine(190) org.kframework.attributes.Location(Location(190,3,201,50)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule addMInt(#SemanticCastToMInt(ZMI),#SemanticCastToMInt(MI))=>#SemanticCastToMInt(MI) requires eqMInt(#SemanticCastToMInt(ZMI),mi(bitwidthMInt(#SemanticCastToMInt(ZMI)),#token("0","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(69) org.kframework.attributes.Location(Location(69,8,70,51)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule addMInt(#SemanticCastToMInt(MI1),addMInt(#SemanticCastToMInt(MI2),#SemanticCastToMInt(MI3)))=>addMInt(addMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2)),#SemanticCastToMInt(MI3)) requires `_andBool_`(`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),bitwidthMInt(#SemanticCastToMInt(MI2))),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),bitwidthMInt(#SemanticCastToMInt(MI3)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(242) org.kframework.attributes.Location(Location(242,8,244,57)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule addMInt(#SemanticCastToMInt(MI1),#SemanticCastToMInt(MI2))=>mi(bitwidthMInt(#SemanticCastToMInt(MI1)),`_+Int_`(svalueMInt(#SemanticCastToMInt(MI1)),svalueMInt(#SemanticCastToMInt(MI2)))) requires `_andBool_`(`_andBool_`(`_<Int_`(`_+Int_`(svalueMInt(#SemanticCastToMInt(MI1)),svalueMInt(#SemanticCastToMInt(MI2))),`_-Int_`(`_^Int_`(#token("2","Int"),bitwidthMInt(#SemanticCastToMInt(MI1))),#token("1","Int"))),`_>=Int_`(`_+Int_`(svalueMInt(#SemanticCastToMInt(MI1)),svalueMInt(#SemanticCastToMInt(MI2))),`_*Int_`(#token("-1","Int"),`_-Int_`(`_^Int_`(#token("2","Int"),bitwidthMInt(#SemanticCastToMInt(MI1))),#token("1","Int"))))),`_==Int_`(bitwidthMInt(#SemanticCastToMInt(MI1)),bitwidthMInt(#SemanticCastToMInt(MI2)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(249) org.kframework.attributes.Location(Location(249,8,255,57)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule addMInt(#SemanticCastToMInt(MI),xorMInt(#SemanticCastToMInt(MI_MINUS_ONE),#SemanticCastToMInt(MI)))=>#SemanticCastToMInt(MI_MINUS_ONE) requires `_==Int_`(svalueMInt(#SemanticCastToMInt(MI_MINUS_ONE)),#token("-1","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(74) org.kframework.attributes.Location(Location(74,8,75,47)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule addMInt(#SemanticCastToMInt(MI),xorMInt(#SemanticCastToMInt(MI),#SemanticCastToMInt(MI_MINUS_ONE)))=>#SemanticCastToMInt(MI_MINUS_ONE) requires `_==Int_`(svalueMInt(#SemanticCastToMInt(MI_MINUS_ONE)),#token("-1","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(72) org.kframework.attributes.Location(Location(72,8,73,47)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule addMInt(#SemanticCastToMInt(MI),#SemanticCastToMInt(ZMI))=>#SemanticCastToMInt(MI) requires eqMInt(#SemanticCastToMInt(ZMI),mi(bitwidthMInt(#SemanticCastToMInt(ZMI)),#token("0","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(66) org.kframework.attributes.Location(Location(66,8,67,51)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_==K_`(mi(#SemanticCastToInt(M),`_+Int_`(#SemanticCastToInt(A),#SemanticCastToInt(B))),mi(#SemanticCastToInt(M),#SemanticCastToInt(J)))=>`_==Int_`(`_+Int_`(#SemanticCastToInt(A),#SemanticCastToInt(B)),#SemanticCastToInt(J)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_>=Int_`(#SemanticCastToInt(J),`_*Int_`(#token("-1","Int"),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int"))))),`_<Int_`(#SemanticCastToInt(J),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int"))))),`_>=Int_`(`_+Int_`(#SemanticCastToInt(B),`_/Int_`(`_*Int_`(#SemanticCastToInt(A),`_+Int_`(#SemanticCastToInt(A),#token("1","Int"))),#token("2","Int"))),`_*Int_`(#token("-1","Int"),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int")))))),`_<Int_`(`_+Int_`(#SemanticCastToInt(B),`_/Int_`(`_*Int_`(#SemanticCastToInt(A),`_+Int_`(#SemanticCastToInt(A),#token("1","Int"))),#token("2","Int"))),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int"))))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(337) org.kframework.attributes.Location(Location(337,8,342,77)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_==K_`(mi(#SemanticCastToInt(M),#SemanticCastToInt(J)),#SemanticCastToMInt(MI))=>`_==Int_`(#SemanticCastToInt(J),svalueMInt(#SemanticCastToMInt(MI))) requires #isConcrete(#SemanticCastToMInt(MI)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(367) org.kframework.attributes.Location(Location(367,8,368,29)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_==K_`(mi(#SemanticCastToInt(M),#SemanticCastToInt(I)),mi(#SemanticCastToInt(M),#SemanticCastToInt(J)))=>`_==Int_`(`_+Int_`(`_*Int_`(#token("-1","Int"),`_^Int_`(#token("2","Int"),#SemanticCastToInt(M))),#SemanticCastToInt(I)),`_+Int_`(`_*Int_`(#token("-1","Int"),`_^Int_`(#token("2","Int"),#SemanticCastToInt(M))),#SemanticCastToInt(J))) requires `_andBool_`(`_andBool_`(`_andBool_`(`_>=Int_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int")))),`_<Int_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),#SemanticCastToInt(M)))),`_>=Int_`(#SemanticCastToInt(J),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int"))))),`_<Int_`(#SemanticCastToInt(J),`_^Int_`(#token("2","Int"),#SemanticCastToInt(M)))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(354) org.kframework.attributes.Location(Location(354,8,361,30)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_==K_`(mi(#SemanticCastToInt(M),#SemanticCastToInt(I)),mi(#SemanticCastToInt(M),#SemanticCastToInt(J)))=>`_==Int_`(#SemanticCastToInt(I),#SemanticCastToInt(J)) requires `_andBool_`(`_andBool_`(`_andBool_`(`_>=Int_`(#SemanticCastToInt(I),`_*Int_`(#token("-1","Int"),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int"))))),`_<Int_`(#SemanticCastToInt(I),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int"))))),`_>=Int_`(#SemanticCastToInt(J),`_*Int_`(#token("-1","Int"),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int")))))),`_<Int_`(#SemanticCastToInt(J),`_^Int_`(#token("2","Int"),`_-Int_`(#SemanticCastToInt(M),#token("1","Int"))))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(344) org.kframework.attributes.Location(Location(344,8,351,41)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_==K_`(#SemanticCastToMInt(MI),mi(#SemanticCastToInt(M),#SemanticCastToInt(J)))=>`_==Int_`(svalueMInt(#SemanticCastToMInt(MI)),#SemanticCastToInt(J)) requires #isConcrete(#SemanticCastToMInt(MI)) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(364) org.kframework.attributes.Location(Location(364,8,365,29)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `MInt2Float`(`Float2MInt`(#SemanticCastToFloat(F),#token("64","Int")),#token("53","Int"),#token("11","Int"))=>#SemanticCastToFloat(F) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(85) lemma() org.kframework.attributes.Location(Location(85,8,85,56)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `MInt2Float`(`Float2MInt`(#SemanticCastToFloat(F),#token("32","Int")),#token("24","Int"),#token("8","Int"))=>#SemanticCastToFloat(F) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(87) lemma() org.kframework.attributes.Location(Location(87,8,87,56)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `Float2MInt`(`MInt2Float`(#SemanticCastToMInt(MI),#token("53","Int"),#token("11","Int")),#token("64","Int"))=>#SemanticCastToMInt(MI) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(84) lemma() org.kframework.attributes.Location(Location(84,8,84,57)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `Float2MInt`(`MInt2Float`(#SemanticCastToMInt(MI),#token("24","Int"),#token("8","Int")),#token("32","Int"))=>#SemanticCastToMInt(MI) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(86) lemma() org.kframework.attributes.Location(Location(86,8,86,57)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( xorMInt,[org.kframework.attributes.Location(Location(31,3,31,13)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( ultMInt,[org.kframework.attributes.Location(Location(60,3,60,13)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( subMInt,[org.kframework.attributes.Location(Location(77,3,77,13)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( shlMInt / ashrMInt / lshrMInt,[org.kframework.attributes.Location(Location(89,3,89,35)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( rule bitwidthMInt(mulMInt(MIC,  _)) => bitwidthMInt(MIC) [lemma],[org.kframework.attributes.Location(Location(15,3,15,70)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( orMInt,[org.kframework.attributes.Location(Location(34,3,34,12)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( bitwidthMInt    ,[org.kframework.attributes.Location(Location(8,3,8,22)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( andMInt,[org.kframework.attributes.Location(Location(47,3,47,13)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( addMInt,[org.kframework.attributes.Location(Location(65,3,65,13)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( Subpart is fully in the rhs of concat,[org.kframework.attributes.Location(Location(121,3,121,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( Subpart is fully in the lhs of concat,[org.kframework.attributes.Location(Location(125,3,125,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( Subpart is an overlap of lhs and rhs.,[org.kframework.attributes.Location(Location(129,3,129,43)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( Recursive rules,[org.kframework.attributes.Location(Location(9,3,9,21)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( Float2MInt/MInt2Float,[org.kframework.attributes.Location(Location(83,3,83,27)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( Base Rules,[org.kframework.attributes.Location(Location(24,3,24,16)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( 
    L6: svalueMInt semantics
  ,[org.kframework.attributes.Location(Location(290,3,292,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( 
    L5: uvalueMInt semantics
  ,[org.kframework.attributes.Location(Location(278,3,280,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( 
    L4: subMInt Semantics
  ,[org.kframework.attributes.Location(Location(257,3,259,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( 
    L3: addMInt: Semantics 
  ,[org.kframework.attributes.Location(Location(246,3,248,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( 
    L1: addMInt semantics: Associativity
  ,[org.kframework.attributes.Location(Location(239,3,241,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( 
     Extracting the whole bitvector
  ,[org.kframework.attributes.Location(Location(106,3,108,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( 
     Extracting from a 0 bitvector returns a zero bitvector.
  ,[org.kframework.attributes.Location(Location(112,3,114,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( 
     Concatenation of non-consecutive extracts.
  ,[org.kframework.attributes.Location(Location(100,3,102,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment( 
     Concatenation of consecutive extracts.
  ,[org.kframework.attributes.Location(Location(94,3,96,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment(
    L8: extract(MI) short width
  ,[org.kframework.attributes.Location(Location(315,3,317,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment(
    L11: mi semantics
  ,[org.kframework.attributes.Location(Location(334,3,336,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment(
    L0: Distributing extraction over addition
  ,[org.kframework.attributes.Location(Location(203,3,205,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment(
    Concatenate with 0
  ,[org.kframework.attributes.Location(Location(308,3,310,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment(
     countOnes 
  ,[org.kframework.attributes.Location(Location(178,3,180,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment(
     Merges two consecutive extracts.
  ,[org.kframework.attributes.Location(Location(133,3,135,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment(
     Extract over zeroExtend: 
     When the Etract overlaps with the signExtended MInt.
     When the Etract DOES NOT overlap with the signExtended MInt.
  ,[org.kframework.attributes.Location(Location(141,3,145,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment(
     Distribute Extract over Concatenation
  ,[org.kframework.attributes.Location(Location(118,3,120,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment(
     Distribute Extract over Boolean operations
  ,[org.kframework.attributes.Location(Location(171,3,173,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment(
     Convert signExtension to zeroExtension
  ,[org.kframework.attributes.Location(Location(156,3,158,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment(
     Concatenate zeroes
  ,[org.kframework.attributes.Location(Location(162,3,164,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
  ModuleComment(
     Carry flag idioms
  ,[org.kframework.attributes.Location(Location(186,3,188,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))])
endmodule


module MINT-LEMMAS$SYNTAX [org.kframework.attributes.Location(Location(3,1,380,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/armv8-verification.k))]
  imports MINT$SYNTAX
  imports K-REFLECTION-SYMBOLIC$SYNTAX
  imports ARMV8-MINT-SYNTAX$SYNTAX
endmodule


module ML-SYNTAX [org.kframework.attributes.Location(Location(65,1,91,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-K
  imports ML-SYNTAX$SYNTAX
endmodule


module ML-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(65,1,91,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-K$SYNTAX
  syntax {Sort} Sort ::= Sort "#Or" Sort [assoc() comm() format(%i%1%d%n%2%n%i%3%d) klabel(#Or) left() mlOp() symbol() unit(#False)]
  syntax {Sort} Sort ::= Sort "#Implies" Sort [format(%i%1%d%n%2%n%i%3%d) klabel(#Implies) mlImplies() mlOp() symbol()]
  syntax {Sort} Sort ::= Sort "#And" Sort [assoc() comm() format(%i%1%d%n%2%n%i%3%d) klabel(#And) left() mlAnd() mlOp() symbol() unit(#True)]
  syntax {Sort} Sort ::= "#wEF" "(" Sort ")" [klabel(weakExistsFinally) mlOp() mlQuantifier() symbol()]
  syntax {Sort} Sort ::= "#True" [klabel(#True) mlUnary() symbol()]
  syntax {Sort} Sort ::= "#Not" "(" Sort ")" [klabel(#Not) mlOp() mlUnary() symbol()]
  syntax {Sort} Sort ::= "#False" [klabel(#False) mlUnary() symbol()]
  syntax {Sort} Sort ::= "#AG" "(" Sort ")" [klabel(#AG) mlOp() mlQuantifier() symbol()]
  syntax {Sort1, Sort2} Sort2 ::= "{" Sort1 "#Equals" Sort1 "}" [format(%1%i%n%2%d%n%3%i%n%4%d%n%5) klabel(#Equals) mlEquals() mlOp() symbol()]
  syntax {Sort1, Sort2} Sort2 ::= "#Forall" Sort1 "." Sort2 [klabel(#Forall) mlBinder() mlOp() mlQuantifier() symbol()]
  syntax {Sort1, Sort2} Sort2 ::= "#Floor" "(" Sort1 ")" [klabel(#Floor) mlOp() mlUnary() symbol()]
  syntax {Sort1, Sort2} Sort2 ::= "#Exists" Sort1 "." Sort2 [klabel(#Exists) mlBinder() mlOp() mlQuantifier() symbol()]
  syntax {Sort1, Sort2} Sort2 ::= "#Ceil" "(" Sort1 ")" [klabel(#Ceil) mlOp() mlUnary() symbol()]
  syntax priority #True #Floor #Ceil #Not #False > #Equals > #And
  syntax priority #Implies > #Exists #Forall #AG weakExistsFinally
  syntax priority #And > #Or > #Implies
  syntax associativity left #Or
  syntax associativity left #And
  syntax #KVariable [org.kframework.attributes.Location(Location(68,3,68,19)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
endmodule


module MOV [org.kframework.attributes.Location(Location(3,1,49,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/mov.k))]
  imports MOV$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("MOV","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int")))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,15,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/mov.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("MOV","Opcode")),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sd),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(Imm32),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToS32(Sd)),mi(#token("32","Int"),modImm32(#SemanticCastToImm(Imm32))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(31) org.kframework.attributes.Location(Location(31,8,36,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/mov.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("MOV","Opcode")),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),getParentValue(#SemanticCastToR32(Rm),#SemanticCastToMap(RSMap)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(24) org.kframework.attributes.Location(Location(24,8,29,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/mov.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("MOV","Opcode")),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(Imm32),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),mi(#token("32","Int"),modImm32(#SemanticCastToImm(Imm32))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(17) org.kframework.attributes.Location(Location(17,8,22,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/mov.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("MOV","Opcode")),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dd),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(Imm64),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToD64(Dd),#token("0","Int")),extractMInt(mi(#token("64","Int"),modImm64(#SemanticCastToImm(Imm64))),#token("32","Int"),#token("64","Int"))),`_|->_`(convVecToRegKeys(#SemanticCastToD64(Dd),#token("1","Int")),extractMInt(mi(#token("64","Int"),modImm64(#SemanticCastToImm(Imm64))),#token("0","Int"),#token("32","Int")))),`_|->_`(convToRegKeys(#SemanticCastToD64(Dd)),mi(#token("64","Int"),modImm64(#SemanticCastToImm(Imm64)))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(38) org.kframework.attributes.Location(Location(38,8,47,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/mov.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment("RESULT64" |-> mi(64, 0),[org.kframework.attributes.Location(Location(11,12,11,38)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/mov.k))])
endmodule


module MOV$SYNTAX [org.kframework.attributes.Location(Location(3,1,49,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/mov.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module PROGRAM-LISTS [org.kframework.attributes.Location(Location(203,1,215,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-K
  imports PROGRAM-LISTS$SYNTAX
  ModuleComment( replaces the default productions for lists:,[org.kframework.attributes.Location(Location(206,3,206,49)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( into a series of productions more suitable for programs:,[org.kframework.attributes.Location(Location(209,3,209,62)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( if this module is imported, the parser automatically,[org.kframework.attributes.Location(Location(205,3,205,58)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( Ne#Es ::= E "," Ne#Es     [klabel('_,_)],[org.kframework.attributes.Location(Location(211,3,211,46)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( Es#Terminator ::= ""      [klabel('.Es)],[org.kframework.attributes.Location(Location(210,3,210,46)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( Es ::= Ne#Es,[org.kframework.attributes.Location(Location(213,3,213,18)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( Es ::= E "," Es [userList("*"), klabel('_,_)],[org.kframework.attributes.Location(Location(207,3,207,51)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment(      | Es#Terminator      // if the list is *,[org.kframework.attributes.Location(Location(214,3,214,51)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment(      | ".Es"    [userList("*"), klabel('.Es)],[org.kframework.attributes.Location(Location(208,3,208,51)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment(         | E Es#Terminator [klabel('_,_)],[org.kframework.attributes.Location(Location(212,3,212,46)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
endmodule


module PROGRAM-LISTS$SYNTAX [org.kframework.attributes.Location(Location(203,1,215,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-K$SYNTAX
endmodule


module RECORD-PRODUCTIONS [org.kframework.attributes.Location(Location(236,1,241,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports RECORD-PRODUCTIONS$SYNTAX
  ModuleComment( will be able to be parsed with don't-care variables according,[org.kframework.attributes.Location(Location(239,3,239,67)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( to their nonterminal's names,[org.kframework.attributes.Location(Location(240,3,240,34)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( syntax Sort ::= name(Args),[org.kframework.attributes.Location(Location(238,3,238,32)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( if this module is imported, prefix productions of the form,[org.kframework.attributes.Location(Location(237,3,237,64)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
endmodule


module RECORD-PRODUCTIONS$SYNTAX [org.kframework.attributes.Location(Location(236,1,241,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
endmodule


module REQUIRES-ENSURES [org.kframework.attributes.Location(Location(150,1,161,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports REQUIRES-ENSURES$SYNTAX
  imports BASIC-K
endmodule


module REQUIRES-ENSURES$SYNTAX [org.kframework.attributes.Location(Location(150,1,161,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports BASIC-K$SYNTAX
  syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]
  syntax #RuleContent ::= #RuleBody "when" K [klabel(#ruleRequires) symbol()]
  syntax #RuleContent ::= #RuleBody "when" K "ensures" K [klabel(#ruleRequiresEnsures) symbol()]
  syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]
  syntax #RuleContent ::= #RuleBody "requires" K "ensures" K [klabel(#ruleRequiresEnsures) symbol()]
  syntax #RuleContent ::= #RuleBody "ensures" K [klabel(#ruleEnsures) symbol()]
  syntax #RuleBody ::= K
endmodule


module RULE-CELLS [org.kframework.attributes.Location(Location(121,1,131,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports RULE-LISTS
  imports RULE-CELLS$SYNTAX
  imports KCELLS
  ModuleComment(syntax Cell ::= "<top>" #OptionalDots K #OptionalDots "</top>" [klabel(<top>)],[org.kframework.attributes.Location(Location(127,3,127,83)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( if this module is imported, the parser automatically,[org.kframework.attributes.Location(Location(124,3,124,58)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( generates, for all productions that have the attribute 'cell' or 'maincell',,[org.kframework.attributes.Location(Location(125,3,125,82)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( a production like below:,[org.kframework.attributes.Location(Location(126,3,126,30)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
endmodule


module RULE-CELLS$SYNTAX [org.kframework.attributes.Location(Location(121,1,131,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports RULE-LISTS$SYNTAX
  imports KCELLS$SYNTAX
  syntax #OptionalDots ::= "..." [klabel(#dots) symbol()]
  syntax #OptionalDots ::= "" [klabel(#noDots) symbol()]
endmodule


module RULE-LISTS [org.kframework.attributes.Location(Location(217,1,222,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports RULE-LISTS$SYNTAX
  ModuleComment( if this module is imported, the parser automatically,[org.kframework.attributes.Location(Location(218,3,218,58)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( adds the subsort production to the parsing module only:,[org.kframework.attributes.Location(Location(219,3,219,61)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
  ModuleComment( Es ::= E        [userList("*")],[org.kframework.attributes.Location(Location(220,3,220,37)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))])
endmodule


module RULE-LISTS$SYNTAX [org.kframework.attributes.Location(Location(217,1,222,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
endmodule


module RULE-TAG-SYNTAX [org.kframework.attributes.Location(Location(1420,1,1424,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports RULE-TAG-SYNTAX$SYNTAX
  imports BUILTIN-ID-TOKENS
endmodule


module RULE-TAG-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1420,1,1424,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports BUILTIN-ID-TOKENS$SYNTAX
  syntax #RuleTag ::= #LowerId [token()]
endmodule


module SET [org.kframework.attributes.Location(Location(184,1,226,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports SET$SYNTAX
  imports INT-SYNTAX
  imports BASIC-K
  ModuleComment(| ".",[org.kframework.attributes.Location(Location(197,16,197,23)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(rule S:Set -Set .Set => S,[org.kframework.attributes.Location(Location(225,3,225,30)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(rule S1:Set -Set (SetItem(K:K) S2:Set) => S1 -Set S2,[org.kframework.attributes.Location(Location(223,3,223,57)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(requires notBool(K in S1),[org.kframework.attributes.Location(Location(224,3,224,30)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( set difference axioms ,[org.kframework.attributes.Location(Location(221,3,221,29)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( \section{Description} The Set represents a mathematical set (a collection
   of unique items). ,[org.kframework.attributes.Location(Location(190,3,191,23)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( TODO(AndreiS): remove this if not used,[org.kframework.attributes.Location(Location(222,3,222,44)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Get the intersection of two sets ($A \cap B$) ,[org.kframework.attributes.Location(Location(203,3,203,54)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Get the difference of two sets ($A \setminus B$),[org.kframework.attributes.Location(Location(206,3,206,56)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Get the cardinality of a set ($|A|$) ,[org.kframework.attributes.Location(Location(215,3,215,45)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Get an arbitrarily chosen element of the Set ,[org.kframework.attributes.Location(Location(218,3,218,53)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Construct an empty Set ,[org.kframework.attributes.Location(Location(195,3,195,31)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Construct a singleton Set (a Set with only one element $\{ a \}$). To add
   an element $a$ to a set $A$, construct the union of the singleton set
   $\{ a \}$ and $A$ ($\{ a \} \cup A$). ,[org.kframework.attributes.Location(Location(198,3,200,43)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Construct a new Set as the union of two different sets ($A \cup B$) ,[org.kframework.attributes.Location(Location(193,3,193,76)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Check set inclusion ($A \subseteq B$) ,[org.kframework.attributes.Location(Location(212,3,212,46)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Check element membership in a set ($a \in A$) ,[org.kframework.attributes.Location(Location(209,3,209,54)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module SET$SYNTAX [org.kframework.attributes.Location(Location(184,1,226,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports INT-SYNTAX$SYNTAX
  imports BASIC-K$SYNTAX
  syntax associativity left _Set_
  syntax Set [hook(SET.Set) org.kframework.attributes.Location(Location(188,3,188,28)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax Set ::= Set Set [assoc() comm() element(SetItem) format(%1%n%2) function() functional() hook(SET.concat) idem() klabel(_Set_) left() symbol() unit(.Set)]
  syntax Set ::= Set "-Set" Set [function() functional() hook(SET.difference) klabel(Set:difference) latex({#1}-_{\it Set}{#2}) symbol()]
  syntax Set ::= "intersectSet" "(" Set "," Set ")" [function() functional() hook(SET.intersection) klabel(intersectSet)]
  syntax Set ::= "SetItem" "(" KItem ")" [function() functional() hook(SET.element) klabel(SetItem) symbol()]
  syntax Set ::= ".Set" [function() functional() hook(SET.unit) klabel(.Set) latex(\dotCt{Set}) symbol()]
  syntax KItem ::= "choice" "(" Set ")" [function() hook(SET.choice) klabel(Set:choice)]
  syntax Int ::= "size" "(" Set ")" [function() functional() hook(SET.size) klabel(size)]
  syntax Bool ::= Set "<=Set" Set [function() functional() hook(SET.inclusion)]
  syntax Bool ::= KItem "in" Set [function() functional() hook(SET.in) klabel(Set:in) symbol()]
endmodule


module SINT [org.kframework.attributes.Location(Location(7,1,25,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sint.k))]
  imports SINT$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("sint","StepCommand")),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I1))),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"V_TEMP3\"","String"),svalueMInt(mi(#token("32","Int"),#SemanticCastToInt(I1))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(17) org.kframework.attributes.Location(Location(17,8,22,21)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment(
  rule <k> setDefaultRegs(sint:StepCommand) => . ... </k>
       <regstate>
         RSMap:Map
       </regstate>
  ,[org.kframework.attributes.Location(Location(10,3,15,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sint.k))])
endmodule


module SINT$SYNTAX [org.kframework.attributes.Location(Location(7,1,25,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sint.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module SORT-K [org.kframework.attributes.Location(Location(4,1,6,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-K$SYNTAX
endmodule


module SORT-K$SYNTAX [org.kframework.attributes.Location(Location(4,1,6,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  syntax K [hook(K.K) org.kframework.attributes.Location(Location(5,3,5,22)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
endmodule


module SORT-KBOTT [org.kframework.attributes.Location(Location(25,1,28,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-KBOTT$SYNTAX
  imports SORT-K
endmodule


module SORT-KBOTT$SYNTAX [org.kframework.attributes.Location(Location(25,1,28,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
  imports SORT-K$SYNTAX
  syntax KBott [org.kframework.attributes.Location(Location(27,3,27,14)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/kast.k))]
endmodule


module SST [org.kframework.attributes.Location(Location(7,1,35,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sst.k))]
  imports SST$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToStepCommand(#token("sst","StepCommand")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(10) org.kframework.attributes.Location(Location(10,8,30,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sst.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("sst","StepCommand")),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) org.kframework.attributes.Location(Location(32,8,34,40)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sst.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module SST$SYNTAX [org.kframework.attributes.Location(Location(7,1,35,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sst.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module STDIN-STREAM [org.kframework.attributes.Location(Location(1043,1,1137,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STDIN-STREAM$SYNTAX
  imports MAP
  imports K-REFLECTION
  imports K-IO
  syntax Cell ::= StdinCell
  rule initStdinCell(Init)=>`<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(#buffer(#SemanticCastToString(`project:String`(`Map:lookup`(Init,#token("$STDIN","KConfigVar")))))),`ListItem`(#SemanticCastToString(`project:String`(`Map:lookup`(Init,#token("$IO","KConfigVar")))))),`ListItem`(#istream(`#stdin_K-IO`(.KList)))),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`ListItem`(#parseInput(#SemanticCastToString(_),#SemanticCastToString(Delimiters))),`ListItem`(#buffer(#SemanticCastToString(S)=>`_+String__STRING`(#SemanticCastToString(S),chrChar(`project:Int`(`#getc(_)_K-IO`(#SemanticCastToInt(N)))))))),`ListItem`(#token("\"on\"","String"))),`ListItem`(#istream(#SemanticCastToInt(N)))),#noDots(.KList)) requires `_==Int_`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1054) label(STDIN-STREAM.stdinGetc) org.kframework.attributes.Location(Location(1054,8,1060,49)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]) stream()]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(#parseInput(#token("\"String\"","String"),#SemanticCastToString(Delimiters)))=>`ListItem`(#SemanticCastToString(S)),`ListItem`(#buffer(#SemanticCastToString(S)=>#token("\"\"","String")))),#SemanticCastToList(_)),#noDots(.KList)) requires `_=/=Int_`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1065) label(STDIN-STREAM.stdinParseString) org.kframework.attributes.Location(Location(1065,8,1070,50)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]) stream()]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(#parseInput(#token("\"Int\"","String"),#SemanticCastToString(Delimiters)))=>`ListItem`(`String2Int`(substrString(#SemanticCastToString(S),#token("0","Int"),findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int"))))),`ListItem`(#buffer(#SemanticCastToString(S)=>substrString(#SemanticCastToString(S),`_+Int_`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("1","Int")),lengthString(#SemanticCastToString(S)))))),#SemanticCastToList(_)),#noDots(.KList)) requires `_andBool_`(`_=/=Int_`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")),`_>Int_`(lengthString(#SemanticCastToString(S)),#token("1","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1075) label(STDIN-STREAM.stdinParseInt) org.kframework.attributes.Location(Location(1075,8,1082,38)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]) stream()]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(#parseInput(#SemanticCastToString(Sort),#SemanticCastToString(Delimiters)))=>`ListItem`(#parseKAST(substrString(#SemanticCastToString(S),#token("0","Int"),findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int"))))),`ListItem`(#buffer(#SemanticCastToString(S)=>substrString(#SemanticCastToString(S),`_+Int_`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("1","Int")),lengthString(#SemanticCastToString(S)))))),#SemanticCastToList(_)),#noDots(.KList)) requires `_andBool_`(`_andBool_`(`_=/=Int_`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")),`_==String__STRING`(#SemanticCastToString(Sort),#token("\"K\"","String"))),`_>Int_`(lengthString(#SemanticCastToString(S)),#token("1","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1086) label(STDIN-STREAM.stdinParseArbitrarySort) org.kframework.attributes.Location(Location(1086,8,1094,38)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]) stream()]
  rule `<stdin>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(#parseInput(#SemanticCastToString(Sort),#SemanticCastToString(Delimiters))),`ListItem`(#buffer(#SemanticCastToString(S)=>substrString(#SemanticCastToString(S),#token("1","Int"),lengthString(#SemanticCastToString(S)))))),#SemanticCastToList(_)),#noDots(.KList)) requires `_andBool_`(`_andBool_`(`_=/=Int_`(findChar(#SemanticCastToString(S),#SemanticCastToString(Delimiters),#token("0","Int")),#token("-1","Int")),`_=/=String__STRING`(#SemanticCastToString(Sort),#token("\"String\"","String"))),`_<=Int_`(lengthString(#SemanticCastToString(S)),#token("1","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1098) label(STDIN-STREAM.stdinTrim) org.kframework.attributes.Location(Location(1098,8,1105,39)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]) stream()]
  rule `<stdin>`(#noDots(.KList),`_List_`(`.List`(.KList)=>`ListItem`(#parseInput(#SemanticCastToString(?Sort),#SemanticCastToString(?Delimiters))),`ListItem`(#buffer(#SemanticCastToString(_)))),#dots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1123) label(STDIN-STREAM.stdinUnblock) org.kframework.attributes.Location(Location(1123,8,1127,16)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) unblock()]
  ModuleComment(,[org.kframework.attributes.Location(Location(1119,3,1119,5)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( when we reach whitespace, if it parses create a ListItem,[org.kframework.attributes.Location(Location(1063,3,1063,62)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( when necessary according to user-defined rules, since otherwise it will,[org.kframework.attributes.Location(Location(1109,3,1109,77)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( way will get stuck in concrete execution mode with real IO enabled (i.e.,,[org.kframework.attributes.Location(Location(1115,3,1115,79)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( under `--io on` option), while they will still work in symbolic execution,[org.kframework.attributes.Location(Location(1116,3,1116,79)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( read one character at a time until we read whitespace,[org.kframework.attributes.Location(Location(1052,3,1052,59)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( off`, `--search`, or `--debug` options).,[org.kframework.attributes.Location(Location(1118,3,1118,46)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( mode or concrete execution mode with real IO disabled (i.e., under `--io,[org.kframework.attributes.Location(Location(1117,3,1117,78)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( lead to a diverging (i.e., non-terminating) transition system definition.,[org.kframework.attributes.Location(Location(1110,3,1110,79)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( input stream cell, e.g.,,[org.kframework.attributes.Location(Location(1112,3,1112,30)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( have a way to specify such patterns.,[org.kframework.attributes.Location(Location(1121,3,1121,42)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( a hack: handle the case when we read integers without the help of the IO server,[org.kframework.attributes.Location(Location(1073,3,1073,85)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( [stdin],[org.kframework.attributes.Location(Location(1105,40,1105,50)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( [stdin],[org.kframework.attributes.Location(Location(1094,39,1094,49)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( [stdin],[org.kframework.attributes.Location(Location(1082,39,1082,49)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( [stdin],[org.kframework.attributes.Location(Location(1070,51,1070,61)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( [stdin],[org.kframework.attributes.Location(Location(1060,50,1060,60)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( TODO: More patterns need to be supported as well. In that case, we need to,[org.kframework.attributes.Location(Location(1120,3,1120,80)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Non-supported rules that refer to the input stream cell in a sophisticated,[org.kframework.attributes.Location(Location(1114,3,1114,80)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( NOTE: This unblocking rule will be instantiated and inserted carefully,[org.kframework.attributes.Location(Location(1108,3,1108,76)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Currently, it supports only a simple pattern matching on the top of the,[org.kframework.attributes.Location(Location(1111,3,1111,77)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(   rule <k> read() => V ... </k> <in> ListItem(V:Int) => .List ...  </in>,[org.kframework.attributes.Location(Location(1113,3,1113,78)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
  syntax Stream ::= "#noIO"

  rule ListItem(#buffer(_))
       (ListItem(#noIO) ListItem(#istream(_:Int)) => .List) [stdin]
  ,[org.kframework.attributes.Location(Location(1130,3,1135,4)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module STDIN-STREAM$SYNTAX [org.kframework.attributes.Location(Location(1043,1,1137,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports MAP$SYNTAX
  imports K-REFLECTION$SYNTAX
  imports K-IO$SYNTAX
  syntax Stream ::= "#parseInput" "(" String "," String ")" [klabel(#parseInput)]
  syntax Stream ::= "#istream" "(" Int ")" [klabel(#istream)]
  syntax StdinCell ::= "initStdinCell" "(" Map ")" [function() initializer() noThread()]
  syntax StdinCell ::= "<stdin>" List "</stdin>" [cell() cellName(stdin) contentStartColumn(17) contentStartLine(1050) format(%1%i%n%2%d%n%3) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) topcell()]
  Bubble(config,<stdin> ListItem(#buffer($STDIN:String)) ListItem($IO:String) ListItem(#istream(#stdin)) </stdin>,[contentStartColumn(17) contentStartLine(1050) org.kframework.attributes.Location(Location(1050,3,1050,113)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module STDOUT-STREAM [org.kframework.attributes.Location(Location(1139,1,1207,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STDOUT-STREAM$SYNTAX
  imports MAP
  imports K-IO
  syntax Cell ::= StdoutCell
  rule initStdoutCell(Init)=>`<stdout>`(#noDots(.KList),`_List_`(`_List_`(`ListItem`(#ostream(`#stdout_K-IO`(.KList))),`ListItem`(#SemanticCastToString(`project:String`(`Map:lookup`(Init,#token("$IO","KConfigVar")))))),`ListItem`(#buffer(#token("\"\"","String")))),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer()]
  rule `<stdout>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(#ostream(#SemanticCastToInt(_))),`ListItem`(#SemanticCastToKItem(_))),`ListItem`(#buffer(#SemanticCastToString(Buffer)=>`_+String__STRING`(#SemanticCastToString(Buffer),`Int2String`(#SemanticCastToInt(I)))))),`ListItem`(#SemanticCastToInt(I))=>`.List`(.KList)),#SemanticCastToList(_)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1158) label(STDOUT-STREAM.stdoutBufferInt) org.kframework.attributes.Location(Location(1158,8,1164,17)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) stream()]
  rule `<stdout>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(#ostream(#SemanticCastToInt(_))),`ListItem`(#SemanticCastToKItem(_))),`ListItem`(#buffer(#SemanticCastToString(Buffer)=>`_+String__STRING`(#SemanticCastToString(Buffer),`Float2String`(#SemanticCastToFloat(F)))))),`ListItem`(#SemanticCastToFloat(F))=>`.List`(.KList)),#SemanticCastToList(_)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1148) label(STDOUT-STREAM.stdoutBufferFloat) org.kframework.attributes.Location(Location(1148,8,1154,17)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) stream()]
  rule `<stdout>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(#ostream(#SemanticCastToInt(_))),`ListItem`(#SemanticCastToKItem(_))),`ListItem`(#buffer(#SemanticCastToString(Buffer)=>`_+String__STRING`(#SemanticCastToString(Buffer),#SemanticCastToString(S))))),`ListItem`(#SemanticCastToString(S))=>`.List`(.KList)),#SemanticCastToList(_)),#noDots(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1168) label(STDOUT-STREAM.stdoutBufferString) org.kframework.attributes.Location(Location(1168,8,1174,17)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) stream()]
  rule `<stdout>`(#noDots(.KList),`_List_`(`_List_`(`_List_`(`ListItem`(#ostream(#SemanticCastToInt(N)=>`project:Int`(`#write(_,_)_K-IO`(#SemanticCastToInt(N),#SemanticCastToString(S))~>#SemanticCastToInt(N)))),`ListItem`(#token("\"on\"","String"))),`ListItem`(#buffer(#SemanticCastToString(S)=>#token("\"\"","String")))),#SemanticCastToList(_)),#noDots(.KList)) requires `_=/=String__STRING`(#SemanticCastToString(S),#token("\"\"","String")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(1180) label(STDOUT-STREAM.stdoutWrite) org.kframework.attributes.Location(Location(1180,8,1186,28)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()]) stream()]
  ModuleComment(configuration <stderr> ListItem(#ostream(#stderr)) ListItem($IO:String) ListItem(#buffer("")) </stderr>,[org.kframework.attributes.Location(Location(1145,1,1145,106)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( [stdout, stderr],[org.kframework.attributes.Location(Location(1186,29,1186,48)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( [stdout, stderr],[org.kframework.attributes.Location(Location(1175,8,1175,27)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( [stdout, stderr],[org.kframework.attributes.Location(Location(1165,8,1165,27)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( [stdout, stderr],[org.kframework.attributes.Location(Location(1155,8,1155,27)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Send first char from the buffer to the server,[org.kframework.attributes.Location(Location(1178,3,1178,51)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(
  syntax Stream ::= "#noIO"

  rule ListItem(#buffer(Buffer:String => Buffer +String Float2String(F)))
       (ListItem(F:Float) => .List)
       _:List [stdout, stderr]
  rule ListItem(#buffer(Buffer:String => Buffer +String Int2String(I)))
       (ListItem(I:Int) => .List)
       _:List [stdout, stderr]
  rule ListItem(#buffer(Buffer:String => Buffer +String S))
       (ListItem(S:String) => .List)
       _:List [stdout, stderr]

  rule (ListItem(#ostream(_:Int)) ListItem(#noIO) => .List)
       ListItem(#buffer(_))
       _:List [stdout, stderr]
  ,[org.kframework.attributes.Location(Location(1189,3,1205,4)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module STDOUT-STREAM$SYNTAX [org.kframework.attributes.Location(Location(1139,1,1207,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports MAP$SYNTAX
  imports K-IO$SYNTAX
  syntax Stream ::= "#ostream" "(" Int ")" [klabel(#ostream)]
  syntax StdoutCell ::= "initStdoutCell" "(" Map ")" [function() initializer() noThread()]
  syntax StdoutCell ::= "<stdout>" List "</stdout>" [cell() cellName(stdout) contentStartColumn(17) contentStartLine(1144) format(%1%i%n%2%d%n%3) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()]) topcell()]
  Bubble(config,<stdout> ListItem(#ostream(#stdout)) ListItem($IO:String) ListItem(#buffer("")) </stdout>,[contentStartColumn(17) contentStartLine(1144) org.kframework.attributes.Location(Location(1144,3,1144,105)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module STO [org.kframework.attributes.Location(Location(7,1,34,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sto.k))]
  imports STO$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("sto","StepCommand")),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(17) org.kframework.attributes.Location(Location(17,8,22,21)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sto.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("sto","StepCommand")),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I))),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToQ128(Qd),#SemanticCastToInt(I)),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap))),`_|->_`(convToRegKeys(#SemanticCastToQ128(Qd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_<=Int_`(#SemanticCastToInt(I),#token("3","Int")),`_>=Int_`(#SemanticCastToInt(I),#token("0","Int"))),plugInMask(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`_*Int_`(#SemanticCastToInt(I),#token("32","Int"))),`undefMInt_ARMV8-MINT-SYNTAX`(.KList))))),#noDots(.KList))) requires `_andBool_`(`_>=Int_`(#SemanticCastToInt(I),#token("0","Int")),`_<=Int_`(#SemanticCastToInt(I),#token("3","Int"))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(24) org.kframework.attributes.Location(Location(24,8,32,50)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sto.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  ModuleComment(
  rule <k> setDefaultRegs(dtc:StepCommand) => . ... </k>
       <regstate>
         RSMap:Map
       </regstate>
  ,[org.kframework.attributes.Location(Location(10,3,15,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sto.k))])
endmodule


module STO$SYNTAX [org.kframework.attributes.Location(Location(7,1,34,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/sto.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module STRING [org.kframework.attributes.Location(Location(573,1,649,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING-SYNTAX
  imports STRING$SYNTAX
  imports K-EQUAL
  imports INT
  imports FLOAT-SYNTAX
  rule rfindChar(#SemanticCastToString(_),#token("\"\"","String"),#SemanticCastToInt(_))=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(628) org.kframework.attributes.Location(Location(628,8,628,33)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule rfindChar(#SemanticCastToString(S1),#SemanticCastToString(S2),#SemanticCastToInt(I))=>`maxInt(_,_)_INT-COMMON`(rfindString(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("0","Int"),#token("1","Int")),#SemanticCastToInt(I)),rfindChar(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("1","Int"),lengthString(#SemanticCastToString(S2))),#SemanticCastToInt(I))) requires `_=/=String__STRING`(#SemanticCastToString(S2),#token("\"\"","String")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(627) org.kframework.attributes.Location(Location(627,8,627,182)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule findChar(#SemanticCastToString(_),#token("\"\"","String"),#SemanticCastToInt(_))=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(626) org.kframework.attributes.Location(Location(626,8,626,32)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule findChar(#SemanticCastToString(S1),#SemanticCastToString(S2),#SemanticCastToInt(I))=>`#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(findString(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("0","Int"),#token("1","Int")),#SemanticCastToInt(I)),#token("-1","Int")),findChar(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("1","Int"),lengthString(#SemanticCastToString(S2))),#SemanticCastToInt(I)),`#if_#then_#else_#fi_K-EQUAL`(`_==Int_`(findChar(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("1","Int"),lengthString(#SemanticCastToString(S2))),#SemanticCastToInt(I)),#token("-1","Int")),findString(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("0","Int"),#token("1","Int")),#SemanticCastToInt(I)),`minInt(_,_)_INT-COMMON`(findString(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("0","Int"),#token("1","Int")),#SemanticCastToInt(I)),findChar(#SemanticCastToString(S1),substrString(#SemanticCastToString(S2),#token("1","Int"),lengthString(#SemanticCastToString(S2))),#SemanticCastToInt(I))))) requires `_=/=String__STRING`(#SemanticCastToString(S2),#token("\"\"","String")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(625) org.kframework.attributes.Location(Location(625,8,625,431)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `replaceFirst(_,_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(_))=>#SemanticCastToString(Source) requires `_<Int_`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(638) org.kframework.attributes.Location(Location(638,8,639,57)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `replaceFirst(_,_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement))=>`_+String__STRING`(`_+String__STRING`(substrString(#SemanticCastToString(Source),#token("0","Int"),findString(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int"))),#SemanticCastToString(Replacement)),substrString(#SemanticCastToString(Source),`_+Int_`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int")),lengthString(#SemanticCastToString(ToReplace))),lengthString(#SemanticCastToString(Source)))) requires `_>=Int_`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(635) org.kframework.attributes.Location(Location(635,8,637,66)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `replaceAll(_,_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement))=>`replace(_,_,_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement),`countAllOccurrences(_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(647) org.kframework.attributes.Location(Location(647,8,647,154)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `replace(_,_,_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(_),#SemanticCastToString(_),#token("0","Int"))=>#SemanticCastToString(Source) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(646) org.kframework.attributes.Location(Location(646,8,646,49)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `replace(_,_,_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement),#SemanticCastToInt(Count))=>`_+String__STRING`(`_+String__STRING`(substrString(#SemanticCastToString(Source),#token("0","Int"),findString(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int"))),#SemanticCastToString(Replacement)),`replace(_,_,_,_)_STRING`(substrString(#SemanticCastToString(Source),`_+Int_`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToReplace),#token("0","Int")),lengthString(#SemanticCastToString(ToReplace))),lengthString(#SemanticCastToString(Source))),#SemanticCastToString(ToReplace),#SemanticCastToString(Replacement),`_-Int_`(#SemanticCastToInt(Count),#token("1","Int")))) requires `_>Int_`(#SemanticCastToInt(Count),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(642) org.kframework.attributes.Location(Location(642,8,645,30)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `countAllOccurrences(_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToCount))=>`_+Int_`(#token("1","Int"),`countAllOccurrences(_,_)_STRING`(substrString(#SemanticCastToString(Source),`_+Int_`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToCount),#token("0","Int")),lengthString(#SemanticCastToString(ToCount))),lengthString(#SemanticCastToString(Source))),#SemanticCastToString(ToCount))) requires `_>=Int_`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToCount),#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(632) org.kframework.attributes.Location(Location(632,8,633,60)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `countAllOccurrences(_,_)_STRING`(#SemanticCastToString(Source),#SemanticCastToString(ToCount))=>#token("0","Int") requires `_<Int_`(findString(#SemanticCastToString(Source),#SemanticCastToString(ToCount),#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(630) org.kframework.attributes.Location(Location(630,8,631,59)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
  rule `_>String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`_<String__STRING`(#SemanticCastToString(S2),#SemanticCastToString(S1)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(622) org.kframework.attributes.Location(Location(622,8,622,52)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_>=String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`notBool_`(`_<String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(623) org.kframework.attributes.Location(Location(623,8,623,63)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_==String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`_==K_`(#SemanticCastToString(S1),#SemanticCastToString(S2)) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(609) org.kframework.attributes.Location(Location(609,8,609,49)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_=/=String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`notBool_`(`_==String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(608) org.kframework.attributes.Location(Location(608,8,608,65)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule `_<=String__STRING`(#SemanticCastToString(S1),#SemanticCastToString(S2))=>`notBool_`(`_<String__STRING`(#SemanticCastToString(S2),#SemanticCastToString(S1))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(621) org.kframework.attributes.Location(Location(621,8,621,63)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module STRING$SYNTAX [org.kframework.attributes.Location(Location(573,1,649,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING-SYNTAX$SYNTAX
  imports K-EQUAL$SYNTAX
  imports INT$SYNTAX
  imports FLOAT-SYNTAX$SYNTAX
  syntax associativity left _==String__STRING
  syntax associativity left _=/=String__STRING
  syntax associativity left _+String__STRING
  syntax String ::= String "+String" String [function() functional() hook(STRING.concat) latex({#1}+_{\scriptstyle\it String}{#2}) left()]
  syntax String ::= "substrString" "(" String "," Int "," Int ")" [function() functional() hook(STRING.substr) klabel(substrString)]
  syntax String ::= "replaceFirst" "(" String "," String "," String ")" [function() functional() hook(STRING.replaceFirst)]
  syntax String ::= "replaceAll" "(" String "," String "," String ")" [function() functional() hook(STRING.replaceAll)]
  syntax String ::= "replace" "(" String "," String "," String "," Int ")" [function() hook(STRING.replace)]
  syntax String ::= "newUUID" [function() hook(STRING.uuid) impure()]
  syntax String ::= "directionalityChar" "(" String ")" [function() hook(STRING.directionality) klabel(directionalityChar)]
  syntax String ::= "chrChar" "(" Int ")" [function() hook(STRING.chr) klabel(chrChar)]
  syntax String ::= "categoryChar" "(" String ")" [function() hook(STRING.category) klabel(categoryChar)]
  syntax String ::= "Int2String" "(" Int ")" [function() functional() hook(STRING.int2string) klabel(Int2String)]
  syntax String ::= "Float2String" "(" Float "," String ")" [function() hook(STRING.floatFormat) klabel(FloatFormat)]
  syntax String ::= "Float2String" "(" Float ")" [function() functional() hook(STRING.float2string) klabel(Float2String)]
  syntax String ::= "Base2String" "(" Int "," Int ")" [function() hook(STRING.base2string) klabel(Base2String)]
  syntax Int ::= "rfindString" "(" String "," String "," Int ")" [function() hook(STRING.rfind) klabel(rfindString)]
  syntax Int ::= "rfindChar" "(" String "," String "," Int ")" [function() hook(STRING.rfindChar) klabel(rfindChar)]
  syntax Int ::= "ordChar" "(" String ")" [function() hook(STRING.ord) klabel(ordChar)]
  syntax Int ::= "lengthString" "(" String ")" [function() functional() hook(STRING.length) klabel(lengthString)]
  syntax Int ::= "findString" "(" String "," String "," Int ")" [function() hook(STRING.find) klabel(findString)]
  syntax Int ::= "findChar" "(" String "," String "," Int ")" [function() hook(STRING.findChar) klabel(findChar)]
  syntax Int ::= "countAllOccurrences" "(" String "," String ")" [function() functional() hook(STRING.countAllOccurrences)]
  syntax Int ::= "String2Int" "(" String ")" [function() hook(STRING.string2int) klabel(String2Int)]
  syntax Int ::= "String2Base" "(" String "," Int ")" [function() hook(STRING.string2base) klabel(String2Base)]
  syntax Float ::= "String2Float" "(" String ")" [function() hook(STRING.string2float) klabel(String2Float)]
  syntax Bool ::= String ">String" String [function() functional() hook(STRING.gt)]
  syntax Bool ::= String ">=String" String [function() functional() hook(STRING.ge)]
  syntax Bool ::= String "==String" String [function() functional() hook(STRING.eq) left()]
  syntax Bool ::= String "=/=String" String [function() functional() hook(STRING.ne) left()]
  syntax Bool ::= String "<String" String [function() functional() hook(STRING.lt)]
  syntax Bool ::= String "<=String" String [function() functional() hook(STRING.le)]
endmodule


module STRING-BUFFER$SYNTAX [org.kframework.attributes.Location(Location(675,1,678,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING-BUFFER-IN-K$SYNTAX
endmodule


module STRING-BUFFER-IN-K$SYNTAX [org.kframework.attributes.Location(Location(651,1,663,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k)) symbolic()]
  imports STRING$SYNTAX
  imports BASIC-K$SYNTAX
  syntax associativity left _+String__STRING-BUFFER-IN-K
  syntax StringBuffer ::= StringBuffer "+String" String [avoid() function() functional() left()]
  syntax StringBuffer ::= String
  syntax StringBuffer ::= ".StringBuffer" [function() functional()]
  syntax String ::= "StringBuffer2String" "(" StringBuffer ")" [function() functional() klabel(StringBuffer2String)]
endmodule


module STRING-SYNTAX [org.kframework.attributes.Location(Location(560,1,571,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports STRING-SYNTAX$SYNTAX
  ModuleComment( StringChar ::= ~[\"\n\r\\] // anything except for Newline, DoubleQuote and Backslash,[org.kframework.attributes.Location(Location(563,3,563,90)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( DoubleQuote StringChar* DoubleQuote,[org.kframework.attributes.Location(Location(562,3,562,41)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment( Double Quoted Strings are of the form:,[org.kframework.attributes.Location(Location(561,3,561,44)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(              | [\\][x] 2*Hex // "\xFF"       Backslash 'x' followed by two   hexadecimal characters,[org.kframework.attributes.Location(Location(565,3,565,105)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(              | [\\][u] 4*Hex // "\uFFFF"     Backslash 'u' followed by four  hexadecimal characters,[org.kframework.attributes.Location(Location(566,3,566,105)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(              | [\\][nrtf\"\\] // Backslash followed by either 'nrtf', DoubleQuote or Backslash,[org.kframework.attributes.Location(Location(564,3,564,100)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(              | [\\][U] 8*Hex // "\UFFffFFff" Backslash 'U' followed by eight hexadecimal characters,[org.kframework.attributes.Location(Location(567,3,567,105)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
  ModuleComment(                              // the code must not be in the range [0xdfff, 0xd800] or exceed 0x10ffff,[org.kframework.attributes.Location(Location(568,3,568,107)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))])
endmodule


module STRING-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(560,1,571,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax String [hook(STRING.String) org.kframework.attributes.Location(Location(569,3,569,37)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax String ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token()]
endmodule


module UINT [org.kframework.attributes.Location(Location(7,1,25,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/uint.k))]
  imports UINT$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),execinstr(`___ARMV8-SYNTAX`(#SemanticCastToStepCommand(#token("uint","StepCommand")),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(`#__ARMV8-SYNTAX`(#SemanticCastToInt(I1))),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"V_TEMP3\"","String"),uvalueMInt(mi(#token("32","Int"),#SemanticCastToInt(I1))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(17) org.kframework.attributes.Location(Location(17,8,22,21)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/uint.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment(
  rule <k> setDefaultRegs(uint:StepCommand) => . ... </k>
       <regstate>
         RSMap:Map
       </regstate>
  ,[org.kframework.attributes.Location(Location(10,3,15,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/uint.k))])
endmodule


module UINT$SYNTAX [org.kframework.attributes.Location(Location(7,1,25,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/uint.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module UNSIGNED-INT-SYNTAX [org.kframework.attributes.Location(Location(361,1,364,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  imports UNSIGNED-INT-SYNTAX$SYNTAX
endmodule


module UNSIGNED-INT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(361,1,364,9)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax Int [hook(INT.Int) org.kframework.attributes.Location(Location(362,3,362,28)) org.kframework.attributes.Source(Source(/home/hhh1/kkkk/old-ver/kframework-5.0.0/k-distribution/target/release/k/include/builtin/domains.k))]
  syntax Int ::= r"[0-9]+" [prec(2) prefer() token()]
endmodule


module VMAX [org.kframework.attributes.Location(Location(3,1,59,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k))]
  imports VMAX$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMAX","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,27,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAX","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToQ128(Qd),#SemanticCastToInt(I)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),plugInMask(plugInMask(plugInMask(plugInMask(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("0","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("16","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("24","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(convToRegKeys(#SemanticCastToQ128(Qd)),plugInMask(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`_*Int_`(#SemanticCastToInt(I),#token("32","Int")))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(48) org.kframework.attributes.Location(Location(48,8,57,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAX","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("0","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("8","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("16","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("24","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("0","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("8","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("16","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("24","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("0","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),#token("16","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("16","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("0","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),#token("16","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("16","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),plugInMask(mi(#token("32","Int"),#token("0","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList)),plugInMask(mi(#token("32","Int"),#token("0","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("0","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))))))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(33) org.kframework.attributes.Location(Location(33,8,46,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( the first beat lowest 32b ,[org.kframework.attributes.Location(Location(36,24,36,54)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k))])
  ModuleComment( store 32 bit of result to lowest 32 bit of Qd ,[org.kframework.attributes.Location(Location(52,40,52,90)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k))])
  ModuleComment( finish insert [23:0] ,[org.kframework.attributes.Location(Location(37,60,37,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k))])
  ModuleComment( finish insert [23:0] ,[org.kframework.attributes.Location(Location(36,880,36,905)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k))])
  ModuleComment( finish insert [15:0] ,[org.kframework.attributes.Location(Location(37,101,37,126)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k))])
  ModuleComment( finish insert [15:0] ,[org.kframework.attributes.Location(Location(36,921,36,946)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k))])
  ModuleComment( finish [23:0] ,[org.kframework.attributes.Location(Location(52,169,52,187)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k))])
  ModuleComment( finish [15:0] ,[org.kframework.attributes.Location(Location(52,203,52,221)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k))])
  ModuleComment(
    action for a beat
  ,[org.kframework.attributes.Location(Location(29,3,31,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k))])
endmodule


module VMAX$SYNTAX [org.kframework.attributes.Location(Location(3,1,59,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmax.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMAXA [org.kframework.attributes.Location(Location(3,1,55,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxa.k))]
  imports VMAXA$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMAXA","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,27,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxa.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXA","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToQ128(Qd),#SemanticCastToInt(I)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),plugInMask(plugInMask(plugInMask(plugInMask(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("0","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("16","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("24","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(convToRegKeys(#SemanticCastToQ128(Qd)),plugInMask(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`_*Int_`(#SemanticCastToInt(I),#token("32","Int")))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(42) org.kframework.attributes.Location(Location(42,8,52,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxa.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXA","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("8","Int")),`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("16","Int")),`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("24","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("16","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),plugInMask(mi(#token("32","Int"),#token("0","Int")),`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(29) org.kframework.attributes.Location(Location(29,8,40,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxa.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( the first beat lowest 32b ,[org.kframework.attributes.Location(Location(32,24,32,54)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxa.k))])
  ModuleComment( store 32 bit of result to lowest 32 bit of Qd ,[org.kframework.attributes.Location(Location(46,40,46,90)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxa.k))])
  ModuleComment( finish insert [23:0] ,[org.kframework.attributes.Location(Location(32,880,32,905)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxa.k))])
  ModuleComment( finish insert [15:0] ,[org.kframework.attributes.Location(Location(32,921,32,946)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxa.k))])
  ModuleComment( finish [23:0] ,[org.kframework.attributes.Location(Location(46,169,46,187)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxa.k))])
  ModuleComment( finish [15:0] ,[org.kframework.attributes.Location(Location(46,203,46,221)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxa.k))])
endmodule


module VMAXA$SYNTAX [org.kframework.attributes.Location(Location(3,1,55,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxa.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMAXAV [org.kframework.attributes.Location(Location(3,1,53,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxav.k))]
  imports VMAXAV$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMAXAV","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,27,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXAV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(43) org.kframework.attributes.Location(Location(43,8,50,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXAV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),signExtend(`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),signExtend(`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),signExtend(`LeftAbsMaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("32","Int"),#SemanticCastToMap(RSMap)),#token("32","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) org.kframework.attributes.Location(Location(32,8,41,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( (ifMInt (((((((eqMInt(extractMInt(getReg("CONTROL", RSMap), 31, 32), mi(1,1)) andBool (eqMInt(extractMInt(getReg("CPACR", RSMap), 10, 12), mi(2,3)) andBool (eqMInt(extractMInt(getReg("NSACR", RSMap), 21, 22), mi(1,1))))) andBool eqMInt(extractMInt(getReg("CPPWR", RSMap), 11, 12), mi(1,0))) andBool neMInt(extractMInt(getReg("MVFR1", RSMap), 20, 24), mi(4,0))) andBool (eqMInt(extractMInt(getReg("EPSR", RSMap), 5, 7), mi(2,0)) andBool eqMInt(extractMInt(getReg("EPSR", RSMap), 16, 22), mi(6,2)))) andBool (eqMInt(extractMInt(getReg("FPCCR", RSMap), 31, 32), mi(1,0)) andBool eqMInt(extractMInt(getReg("FPCCR", RSMap), 0, 1), mi(1,1)))) andBool eqMInt(extractMInt(getReg("CONTROL", RSMap), 29, 30), mi(1,0))) andBool eqMInt(extractMInt(getReg("VPR", RSMap), 20, 21), mi(1,1)) ) then ( ifMInt (S ==K S8) then signExtend((LeftAbsMaxMIntOfInt(extractMInt(getVecParentValue(Qm, I, RSMap), 0, 8), (LeftAbsMaxMIntOfInt(extractMInt(getVecParentValue(Qm, I, RSMap), 8, 16), (LeftAbsMaxMIntOfInt(extractMInt(getVecParentValue(Qm, I, RSMap), 16, 24), (LeftAbsMaxMIntOfInt(extractMInt(getVecParentValue(Qm, I, RSMap), 24, 32), (extractMInt(getParentValue(Rd, RSMap), 24, 32)), 8, RSMap)), 8, RSMap)), 8, RSMap)), 8, RSMap)), 32) else (ifMInt (S ==K S16) then signExtend((LeftAbsMaxMIntOfInt(extractMInt(getVecParentValue(Qm, I, RSMap), 0, 16), (LeftAbsMaxMIntOfInt(extractMInt(getVecParentValue(Qm, I, RSMap), 16, 32), (extractMInt(getParentValue(Rd, RSMap), 16, 32)), 16, RSMap)), 16, RSMap)), 32) else (ifMInt (S ==K S32) then signExtend((LeftAbsMaxMIntOfInt(extractMInt(getVecParentValue(Qm, I, RSMap), 0, 32), (getParentValue(Rd, RSMap)), 32, RSMap)), 32) else (undefMInt32) ) ) )  else (undefMInt32) ),[org.kframework.attributes.Location(Location(38,12,38,1711)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxav.k))])
  ModuleComment(
    signExtend
   ,[org.kframework.attributes.Location(Location(29,3,31,5)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxav.k))])
endmodule


module VMAXAV$SYNTAX [org.kframework.attributes.Location(Location(3,1,53,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxav.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMAXNM [org.kframework.attributes.Location(Location(3,1,116,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k))]
  imports VMAXNM$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMAXNM","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPSCR\"","String"),mi(#token("32","Int"),#token("50331648","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,30,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXNM","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sd),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sn),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sm),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(82) org.kframework.attributes.Location(Location(82,8,86,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXNM","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToQ128(Qd),#SemanticCastToInt(I)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),plugInMask(plugInMask(plugInMask(plugInMask(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("0","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("16","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("24","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(convToRegKeys(#SemanticCastToQ128(Qd)),plugInMask(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`_*Int_`(#SemanticCastToInt(I),#token("32","Int")))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(51) org.kframework.attributes.Location(Location(51,8,61,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXNM","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dd),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dn),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dm),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(111) org.kframework.attributes.Location(Location(111,8,115,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXNM","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sd),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sn),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sm),#SemanticCastToOperands(Operands))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convToRegKeys(#SemanticCastToS32(Sd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),zeroExtend(`MaxMIntOfFP`(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`MaxMIntOfFP`(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),getParentValue(#SemanticCastToS32(Sd),#SemanticCastToMap(RSMap))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(#token("\"FPSCR\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),mi(#token("32","Int"),#token("50331648","Int"))))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(66) org.kframework.attributes.Location(Location(66,8,80,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXNM","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),plugInMask(mi(#token("32","Int"),#token("0","Int")),`MaxMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`MaxMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`MaxMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("16","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(#token("\"FPSCR\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int"))))),mi(#token("32","Int"),#token("50331649","Int")),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(36) org.kframework.attributes.Location(Location(36,8,49,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXNM","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dd),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dn),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dm),#SemanticCastToOperands(Operands))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToD64(Dd),#SemanticCastToInt(I)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F64_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int"))))),plugInMask(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),mi(#token("32","Int"),#token("0","Int")),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),`_andBool_`(neMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),`_andBool_`(neMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("0","Int")))))),plugInMask(getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),mi(#token("32","Int"),#token("0","Int")),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int")))),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int")))),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))))),ugtMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")))),extractMInt(getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))))),uleMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")))),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(`MInt2Float`(concatenateMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),#token("53","Int"),#token("11","Int")),`MInt2Float`(concatenateMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),#token("53","Int"),#token("11","Int"))),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))))))))))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I),#token("1","Int")),getVecParentValue(#SemanticCastToD64(Dd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(convVecToRegKeys(#SemanticCastToD64(Dd),`_+Int_`(#SemanticCastToInt(I),#token("1","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F64_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int"))))),plugInMask(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),mi(#token("32","Int"),#token("2146959360","Int")),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),`_andBool_`(neMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),`_andBool_`(neMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("0","Int")))))),plugInMask(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),mi(#token("32","Int"),#token("2146959360","Int")),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int")))),getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int")))),getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))))),ugtMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")))),extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))))),uleMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")))),getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_<=Float__FLOAT`(`MInt2Float`(concatenateMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),#token("53","Int"),#token("11","Int")),`MInt2Float`(concatenateMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),#token("53","Int"),#token("11","Int"))),getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap))))))))))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),`_|->_`(#token("\"FPSCR\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F64_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),`_andBool_`(neMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),`_andBool_`(neMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),mi(#token("32","Int"),#token("50331648","Int"))),mi(#token("32","Int"),#token("50331648","Int")))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(91) org.kframework.attributes.Location(Location(91,8,109,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( top 16 bit ,[org.kframework.attributes.Location(Location(42,14,42,29)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k))])
  ModuleComment( store 32 bit of result to lowest 32 bit of Qd ,[org.kframework.attributes.Location(Location(55,40,55,90)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k))])
  ModuleComment( low 16 bit ,[org.kframework.attributes.Location(Location(41,84,41,99)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k))])
  ModuleComment( finish [23:0] ,[org.kframework.attributes.Location(Location(55,169,55,187)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k))])
  ModuleComment( finish [15:0] ,[org.kframework.attributes.Location(Location(55,203,55,221)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k))])
  ModuleComment( 0000 0011 0000 0000 0000 0000 0000 0000 ,[org.kframework.attributes.Location(Location(27,41,27,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k))])
  ModuleComment(
    vector action for a beat
  ,[org.kframework.attributes.Location(Location(32,3,34,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k))])
  ModuleComment(
    FP S register action
  ,[org.kframework.attributes.Location(Location(63,3,65,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k))])
  ModuleComment(
    FP D register action
  ,[org.kframework.attributes.Location(Location(88,3,90,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k))])
endmodule


module VMAXNM$SYNTAX [org.kframework.attributes.Location(Location(3,1,116,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnm.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMAXNMA [org.kframework.attributes.Location(Location(3,1,59,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnma.k))]
  imports VMAXNMA$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMAXNMA","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPSCR\"","String"),mi(#token("32","Int"),#token("50331648","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,30,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnma.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXNMA","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToQ128(Qd),#SemanticCastToInt(I)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),plugInMask(plugInMask(plugInMask(plugInMask(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("0","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("16","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("24","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(convToRegKeys(#SemanticCastToQ128(Qd)),plugInMask(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`_*Int_`(#SemanticCastToInt(I),#token("32","Int")))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(48) org.kframework.attributes.Location(Location(48,8,58,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnma.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXNMA","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),plugInMask(mi(#token("32","Int"),#token("0","Int")),`AbsMaxMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`AbsMaxMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`AbsMaxMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("16","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(#token("\"FPSCR\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int"))))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),mi(#token("32","Int"),#token("50331648","Int"))))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) org.kframework.attributes.Location(Location(32,8,46,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnma.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( top 16 bit ,[org.kframework.attributes.Location(Location(39,14,39,29)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnma.k))])
  ModuleComment( low 16 bit ,[org.kframework.attributes.Location(Location(38,84,38,99)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnma.k))])
  ModuleComment( finish [23:0] ,[org.kframework.attributes.Location(Location(52,117,52,135)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnma.k))])
  ModuleComment( finish [15:0] ,[org.kframework.attributes.Location(Location(52,151,52,169)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnma.k))])
  ModuleComment( 0000 0011 0000 0000 0000 0000 0000 0000 ,[org.kframework.attributes.Location(Location(27,41,27,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnma.k))])
endmodule


module VMAXNMA$SYNTAX [org.kframework.attributes.Location(Location(3,1,59,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnma.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMAXNMAV [org.kframework.attributes.Location(Location(3,1,58,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnmav.k))]
  imports VMAXNMAV$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMAXNMAV","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPSCR\"","String"),mi(#token("32","Int"),#token("50331648","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,30,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnmav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXNMAV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(47) org.kframework.attributes.Location(Location(47,8,54,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnmav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXNMAV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),concatenateMInt(mi(#token("16","Int"),#token("0","Int")),`LeftAbsMaxMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),`LeftAbsMaxMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("16","Int"),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`LeftAbsMaxMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(#token("\"FPSCR\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int"))))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),mi(#token("32","Int"),#token("50331648","Int"))))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) org.kframework.attributes.Location(Location(32,8,45,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnmav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( 0000 0011 0000 0000 0000 0000 0000 0000 ,[org.kframework.attributes.Location(Location(27,41,27,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnmav.k))])
endmodule


module VMAXNMAV$SYNTAX [org.kframework.attributes.Location(Location(3,1,58,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnmav.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMAXNMV [org.kframework.attributes.Location(Location(3,1,56,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnmv.k))]
  imports VMAXNMV$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMAXNMV","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPSCR\"","String"),mi(#token("32","Int"),#token("50331648","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,30,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnmv.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXNMV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(47) org.kframework.attributes.Location(Location(47,8,54,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnmv.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXNMV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),concatenateMInt(mi(#token("16","Int"),#token("0","Int")),`LeftMaxMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),`LeftMaxMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("16","Int"),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`LeftMaxMIntOfFP`(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("32","Int"),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(#token("\"FPSCR\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int"))))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),mi(#token("32","Int"),#token("50331648","Int"))))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) org.kframework.attributes.Location(Location(32,8,45,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnmv.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( 0000 0011 0000 0000 0000 0000 0000 0000 ,[org.kframework.attributes.Location(Location(27,41,27,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnmv.k))])
endmodule


module VMAXNMV$SYNTAX [org.kframework.attributes.Location(Location(3,1,56,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxnmv.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMAXV [org.kframework.attributes.Location(Location(3,1,53,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxv.k))]
  imports VMAXV$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMAXV","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,27,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxv.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(43) org.kframework.attributes.Location(Location(43,8,50,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxv.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMAXV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),signExtend(`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("8","Int"),`S8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),`S8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),`S8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),`S8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),signExtend(`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),`S16_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("16","Int"),`S16_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),signExtend(`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("32","Int"),`S32_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),signExtend(`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("8","Int"),`U8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),`U8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),`U8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),`U8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList)),signExtend(`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),`U16_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("16","Int"),`U16_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList)),signExtend(`MaxMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("32","Int"),`U32_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))))))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) org.kframework.attributes.Location(Location(32,8,41,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxv.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment(
    signExtend
   ,[org.kframework.attributes.Location(Location(29,3,31,5)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxv.k))])
endmodule


module VMAXV$SYNTAX [org.kframework.attributes.Location(Location(3,1,53,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmaxv.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMIN [org.kframework.attributes.Location(Location(3,1,59,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k))]
  imports VMIN$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMIN","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,27,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMIN","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToQ128(Qd),#SemanticCastToInt(I)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),plugInMask(plugInMask(plugInMask(plugInMask(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("0","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("16","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("24","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(convToRegKeys(#SemanticCastToQ128(Qd)),plugInMask(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`_*Int_`(#SemanticCastToInt(I),#token("32","Int")))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(48) org.kframework.attributes.Location(Location(48,8,57,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMIN","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("0","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("8","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("16","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("24","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("0","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("8","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("16","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("8","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("24","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("0","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),#token("16","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("16","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("0","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),#token("16","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("16","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),plugInMask(mi(#token("32","Int"),#token("0","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList)),plugInMask(mi(#token("32","Int"),#token("0","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToLabel(S),#SemanticCastToMap(RSMap)),#token("0","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))))))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(33) org.kframework.attributes.Location(Location(33,8,46,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( the first beat lowest 32b ,[org.kframework.attributes.Location(Location(36,24,36,54)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k))])
  ModuleComment( store 32 bit of result to lowest 32 bit of Qd ,[org.kframework.attributes.Location(Location(52,40,52,90)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k))])
  ModuleComment( finish insert [23:0] ,[org.kframework.attributes.Location(Location(37,60,37,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k))])
  ModuleComment( finish insert [23:0] ,[org.kframework.attributes.Location(Location(36,880,36,905)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k))])
  ModuleComment( finish insert [15:0] ,[org.kframework.attributes.Location(Location(37,101,37,126)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k))])
  ModuleComment( finish insert [15:0] ,[org.kframework.attributes.Location(Location(36,921,36,946)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k))])
  ModuleComment( finish [23:0] ,[org.kframework.attributes.Location(Location(52,169,52,187)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k))])
  ModuleComment( finish [15:0] ,[org.kframework.attributes.Location(Location(52,203,52,221)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k))])
  ModuleComment(
    action for a beat
  ,[org.kframework.attributes.Location(Location(29,3,31,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k))])
endmodule


module VMIN$SYNTAX [org.kframework.attributes.Location(Location(3,1,59,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmin.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMINA [org.kframework.attributes.Location(Location(3,1,55,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmina.k))]
  imports VMINA$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMINA","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,27,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmina.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINA","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToQ128(Qd),#SemanticCastToInt(I)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),plugInMask(plugInMask(plugInMask(plugInMask(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("0","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("16","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("24","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(convToRegKeys(#SemanticCastToQ128(Qd)),plugInMask(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`_*Int_`(#SemanticCastToInt(I),#token("32","Int")))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(42) org.kframework.attributes.Location(Location(42,8,52,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmina.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINA","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("8","Int")),`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("16","Int")),`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("24","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("16","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),plugInMask(mi(#token("32","Int"),#token("0","Int")),`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(29) org.kframework.attributes.Location(Location(29,8,40,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmina.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( the first beat lowest 32b ,[org.kframework.attributes.Location(Location(32,24,32,54)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmina.k))])
  ModuleComment( store 32 bit of result to lowest 32 bit of Qd ,[org.kframework.attributes.Location(Location(46,40,46,90)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmina.k))])
  ModuleComment( finish insert [23:0] ,[org.kframework.attributes.Location(Location(32,880,32,905)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmina.k))])
  ModuleComment( finish insert [15:0] ,[org.kframework.attributes.Location(Location(32,921,32,946)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmina.k))])
  ModuleComment( finish [23:0] ,[org.kframework.attributes.Location(Location(46,169,46,187)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmina.k))])
  ModuleComment( finish [15:0] ,[org.kframework.attributes.Location(Location(46,203,46,221)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmina.k))])
endmodule


module VMINA$SYNTAX [org.kframework.attributes.Location(Location(3,1,55,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmina.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMINAV [org.kframework.attributes.Location(Location(3,1,52,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminav.k))]
  imports VMINAV$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMINAV","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,27,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINAV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(42) org.kframework.attributes.Location(Location(42,8,49,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINAV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),signExtend(`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("8","Int"),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),signExtend(`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),signExtend(`LeftAbsMinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("32","Int"),#SemanticCastToMap(RSMap)),#token("32","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) org.kframework.attributes.Location(Location(32,8,40,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment(
    signExtend
   ,[org.kframework.attributes.Location(Location(29,3,31,5)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminav.k))])
endmodule


module VMINAV$SYNTAX [org.kframework.attributes.Location(Location(3,1,52,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminav.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMINNM [org.kframework.attributes.Location(Location(3,1,116,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k))]
  imports VMINNM$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMINNM","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPSCR\"","String"),mi(#token("32","Int"),#token("50331648","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,30,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINNM","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sd),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sn),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sm),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(82) org.kframework.attributes.Location(Location(82,8,86,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINNM","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToQ128(Qd),#SemanticCastToInt(I)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),plugInMask(plugInMask(plugInMask(plugInMask(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("0","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("16","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("24","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(convToRegKeys(#SemanticCastToQ128(Qd)),plugInMask(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`_*Int_`(#SemanticCastToInt(I),#token("32","Int")))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(51) org.kframework.attributes.Location(Location(51,8,61,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINNM","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dd),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dn),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dm),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(111) org.kframework.attributes.Location(Location(111,8,115,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINNM","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sd),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sn),`_,__ARMV8-SYNTAX`(#SemanticCastToS32(Sm),#SemanticCastToOperands(Operands))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convToRegKeys(#SemanticCastToS32(Sd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),zeroExtend(`MinMIntOfFP`(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`MinMIntOfFP`(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),getParentValue(#SemanticCastToS32(Sd),#SemanticCastToMap(RSMap))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(#token("\"FPSCR\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToS32(Sn),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToS32(Sm),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),mi(#token("32","Int"),#token("50331648","Int"))))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(66) org.kframework.attributes.Location(Location(66,8,80,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINNM","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),plugInMask(mi(#token("32","Int"),#token("0","Int")),`MinMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`MinMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`MinMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("16","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(#token("\"FPSCR\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int"))))),mi(#token("32","Int"),#token("50331649","Int")),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(36) org.kframework.attributes.Location(Location(36,8,49,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINNM","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dd),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dn),`_,__ARMV8-SYNTAX`(#SemanticCastToD64(Dm),#SemanticCastToOperands(Operands))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToD64(Dd),#SemanticCastToInt(I)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToInt(I),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F64_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int"))))),plugInMask(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),mi(#token("32","Int"),#token("0","Int")),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),`_andBool_`(neMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),`_andBool_`(neMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("0","Int")))))),plugInMask(getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),mi(#token("32","Int"),#token("0","Int")),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int")))),extractMInt(getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int")))),extractMInt(getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))))),ugtMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")))),extractMInt(getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))))),uleMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")))),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>=Float__FLOAT`(`MInt2Float`(concatenateMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),#token("53","Int"),#token("11","Int")),`MInt2Float`(concatenateMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),#token("53","Int"),#token("11","Int"))),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))))))))))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I),#token("1","Int")),getVecParentValue(#SemanticCastToD64(Dd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(convVecToRegKeys(#SemanticCastToD64(Dd),`_+Int_`(#SemanticCastToInt(I),#token("1","Int"))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F64_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int"))))),plugInMask(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),mi(#token("32","Int"),#token("2146959360","Int")),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),`_andBool_`(neMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),`_andBool_`(neMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("0","Int")))))),plugInMask(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),mi(#token("32","Int"),#token("2146959360","Int")),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int")))),extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("1","Int")))),extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))),getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))))),ugtMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")))),extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),#token("0","Int")),eqMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))))),uleMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")))),getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_>=Float__FLOAT`(`MInt2Float`(concatenateMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),#token("53","Int"),#token("11","Int")),`MInt2Float`(concatenateMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),#token("53","Int"),#token("11","Int"))),getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap))))))))))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),`_|->_`(#token("\"FPSCR\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F64_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),`_andBool_`(neMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dn),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("12","Int"))),`MaxExponentBits`(#token("11","Int"))),`_andBool_`(neMInt(concatenateMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("32","Int")),getVecParentValue(#SemanticCastToD64(Dm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),mi(#token("52","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToD64(Dm),`_+Int_`(#SemanticCastToInt(I),#token("1","Int")),#SemanticCastToMap(RSMap)),#token("12","Int"),#token("13","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),mi(#token("32","Int"),#token("50331648","Int"))),mi(#token("32","Int"),#token("50331648","Int"))),mi(#token("32","Int"),#token("50331648","Int")))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(91) org.kframework.attributes.Location(Location(91,8,109,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( top 16 bit ,[org.kframework.attributes.Location(Location(42,14,42,29)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k))])
  ModuleComment( store 32 bit of result to lowest 32 bit of Qd ,[org.kframework.attributes.Location(Location(55,40,55,90)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k))])
  ModuleComment( low 16 bit ,[org.kframework.attributes.Location(Location(41,84,41,99)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k))])
  ModuleComment( finish [23:0] ,[org.kframework.attributes.Location(Location(55,169,55,187)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k))])
  ModuleComment( finish [15:0] ,[org.kframework.attributes.Location(Location(55,203,55,221)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k))])
  ModuleComment( 0000 0011 0000 0000 0000 0000 0000 0000 ,[org.kframework.attributes.Location(Location(27,41,27,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k))])
  ModuleComment(
    vector action for a beat
  ,[org.kframework.attributes.Location(Location(32,3,34,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k))])
  ModuleComment(
    FP S register action
  ,[org.kframework.attributes.Location(Location(63,3,65,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k))])
  ModuleComment(
    FP D register action
  ,[org.kframework.attributes.Location(Location(88,3,90,4)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k))])
endmodule


module VMINNM$SYNTAX [org.kframework.attributes.Location(Location(3,1,116,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnm.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMINNMA [org.kframework.attributes.Location(Location(3,1,59,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnma.k))]
  imports VMINNMA$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMINNMA","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPSCR\"","String"),mi(#token("32","Int"),#token("50331648","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,30,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnma.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINNMA","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToQ128(Qd),#SemanticCastToInt(I)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),plugInMask(plugInMask(plugInMask(plugInMask(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("0","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),#token("8","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),#token("16","Int")),extractMInt(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),#token("24","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(convToRegKeys(#SemanticCastToQ128(Qd)),plugInMask(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`_*Int_`(#SemanticCastToInt(I),#token("32","Int")))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(48) org.kframework.attributes.Location(Location(48,8,58,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnma.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINNMA","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),plugInMask(mi(#token("32","Int"),#token("0","Int")),`AbsMinMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),plugInMask(plugInMask(mi(#token("32","Int"),#token("0","Int")),`AbsMinMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("0","Int")),`AbsMinMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("16","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(#token("\"FPSCR\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qd),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int"))))),mi(#token("32","Int"),#token("50331649","Int")),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) org.kframework.attributes.Location(Location(32,8,46,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnma.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( top 16 bit ,[org.kframework.attributes.Location(Location(39,14,39,29)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnma.k))])
  ModuleComment( store 32 bit of result to lowest 32 bit of Qd ,[org.kframework.attributes.Location(Location(52,40,52,90)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnma.k))])
  ModuleComment( low 16 bit ,[org.kframework.attributes.Location(Location(38,84,38,99)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnma.k))])
  ModuleComment( finish [23:0] ,[org.kframework.attributes.Location(Location(52,169,52,187)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnma.k))])
  ModuleComment( finish [15:0] ,[org.kframework.attributes.Location(Location(52,203,52,221)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnma.k))])
  ModuleComment( 0000 0011 0000 0000 0000 0000 0000 0000 ,[org.kframework.attributes.Location(Location(27,41,27,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnma.k))])
endmodule


module VMINNMA$SYNTAX [org.kframework.attributes.Location(Location(3,1,59,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnma.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMINNMAV [org.kframework.attributes.Location(Location(3,1,58,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnmav.k))]
  imports VMINNMAV$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMINNMAV","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPSCR\"","String"),mi(#token("32","Int"),#token("50331648","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,30,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnmav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINNMAV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(47) org.kframework.attributes.Location(Location(47,8,54,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnmav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINNMAV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),concatenateMInt(mi(#token("16","Int"),#token("0","Int")),`LeftAbsMinMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),`LeftAbsMinMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("16","Int"),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`LeftAbsMinMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),#token("32","Int"),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(#token("\"FPSCR\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) org.kframework.attributes.Location(Location(32,8,45,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnmav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( 0000 0011 0000 0000 0000 0000 0000 0000 ,[org.kframework.attributes.Location(Location(27,41,27,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnmav.k))])
endmodule


module VMINNMAV$SYNTAX [org.kframework.attributes.Location(Location(3,1,58,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnmav.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMINNMV [org.kframework.attributes.Location(Location(3,1,56,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnmv.k))]
  imports VMINNMV$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMINNMV","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("2147483648","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPSCR\"","String"),mi(#token("32","Int"),#token("50331648","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,30,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnmv.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINNMV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(47) org.kframework.attributes.Location(Location(47,8,54,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnmv.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINNMV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),concatenateMInt(mi(#token("16","Int"),#token("0","Int")),`LeftMinMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),`LeftMinMIntOfFP`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),#SemanticCastToMap(RSMap)),#token("16","Int"),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`LeftMinMIntOfFP`(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("32","Int"),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))),`_|->_`(#token("\"FPSCR\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F32_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("9","Int"))),`MaxExponentBits`(#token("8","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("32","Int")),mi(#token("23","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("9","Int"),#token("10","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`F16_ARMV8-SYNTAX`(.KList)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_orBool_`(`_andBool_`(`_orBool_`(`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int"))))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("1","Int"),#token("6","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("16","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("6","Int"),#token("7","Int")),mi(#token("1","Int"),#token("0","Int")))))),eqMInt(extractMInt(getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("6","Int")),mi(#token("1","Int"),#token("0","Int")))),`_andBool_`(`_==Int_`(uvalueMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("17","Int"),#token("22","Int"))),`MaxExponentBits`(#token("5","Int"))),`_andBool_`(neMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("32","Int")),mi(#token("10","Int"),#token("0","Int"))),eqMInt(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("22","Int"),#token("23","Int")),mi(#token("1","Int"),#token("0","Int")))))),mi(#token("32","Int"),#token("50331649","Int")),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))),getReg(#token("\"FPSCR\"","String"),#SemanticCastToMap(RSMap))))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) org.kframework.attributes.Location(Location(32,8,45,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnmv.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment( 0000 0011 0000 0000 0000 0000 0000 0000 ,[org.kframework.attributes.Location(Location(27,41,27,85)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnmv.k))])
endmodule


module VMINNMV$SYNTAX [org.kframework.attributes.Location(Location(3,1,56,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminnmv.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMINV [org.kframework.attributes.Location(Location(3,1,53,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminv.k))]
  imports VMINV$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMINV","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,27,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminv.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),getParentValue(`result_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(43) org.kframework.attributes.Location(Location(43,8,50,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminv.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMINV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"RESULT\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),signExtend(`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("8","Int"),`S8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),`S8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),`S8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),`S8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),signExtend(`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),`S16_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("16","Int"),`S16_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),signExtend(`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("32","Int"),`S32_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),signExtend(`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("8","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("8","Int"),#token("16","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("24","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("24","Int"),#token("32","Int")),#token("8","Int"),`U8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),`U8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),`U8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("8","Int"),`U8_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList)),signExtend(`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("16","Int")),`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),extractMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("32","Int")),#token("16","Int"),`U16_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("16","Int"),`U16_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList)),signExtend(`MinMIntOfInt`(extractMInt(getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("32","Int")),getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)),#token("32","Int"),`U32_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList))))))),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(32) org.kframework.attributes.Location(Location(32,8,41,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminv.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  ModuleComment(
    signExtend
   ,[org.kframework.attributes.Location(Location(29,3,31,5)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminv.k))])
endmodule


module VMINV$SYNTAX [org.kframework.attributes.Location(Location(3,1,53,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vminv.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMLAV [org.kframework.attributes.Location(Location(3,1,96,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmlav.k))]
  imports VMLAV$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMLAVA","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(52) org.kframework.attributes.Location(Location(52,8,75,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmlav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMLAV","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_Map_`(`_|->_`(#token("\"CONTROL\"","String"),mi(#token("32","Int"),#token("1","Int"))),`_|->_`(#token("\"CONTROL_S\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CONTROL_NS\"","String"),mi(#token("32","Int"),#token("1","Int")))),`_|->_`(#token("\"CPACR\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_S\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"CPACR_NS\"","String"),mi(#token("32","Int"),#token("3145728","Int")))),`_|->_`(#token("\"NSACR\"","String"),mi(#token("32","Int"),#token("1024","Int")))),`_|->_`(#token("\"CPPWR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"CPPWR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"MVFR1\"","String"),mi(#token("32","Int"),#token("256","Int")))),`_|->_`(#token("\"EPSR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"FPCCR\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_S\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"FPCCR_NS\"","String"),mi(#token("32","Int"),#token("0","Int")))),`_|->_`(#token("\"VPR\"","String"),mi(#token("32","Int"),#token("2048","Int")))),`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,29,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmlav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMLAVA","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result64_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),extractMInt(getParentValue(`result64_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int"),#token("64","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(87) org.kframework.attributes.Location(Location(87,8,94,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmlav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMLAV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),`.List{"_,__ARMV8-SYNTAX"}`(.KList))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(convToRegKeys(#SemanticCastToR32(Rd)),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(`result64_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)))),extractMInt(getParentValue(`result64_ARMV8-SYNTAX`(.KList),#SemanticCastToMap(RSMap)),#token("32","Int"),#token("64","Int")),`undefMInt32_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(43) org.kframework.attributes.Location(Location(43,8,50,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmlav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMLAVA","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"RESULT64\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),mi(#token("64","Int"),`_+Int_`(uvalueMInt(uMulofInt8(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))),uvalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),mi(#token("64","Int"),`_+Int_`(svalueMInt(sMulofInt8(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))),svalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList)),mi(#token("64","Int"),`_+Int_`(uvalueMInt(uMulofInt16(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))),uvalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),mi(#token("64","Int"),`_+Int_`(svalueMInt(sMulofInt16(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))),svalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList)),mi(#token("64","Int"),`_+Int_`(uvalueMInt(uMulofInt32(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))),uvalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),mi(#token("64","Int"),`_+Int_`(svalueMInt(sMulofInt32(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))),svalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))))),`undefMInt64_ARMV8-MINT-SYNTAX`(.KList))))))),`undefMInt64_ARMV8-MINT-SYNTAX`(.KList)),`undefMInt64_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(77) org.kframework.attributes.Location(Location(77,8,85,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmlav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),beatResult(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMLAV","Opcode")),#SemanticCastToLabel(S),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qn),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qm),#SemanticCastToOperands(Operands))))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_|->_`(#token("\"RESULT64\"","String"),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("1","Int"))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"CPACR\"","String"),#SemanticCastToMap(RSMap)),#token("10","Int"),#token("12","Int")),mi(#token("2","Int"),#token("3","Int"))),eqMInt(extractMInt(getReg(#token("\"NSACR\"","String"),#SemanticCastToMap(RSMap)),#token("21","Int"),#token("22","Int")),mi(#token("1","Int"),#token("1","Int"))))),eqMInt(extractMInt(getReg(#token("\"CPPWR\"","String"),#SemanticCastToMap(RSMap)),#token("11","Int"),#token("12","Int")),mi(#token("1","Int"),#token("0","Int")))),neMInt(extractMInt(getReg(#token("\"MVFR1\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("24","Int")),mi(#token("4","Int"),#token("0","Int")))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("5","Int"),#token("7","Int")),mi(#token("2","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"EPSR\"","String"),#SemanticCastToMap(RSMap)),#token("16","Int"),#token("22","Int")),mi(#token("6","Int"),#token("2","Int"))))),`_andBool_`(eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("31","Int"),#token("32","Int")),mi(#token("1","Int"),#token("0","Int"))),eqMInt(extractMInt(getReg(#token("\"FPCCR\"","String"),#SemanticCastToMap(RSMap)),#token("0","Int"),#token("1","Int")),mi(#token("1","Int"),#token("0","Int"))))),eqMInt(extractMInt(getReg(#token("\"CONTROL\"","String"),#SemanticCastToMap(RSMap)),#token("29","Int"),#token("30","Int")),mi(#token("1","Int"),#token("0","Int")))),eqMInt(extractMInt(getReg(#token("\"VPR\"","String"),#SemanticCastToMap(RSMap)),#token("20","Int"),#token("21","Int")),mi(#token("1","Int"),#token("1","Int")))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==Int_`(#SemanticCastToInt(I),#token("0","Int")),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),uMulofInt8(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),sMulofInt8(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList)),uMulofInt16(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),sMulofInt16(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList)),uMulofInt32(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),sMulofInt32(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),`undefMInt64_ARMV8-MINT-SYNTAX`(.KList))))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`notBool_`(`IsUndef`(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap)))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U8_ARMV8-SYNTAX`(.KList)),mi(#token("64","Int"),`_+Int_`(uvalueMInt(uMulofInt8(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))),uvalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S8_ARMV8-SYNTAX`(.KList)),mi(#token("64","Int"),`_+Int_`(svalueMInt(sMulofInt8(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))),svalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U16_ARMV8-SYNTAX`(.KList)),mi(#token("64","Int"),`_+Int_`(uvalueMInt(uMulofInt16(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))),uvalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S16_ARMV8-SYNTAX`(.KList)),mi(#token("64","Int"),`_+Int_`(svalueMInt(sMulofInt16(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))),svalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`U32_ARMV8-SYNTAX`(.KList)),mi(#token("64","Int"),`_+Int_`(uvalueMInt(uMulofInt32(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))),uvalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))))),`ifMInt_then_else__ARMV8-MINT-SYNTAX`(`_==K_`(#SemanticCastToLabel(S),`S32_ARMV8-SYNTAX`(.KList)),mi(#token("64","Int"),`_+Int_`(svalueMInt(sMulofInt32(getVecParentValue(#SemanticCastToQ128(Qn),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)),getVecParentValue(#SemanticCastToQ128(Qm),#SemanticCastToInt(I),#SemanticCastToMap(RSMap)))),svalueMInt(getParentValue(#SemanticCastToR32(Rd),#SemanticCastToMap(RSMap))))),`undefMInt64_ARMV8-MINT-SYNTAX`(.KList))))))),`undefMInt64_ARMV8-MINT-SYNTAX`(.KList))),`undefMInt64_ARMV8-MINT-SYNTAX`(.KList)))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(31) org.kframework.attributes.Location(Location(31,8,41,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmlav.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
endmodule


module VMLAV$SYNTAX [org.kframework.attributes.Location(Location(3,1,96,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmlav.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule


module VMOV [org.kframework.attributes.Location(Location(3,1,46,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmov.k))]
  imports VMOV$SYNTAX
  imports ARMV8-CONFIGURATION
  rule #cells(`<k>`(#noDots(.KList),setDefaultRegs(#SemanticCastToOpcode(#token("VMOV","Opcode")))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(#token("\"RESULT\"","String"),mi(#token("32","Int"),#token("0","Int"))),`_|->_`(#token("\"RESULT64\"","String"),mi(#token("64","Int"),#token("0","Int"))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(6) org.kframework.attributes.Location(Location(6,8,13,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmov.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMOV","Opcode")),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qs),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToQ128(Qd),#SemanticCastToInt(I)),getVecParentValue(#SemanticCastToQ128(Qs),#SemanticCastToInt(I),#SemanticCastToMap(RSMap))),`_|->_`(convToRegKeys(#SemanticCastToQ128(Qd)),getParentValue(#SemanticCastToQ128(Qs),#SemanticCastToMap(RSMap))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(25) org.kframework.attributes.Location(Location(25,8,32,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmov.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstrBeat(`___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMOV","Opcode")),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),`_,__ARMV8-SYNTAX`(#SemanticCastToImm(Imm128),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))),#SemanticCastToInt(I))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convToRegKeys(#SemanticCastToQ128(Qd)),mi(#token("128","Int"),modImm128(#SemanticCastToImm(Imm128)))),`_|->_`(convVecToRegKeys(#SemanticCastToQ128(Qd),#SemanticCastToInt(I)),extractMInt(`Imm2MInt`(#SemanticCastToImm(Imm128),#token("128","Int"),#token("128","Int")),`_-Int_`(#token("96","Int"),`_*Int_`(#token("32","Int"),#SemanticCastToInt(I))),`_-Int_`(#token("128","Int"),`_*Int_`(#token("32","Int"),#SemanticCastToInt(I))))))),#noDots(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(15) org.kframework.attributes.Location(Location(15,8,23,19)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmov.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions) symbol()])]
  rule #cells(`<k>`(#noDots(.KList),execinstr(`_.___ARMV8-SYNTAX`(#SemanticCastToOpcode(#token("VMOV","Opcode")),#SemanticCastToNLabel(`$__ARMV8-SYNTAX`(#SemanticCastToInt(S))),`_,__ARMV8-SYNTAX`(#SemanticCastToQ128(`_[_]_ARMV8-SYNTAX`(#SemanticCastToQ128(Qd),#SemanticCastToInt(I))),`_,__ARMV8-SYNTAX`(#SemanticCastToR32(Rn),`.List{"_,__ARMV8-SYNTAX"}`(.KList)))))=>.K,#dots(.KList)),`<regstate>`(#noDots(.KList),#SemanticCastToMap(RSMap)=>updateMap(#SemanticCastToMap(RSMap),`_Map_`(`_|->_`(convVecToRegKeys(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I),`_/Int_`(#token("32","Int"),#SemanticCastToInt(S)))),plugInMask(getVecParentValue(#SemanticCastToQ128(Qd),`_/Int_`(#SemanticCastToInt(I),`_/Int_`(#token("32","Int"),#SemanticCastToInt(S))),#SemanticCastToMap(RSMap)),extractMInt(getParentValue(#SemanticCastToR32(Rn),#SemanticCastToMap(RSMap)),`_-Int_`(#token("32","Int"),#SemanticCastToInt(S)),#token("32","Int")),`_*Int_`(`_%Int_`(#SemanticCastToInt(I),`_/Int_`(#token("32","Int"),#SemanticCastToInt(S))),#SemanticCastToInt(S)))),`_|->_`(convToRegKeys(#SemanticCastToQ128(Qd)),plugInMask(getParentValue(#SemanticCastToQ128(Qd),#SemanticCastToMap(RSMap)),extractMInt(getParentValue(#SemanticCastToR32(Rn),#SemanticCastToMap(RSMap)),`_-Int_`(#token("32","Int"),#SemanticCastToInt(S)),#token("32","Int")),`_*Int_`(#SemanticCastToInt(I),#SemanticCastToInt(S)))))),#noDots(.KList))) requires `_andBool_`(`_andBool_`(`_>=Int_`(#SemanticCastToInt(I),#token("0","Int")),`_<Int_`(#SemanticCastToInt(I),#token("16","Int"))),`_orBool_`(`_orBool_`(`_==Int_`(#SemanticCastToInt(S),#token("8","Int")),`_==Int_`(#SemanticCastToInt(S),#token("16","Int"))),`_==Int_`(#SemanticCastToInt(S),#token("32","Int")))) ensures #token("true","Bool") [contentStartColumn(8) contentStartLine(34) org.kframework.attributes.Location(Location(34,8,41,102)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmov.k)) org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" K [klabel(#ruleRequires) symbol()])]
endmodule


module VMOV$SYNTAX [org.kframework.attributes.Location(Location(3,1,46,9)) org.kframework.attributes.Source(Source(/home/hhh1/PsCom/vmov.k))]
  imports ARMV8-CONFIGURATION$SYNTAX
endmodule