Script started on 2022-09-13 17:35:02+08:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="203" LINES="46"]
]0;hhh1@hhh1-virtual-machine:~/PsCom\]7;file://hhh1-virtual-machine/home/hhh1/PsCom\]0;hhh1@hhh1-virtual-machine: ~/PsCom[01;32mhhh1@hhh1-virtual-machine[00m:[01;34m~/PsCom[00m$ vim vmlav-timeout.log kprove test-spec-maa.k -v --z3-impl-timeout 36000 --debug-z3-queries
Parse command line options                                   =  0.000s
Importing: Source(/home/hhh1/PsCom/././test-spec-maa.k)
Importing: Source(/home/hhh1/PsCom/test-spec-maa.k)
Importing: Source(/home/hhh1/PsCom/armv8-semantics.k)
Importing: Source(/home/hhh1/PsCom/armv8-loader.k)
Importing: Source(/home/hhh1/PsCom/armv8-configuration.k)
Importing: Source(/home/hhh1/PsCom/armv8-syntax.k)
Importing: Source(/home/hhh1/PsCom/armv8-abstract-syntax.k)
Importing: Source(/home/hhh1/PsCom/armv8-mint.k)
Importing: Source(/home/hhh1/PsCom/armv8-conversions.k)
Importing: Source(/home/hhh1/PsCom/vmax.k)
Importing: Source(/home/hhh1/PsCom/armv8-abstract-semantic.k)
Importing: Source(/home/hhh1/PsCom/armv8-verification.k)
Importing: Source(/home/hhh1/PsCom/exit.k)
Importing: Source(/home/hhh1/PsCom/vmaxnm.k)
Importing: Source(/home/hhh1/PsCom/vmov.k)
Importing: Source(/home/hhh1/PsCom/vmaxa.k)
Importing: Source(/home/hhh1/PsCom/vmaxnma.k)
Importing: Source(/home/hhh1/PsCom/vmaxnmv.k)
Importing: Source(/home/hhh1/PsCom/mov.k)
Importing: Source(/home/hhh1/PsCom/vmaxnmav.k)
Importing: Source(/home/hhh1/PsCom/vmaxv.k)
Importing: Source(/home/hhh1/PsCom/vmaxav.k)
Importing: Source(/home/hhh1/PsCom/vmin.k)
Importing: Source(/home/hhh1/PsCom/vmina.k)
Importing: Source(/home/hhh1/PsCom/vminv.k)
Importing: Source(/home/hhh1/PsCom/vminav.k)
Importing: Source(/home/hhh1/PsCom/vminnm.k)
Importing: Source(/home/hhh1/PsCom/vminnma.k)
Importing: Source(/home/hhh1/PsCom/vminnmv.k)
Importing: Source(/home/hhh1/PsCom/vminnmav.k)
Importing: Source(/home/hhh1/PsCom/vmlav.k)
Importing: Source(/home/hhh1/PsCom/add-for-test.k)
Importing: Source(/home/hhh1/PsCom/max-for-test.k)
Importing: Source(/home/hhh1/PsCom/sst.k)
Importing: Source(/home/hhh1/PsCom/ext.k)
Importing: Source(/home/hhh1/PsCom/dtc.k)
Importing: Source(/home/hhh1/PsCom/cmp.k)
Importing: Source(/home/hhh1/PsCom/sto.k)
Importing: Source(/home/hhh1/PsCom/conca.k)
Importing: Source(/home/hhh1/PsCom/sint.k)
Importing: Source(/home/hhh1/PsCom/uint.k)
Importing: Source(/home/hhh1/PsCom/maa.k)
Parse spec modules [0/584 rules]                             =  0.016s

Parsing finished:   31.638 s
Pre-processing rule:
rule too long...
	Source: /home/hhh1/PsCom/test-spec-maa.k Location(7,10,116,78)
==================================

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(declare-fun |I11| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 |I11|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I11:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I11:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(declare-fun |I12| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 |I12|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I12:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I12:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I12:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 |I13|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I13:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I13:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I13:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 |I14|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 |I15|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 |I16|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(declare-fun |I27| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 |I27|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I27:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I27:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(declare-fun |I28| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 |I28|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I28:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I28:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I28:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 |I29|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I29:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I29:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I29:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 |I30|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 |I31|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 |I32|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= 0 (+ (+ (+ (+ (* |I13| |I29|) (* |I14| |I30|)) (* |I15| |I31|)) (* |I16| |I32|)) |B|))))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, _+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13:Int,, I29:Int),, _*Int_(I14:Int,, I30:Int)),, _*Int_(I15:Int,, I31:Int)),, _*Int_(I16:Int,, I32:Int)),, B:Int))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= (< (+ (+ (+ (+ (* |I13| |I29|) (* |I14| |I30|)) (* |I15| |I31|)) (* |I16| |I32|)) |B|) 0) true)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(_+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13:Int,, I29:Int),, _*Int_(I14:Int,, I30:Int)),, _*Int_(I15:Int,, I31:Int)),, _*Int_(I16:Int,, I32:Int)),, B:Int),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule uvalueMInt(mi(M:Int, N:Int)) => (2 ^Int M) +Int N
    requires N <Int 0 
    andBool  N >=Int -1 *Int (2 ^Int (M -Int 1))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(286,8,288,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= (>= (+ (+ (+ (+ (* |I13| |I29|) (* |I14| |I30|)) (* |I15| |I31|)) (* |I16| |I32|)) |B|) 0) true)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(_+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13:Int,, I29:Int),, _*Int_(I14:Int,, I30:Int)),, _*Int_(I15:Int,, I31:Int)),, _*Int_(I16:Int,, I32:Int)),, B:Int),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule uvalueMInt(mi(M:Int, N:Int)) => N
    requires N >=Int 0 
    andBool  N <Int (2 ^Int M)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(282,8,284,31)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(mi(Int(#"64"),, _+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13:Int,, I29:Int),, _*Int_(I14:Int,, I30:Int)),, _*Int_(I15:Int,, I31:Int)),, _*Int_(I16:Int,, I32:Int)),, B:Int))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 1 andBool E ==Int 33
	Source: /home/hhh1/PsCom/armv8-verification.k Location(326,8,332,43)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(mi(Int(#"64"),, _+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13:Int,, I29:Int),, _*Int_(I14:Int,, I30:Int)),, _*Int_(I15:Int,, I31:Int)),, _*Int_(I16:Int,, I32:Int)),, B:Int))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 32 andBool E ==Int 64 
	Source: /home/hhh1/PsCom/armv8-verification.k Location(318,8,324,44)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= (and (< (+ (+ (+ (+ (* |I32| |I16|) (* |I31| |I15|)) (* |I30| |I14|)) (* |I29| |I13|)) |B|) 2147483648) (>= (+ (+ (+ (* |I32| |I16|) (* |I31| |I15|)) (* |I30| |I14|)) (* |I29| |I13|)) -2147483648)) false)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_andBool_(_<Int_(_+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I32:Int,, I16:Int),, _*Int_(I31:Int,, I15:Int)),, _*Int_(I30:Int,, I14:Int)),, _*Int_(I29:Int,, I13:Int)),, B:Int),, Int(#"2147483648")),, _>=Int_(_+Int_(_+Int_(_+Int_(_*Int_(I32:Int,, I16:Int),, _*Int_(I31:Int,, I15:Int)),, _*Int_(I30:Int,, I14:Int)),, _*Int_(I29:Int,, I13:Int)),, Int(#"-2147483648"))),, Bool(#"false"))
)

Rule for formula above:
  rule ifMInt B then _ else M => M requires notBool B
	Source: /home/hhh1/PsCom/armv8-mint.k Location(160,8,160,54)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B| () Int)
(declare-fun |I13| () Int)
(declare-fun |I14| () Int)
(declare-fun |I15| () Int)
(declare-fun |I16| () Int)
(declare-fun |I29| () Int)
(declare-fun |I30| () Int)
(declare-fun |I31| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B| -3836) true)
	(= (< |B| 23333) true)
	(= (>= |I13| -128) true)
	(= (< |I13| 128) true)
	(= (>= |I14| -128) true)
	(= (< |I14| 128) true)
	(= (>= |I15| -128) true)
	(= (< |I15| 128) true)
	(= (>= |I16| -128) true)
	(= (< |I16| 128) true)
	(= (>= |I29| -128) true)
	(= (< |I29| 128) true)
	(= (>= |I30| -128) true)
	(= (< |I30| 128) true)
	(= (>= |I31| -128) true)
	(= (< |I31| 128) true)
	(= (>= |I32| -128) true)
	(= (< |I32| 128) true))
  (not (and
	(= (< (+ (+ (+ (+ (* |I32| |I16|) (* |I31| |I15|)) (* |I30| |I14|)) (* |I29| |I13|)) |B|) 2147483648) true)
	(= (>= (+ (+ (+ (* |I32| |I16|) (* |I31| |I15|)) (* |I30| |I14|)) (* |I29| |I13|)) -2147483648) true)))
))

Z3 query result: unsat

Z3 Implication (Function rule implication) RHS proved:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(_+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I32:Int,, I16:Int),, _*Int_(I31:Int,, I15:Int)),, _*Int_(I30:Int,, I14:Int)),, _*Int_(I29:Int,, I13:Int)),, B:Int),, Int(#"2147483648")),, Bool(#"true"))
    _==K_(_>=Int_(_+Int_(_+Int_(_+Int_(_*Int_(I32:Int,, I16:Int),, _*Int_(I31:Int,, I15:Int)),, _*Int_(I30:Int,, I14:Int)),, _*Int_(I29:Int,, I13:Int)),, Int(#"-2147483648")),, Bool(#"true"))
)

Rule for formula above:
  rule ifMInt B then M else _ => M requires B
	Source: /home/hhh1/PsCom/armv8-mint.k Location(159,8,159,46)
-------------

Initialization finished
==================================
Stats for each phase, time, used memory, implicit main GC time percentage:
Total init            :   33.521 s,	  868 MB, gc:  6.077 %
  JVM init            :    0.055 s
  Parsing             :   31.638 s,	  835 MB, gc:  6.438 %
  Rewriter init       :    1.827 s,	  868 MB, gc:  0.000 %

Init+Execution time:       1.827 s
  query build time                 :    0.075 s,      #         18
  Z3 Function rule implication time:    0.890 s,      #         17
      sat           :       16
      unsat (proved):       1
    cached queries:       39
    query build failures: 1

  Time and top-level event counts:
  resolveFunctionAndAnywhere time  :    1.713 s,      #        312
    evaluateFunction time            :    1.681 s,      #        134
      builtin evaluation               :           ,      #         35
      function rule                    :           ,      #          9
      no rule applicable               :           ,      #         36
      no function rules                :           ,      #         54
    applyAnywhereRules time          :    0.000 s,      #         28
      no anywhere rules                :           ,      #         28
    remaining time & # cached        :    0.032 s,      #        150
  impliesSMT time                  :    1.427 s,      #         57

  Recursive event counts:
  resolveFunctionAndAnywhere time  :           ,      #        884
    evaluateFunction time            :           ,      #        122
      builtin evaluation               :           ,      #         23
      function rule                    :           ,      #         65
      no rule applicable               :           ,      #         15
      no function rules                :           ,      #         19
    applyAnywhereRules time          :           ,      #          0
      no anywhere rules                :           ,      #          0
    # cached                         :           ,      #        762
==================================


STEP 1 v1 :    0.013 s, 		  868 MB, gc:  0.000 %
===================
<k>(KItem(#"scan"))
/\
ConjunctiveFormula(
  init equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I27_741| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I27_741|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I27_741:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I27_741:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I28_742| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I28_742|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I28_742:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I28_742:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I28_742:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I29_743|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I29_743:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I29_743:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I29_743:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I30_744|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30_744:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30_744:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30_744:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I31_745|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31_745:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31_745:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31_745:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I32_746|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32_746:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32_746:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32_746:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I14_737|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14_737:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14_737:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I15_738|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15_738:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15_738:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15_738:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I16_739|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16_739:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16_739:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16_739:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30_744:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30_744:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31_745:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31_745:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31_745:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32_746:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32_746:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32_746:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I11_734| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I11_734|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I11_734:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I11_734:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I12_735| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I12_735|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I12_735:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I12_735:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I12_735:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I13_736|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I13_736:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I13_736:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I13_736:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14_737:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14_737:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14_737:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15_738:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15_738:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15_738:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16_739:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16_739:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16_739:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 (+ (+ (+ (+ (* |I13_736| |I29_743|) (* |I14_737| |I30_744|)) (* |I15_738| |I31_745|)) (* |I16_739| |I32_746|)) |B_732|))))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, _+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13_736:Int,, I29_743:Int),, _*Int_(I14_737:Int,, I30_744:Int)),, _*Int_(I15_738:Int,, I31_745:Int)),, _*Int_(I16_739:Int,, I32_746:Int)),, B_732:Int))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= (< (+ (+ (+ (+ (* |I13_736| |I29_743|) (* |I14_737| |I30_744|)) (* |I15_738| |I31_745|)) (* |I16_739| |I32_746|)) |B_732|) 0) true)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(_+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13_736:Int,, I29_743:Int),, _*Int_(I14_737:Int,, I30_744:Int)),, _*Int_(I15_738:Int,, I31_745:Int)),, _*Int_(I16_739:Int,, I32_746:Int)),, B_732:Int),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule uvalueMInt(mi(M:Int, N:Int)) => (2 ^Int M) +Int N
    requires N <Int 0 
    andBool  N >=Int -1 *Int (2 ^Int (M -Int 1))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(286,8,288,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= (>= (+ (+ (+ (+ (* |I13_736| |I29_743|) (* |I14_737| |I30_744|)) (* |I15_738| |I31_745|)) (* |I16_739| |I32_746|)) |B_732|) 0) true)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(_+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13_736:Int,, I29_743:Int),, _*Int_(I14_737:Int,, I30_744:Int)),, _*Int_(I15_738:Int,, I31_745:Int)),, _*Int_(I16_739:Int,, I32_746:Int)),, B_732:Int),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule uvalueMInt(mi(M:Int, N:Int)) => N
    requires N >=Int 0 
    andBool  N <Int (2 ^Int M)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(282,8,284,31)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(mi(Int(#"64"),, _+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13_736:Int,, I29_743:Int),, _*Int_(I14_737:Int,, I30_744:Int)),, _*Int_(I15_738:Int,, I31_745:Int)),, _*Int_(I16_739:Int,, I32_746:Int)),, B_732:Int))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 1 andBool E ==Int 33
	Source: /home/hhh1/PsCom/armv8-verification.k Location(326,8,332,43)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(mi(Int(#"64"),, _+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13_736:Int,, I29_743:Int),, _*Int_(I14_737:Int,, I30_744:Int)),, _*Int_(I15_738:Int,, I31_745:Int)),, _*Int_(I16_739:Int,, I32_746:Int)),, B_732:Int))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 32 andBool E ==Int 64 
	Source: /home/hhh1/PsCom/armv8-verification.k Location(318,8,324,44)
-------------

Implication (Final implication) false at exit point 1:
ConjunctiveFormula(
  equalities:
    _==K_(<generatedTop>(<k>(KItem(#"scan")),, <begin>(#EmptyK()),, <currentstate>(String(#""text"")),, <nextloc>(_0_731:MInt),, <functarget>(Start(#"start") |-> MInt(#"32'0")   ),, <instructiontext>(code(memloc(MInt(#"32'0")) |-> storedInstr(_.___ARMV8-SYNTAX(StepCommand(#"maa"),, S8_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(r0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(Int(#"3")),, .List{"_,__ARMV8-SYNTAX"}(.KList)))))))   )),, <regstate>(String(#""Q1"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, concatenateMInt(mi(Int(#"8"),, I29_743:Int),, concatenateMInt(mi(Int(#"32"),, I28_742:Int),, concatenateMInt(mi(Int(#"32"),, I27_741:Int),, mi(Int(#"32"),, I26_740:Int))))))) String(#""S3"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))) String(#""S4"") |-> mi(Int(#"32"),, I26_740:Int) String(#""S5"") |-> mi(Int(#"32"),, I27_741:Int) String(#""S6"") |-> mi(Int(#"32"),, I28_742:Int) String(#""S7"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))) String(#""R15"") |-> memloc(MInt(#"32'0")) String(#""S0"") |-> mi(Int(#"32"),, I10_733:Int) String(#""S1"") |-> mi(Int(#"32"),, I11_734:Int) String(#""R0"") |-> mi(Int(#"32"),, B_732:Int) String(#""Q0"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, concatenateMInt(mi(Int(#"8"),, I13_736:Int),, concatenateMInt(mi(Int(#"32"),, I12_735:Int),, concatenateMInt(mi(Int(#"32"),, I11_734:Int),, mi(Int(#"32"),, I10_733:Int))))))) String(#""S2"") |-> mi(Int(#"32"),, I12_735:Int)   ),, DotVar0_730:K),, <generatedTop>(<k>(End_ARMV8-LOADER(.KList)),, <begin>(#EmptyK()),, <currentstate>(String(#""text"")),, <nextloc>(_0_731:MInt),, <functarget>(Start(#"start") |-> MInt(#"32'0")   ),, <instructiontext>(code(memloc(MInt(#"32'0")) |-> storedInstr(_.___ARMV8-SYNTAX(StepCommand(#"maa"),, S8_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(r0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(Int(#"3")),, .List{"_,__ARMV8-SYNTAX"}(.KList)))))))   )),, <regstate>(String(#""Q1"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, concatenateMInt(mi(Int(#"8"),, I29_743:Int),, concatenateMInt(mi(Int(#"32"),, I28_742:Int),, concatenateMInt(mi(Int(#"32"),, I27_741:Int),, mi(Int(#"32"),, I26_740:Int))))))) String(#""S3"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))) String(#""S4"") |-> mi(Int(#"32"),, I26_740:Int) String(#""S5"") |-> mi(Int(#"32"),, I27_741:Int) String(#""S6"") |-> mi(Int(#"32"),, I28_742:Int) String(#""S7"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))) String(#""R15"") |-> memloc(MInt(#"32'1")) String(#""S0"") |-> mi(Int(#"32"),, I10_733:Int) String(#""S1"") |-> mi(Int(#"32"),, I11_734:Int) String(#""R0"") |-> extractMInt(mi(Int(#"64"),, _+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13_736:Int,, I29_743:Int),, _*Int_(I14_737:Int,, I30_744:Int)),, _*Int_(I15_738:Int,, I31_745:Int)),, _*Int_(I16_739:Int,, I32_746:Int)),, B_732:Int)),, Int(#"32"),, Int(#"64")) String(#""Q0"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, concatenateMInt(mi(Int(#"8"),, I13_736:Int),, concatenateMInt(mi(Int(#"32"),, I12_735:Int),, concatenateMInt(mi(Int(#"32"),, I11_734:Int),, mi(Int(#"32"),, I10_733:Int))))))) String(#""S2"") |-> mi(Int(#"32"),, I12_735:Int)   ),, DotVar0_730:K))
  truth: FALSE
)

Rule for formula above:
rule too long...
	Source: /home/hhh1/PsCom/test-spec-maa.k Location(7,10,116,78)
-------------

Implication (Final implication) false at exit point 1:
ConjunctiveFormula(
  equalities:
    _==K_(<generatedTop>(<k>(#KSequence(execinstr(_.___ARMV8-SYNTAX(StepCommand(#"maa"),, S8_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(r0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(Int(#"3")),, .List{"_,__ARMV8-SYNTAX"}(.KList))))))), KItem(#"scan"))),, <begin>(#EmptyK()),, <currentstate>(String(#""text"")),, <nextloc>(_0_731:MInt),, <functarget>(Start(#"start") |-> MInt(#"32'0")   ),, <instructiontext>(code(memloc(MInt(#"32'0")) |-> storedInstr(_.___ARMV8-SYNTAX(StepCommand(#"maa"),, S8_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(r0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(Int(#"3")),, .List{"_,__ARMV8-SYNTAX"}(.KList)))))))   )),, <regstate>(String(#""Q1"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, concatenateMInt(mi(Int(#"8"),, I29_743:Int),, concatenateMInt(mi(Int(#"32"),, I28_742:Int),, concatenateMInt(mi(Int(#"32"),, I27_741:Int),, mi(Int(#"32"),, I26_740:Int))))))) String(#""S3"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))) String(#""S4"") |-> mi(Int(#"32"),, I26_740:Int) String(#""S5"") |-> mi(Int(#"32"),, I27_741:Int) String(#""S6"") |-> mi(Int(#"32"),, I28_742:Int) String(#""S7"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))) String(#""R15"") |-> memloc(MInt(#"32'1")) String(#""S0"") |-> mi(Int(#"32"),, I10_733:Int) String(#""S1"") |-> mi(Int(#"32"),, I11_734:Int) String(#""R0"") |-> mi(Int(#"32"),, B_732:Int) String(#""Q0"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, concatenateMInt(mi(Int(#"8"),, I13_736:Int),, concatenateMInt(mi(Int(#"32"),, I12_735:Int),, concatenateMInt(mi(Int(#"32"),, I11_734:Int),, mi(Int(#"32"),, I10_733:Int))))))) String(#""S2"") |-> mi(Int(#"32"),, I12_735:Int)   ),, DotVar0_730:K),, <generatedTop>(<k>(End_ARMV8-LOADER(.KList)),, <begin>(#EmptyK()),, <currentstate>(String(#""text"")),, <nextloc>(_0_731:MInt),, <functarget>(Start(#"start") |-> MInt(#"32'0")   ),, <instructiontext>(code(memloc(MInt(#"32'0")) |-> storedInstr(_.___ARMV8-SYNTAX(StepCommand(#"maa"),, S8_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(r0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(Int(#"3")),, .List{"_,__ARMV8-SYNTAX"}(.KList)))))))   )),, <regstate>(String(#""Q1"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, concatenateMInt(mi(Int(#"8"),, I29_743:Int),, concatenateMInt(mi(Int(#"32"),, I28_742:Int),, concatenateMInt(mi(Int(#"32"),, I27_741:Int),, mi(Int(#"32"),, I26_740:Int))))))) String(#""S3"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))) String(#""S4"") |-> mi(Int(#"32"),, I26_740:Int) String(#""S5"") |-> mi(Int(#"32"),, I27_741:Int) String(#""S6"") |-> mi(Int(#"32"),, I28_742:Int) String(#""S7"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))) String(#""R15"") |-> memloc(MInt(#"32'1")) String(#""S0"") |-> mi(Int(#"32"),, I10_733:Int) String(#""S1"") |-> mi(Int(#"32"),, I11_734:Int) String(#""R0"") |-> extractMInt(mi(Int(#"64"),, _+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13_736:Int,, I29_743:Int),, _*Int_(I14_737:Int,, I30_744:Int)),, _*Int_(I15_738:Int,, I31_745:Int)),, _*Int_(I16_739:Int,, I32_746:Int)),, B_732:Int)),, Int(#"32"),, Int(#"64")) String(#""Q0"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, concatenateMInt(mi(Int(#"8"),, I13_736:Int),, concatenateMInt(mi(Int(#"32"),, I12_735:Int),, concatenateMInt(mi(Int(#"32"),, I11_734:Int),, mi(Int(#"32"),, I10_733:Int))))))) String(#""S2"") |-> mi(Int(#"32"),, I12_735:Int)   ),, DotVar0_730:K))
  truth: FALSE
)

Rule for formula above:
rule too long...
	Source: /home/hhh1/PsCom/test-spec-maa.k Location(7,10,116,78)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I27| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I27|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I27:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I27:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I28| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I28|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I28:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I28:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I28:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I29| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I29|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I29:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I29:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I29:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I30| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I30|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I31| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I31|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I32| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I32|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I14| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I14|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I15| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I15|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I16| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I16|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I11| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I11|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I11:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I11:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I12| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I12|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I12:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I12:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I12:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(declare-fun |I13| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |I13|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I13:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I13:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I13:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0) 
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(165,8,166,49)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, MI2) => 
      mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), uvalueMInt(MI2))
    requires eqMInt(MI1, mi(bitwidthMInt(MI1), 0))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(311,8,313,51)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16:Int)
)

Rule for formula above:
  rule concatenateMInt(MI1, concatenateMInt(MI2, MI3)) => concatenateMInt(mi(bitwidthMInt(MI1) +Int bitwidthMInt(MI2), 0), MI3)
    requires zeroMInt(MI1) andBool zeroMInt(MI2)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(168,8,169,49)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))),, MInt(#"32'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))),, MInt(#"32'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int))))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 1 andBool E ==Int 33
	Source: /home/hhh1/PsCom/armv8-verification.k Location(326,8,332,43)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int))))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 32 andBool E ==Int 64 
	Source: /home/hhh1/PsCom/armv8-verification.k Location(318,8,324,44)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int))),, MInt(#"24'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 1 andBool E ==Int 33
	Source: /home/hhh1/PsCom/armv8-verification.k Location(326,8,332,43)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 32 andBool E ==Int 64 
	Source: /home/hhh1/PsCom/armv8-verification.k Location(318,8,324,44)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)),, MInt(#"16'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 1 andBool E ==Int 33
	Source: /home/hhh1/PsCom/armv8-verification.k Location(326,8,332,43)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 32 andBool E ==Int 64 
	Source: /home/hhh1/PsCom/armv8-verification.k Location(318,8,324,44)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I13_736:Int)
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))),, MInt(#"32'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))),, MInt(#"32'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int))))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 1 andBool E ==Int 33
	Source: /home/hhh1/PsCom/armv8-verification.k Location(326,8,332,43)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int))))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 32 andBool E ==Int 64 
	Source: /home/hhh1/PsCom/armv8-verification.k Location(318,8,324,44)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int))),, MInt(#"24'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 1 andBool E ==Int 33
	Source: /home/hhh1/PsCom/armv8-verification.k Location(326,8,332,43)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 32 andBool E ==Int 64 
	Source: /home/hhh1/PsCom/armv8-verification.k Location(318,8,324,44)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)),, MInt(#"16'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Anonymous vars in query:

Z3 warning. Query not generated: missing SMTLib translation for mi

Z3 Implication (Function rule implication) RHS dropped (cannot be proved):
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 1 andBool E ==Int 33
	Source: /home/hhh1/PsCom/armv8-verification.k Location(326,8,332,43)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(uvalueMInt(concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int))),, Int(#"0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI:MInt, S:Int, E:Int) => mi(E -Int S, uvalueMInt(MI))
    requires  bitwidthMInt(MI) ==Int E
    andBool   E >Int S
    andBool   bitwidthMInt(MI) >Int (E -Int S)
    andBool   uvalueMInt(MI) >=Int 0    
    andBool   uvalueMInt(MI) <Int (2 ^Int (E -Int S))    
    andBool   S ==Int 32 andBool E ==Int 64 
	Source: /home/hhh1/PsCom/armv8-verification.k Location(318,8,324,44)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I29_743:Int)
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))),, MInt(#"32'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int))),, MInt(#"24'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)),, MInt(#"16'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I14_737:Int)
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))),, MInt(#"32'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int))),, MInt(#"24'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)),, MInt(#"16'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I30_744:Int)
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))),, MInt(#"32'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int))),, MInt(#"24'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I15_738:Int)
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))),, MInt(#"32'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int))),, MInt(#"24'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I31_745:Int)
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))),, MInt(#"32'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I16_739:Int)
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(eqMInt(concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))),, MInt(#"32'0")),, Bool(#"true"))
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Z3 Implication (Function rule implication) failed (cached result):
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, I32_746:Int)
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= 0 |B_732|)))
))

Z3 query result: sat

Z3 Implication (Function rule implication) failed:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)
  implies
ConjunctiveFormula(
  equalities:
    _==K_(Int(#"0"),, B_732:Int)
)

Rule for formula above:
  rule extractMInt(MI, S, E) => mi(E -Int S, 0)
    requires zeroMInt(MI)
	Source: /home/hhh1/PsCom/armv8-verification.k Location(115,8,116,26)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= (>= |B_732| -2147483648) true)))
))

Z3 query result: unsat

Z3 Implication (Function rule implication) RHS proved:
ConjunctiveFormula(
  equalities:
    _==K_(_>=Int_(B_732:Int,, Int(#"-2147483648")),, Bool(#"true"))
)

Rule for formula above:
  rule svalueMInt(mi(M:Int, N:Int)) => N
    requires M >Int 1
      andBool
        N >=Int -1 *Int (2 ^Int (M -Int 1))
      andBool
        N <Int (2 ^Int (M -Int 1))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(298,8,303,35)
-------------

Anonymous vars in query:

Z3 query:
(declare-fun andInt (Int Int) Int)
(declare-fun shlInt (Int Int) Int)
(declare-fun shrInt (Int Int) Int)
(declare-fun xorInt (Int Int) Int)
(declare-fun orInt (Int Int) Int)
(declare-fun notInt (Int) Int)
(declare-fun |B_732| () Int)
(declare-fun |I13_736| () Int)
(declare-fun |I14_737| () Int)
(declare-fun |I15_738| () Int)
(declare-fun |I16_739| () Int)
(declare-fun |I29_743| () Int)
(declare-fun |I30_744| () Int)
(declare-fun |I31_745| () Int)
(declare-fun |I32_746| () Int)
(assert (and
  (and
	(= (>= |B_732| -3836) true)
	(= (< |B_732| 23333) true)
	(= (>= |I13_736| -128) true)
	(= (< |I13_736| 128) true)
	(= (>= |I14_737| -128) true)
	(= (< |I14_737| 128) true)
	(= (>= |I15_738| -128) true)
	(= (< |I15_738| 128) true)
	(= (>= |I16_739| -128) true)
	(= (< |I16_739| 128) true)
	(= (>= |I29_743| -128) true)
	(= (< |I29_743| 128) true)
	(= (>= |I30_744| -128) true)
	(= (< |I30_744| 128) true)
	(= (>= |I31_745| -128) true)
	(= (< |I31_745| 128) true)
	(= (>= |I32_746| -128) true)
	(= (< |I32_746| 128) true))
  (not (and
	(= (< |B_732| 2147483648) true)))
))

Z3 query result: unsat

Z3 Implication (Function rule implication) RHS proved:
ConjunctiveFormula(
  equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"2147483648")),, Bool(#"true"))
)

Rule for formula above:
  rule svalueMInt(mi(M:Int, N:Int)) => N
    requires M >Int 1
      andBool
        N >=Int -1 *Int (2 ^Int (M -Int 1))
      andBool
        N <Int (2 ^Int (M -Int 1))
	Source: /home/hhh1/PsCom/armv8-verification.k Location(298,8,303,35)
-------------

Implication (Final implication) false at exit point 1:
ConjunctiveFormula(
  equalities:
    _==K_(<generatedTop>(<k>(KItem(#"scan")),, <begin>(#EmptyK()),, <currentstate>(String(#""text"")),, <nextloc>(_0_731:MInt),, <functarget>(Start(#"start") |-> MInt(#"32'0")   ),, <instructiontext>(code(memloc(MInt(#"32'0")) |-> storedInstr(_.___ARMV8-SYNTAX(StepCommand(#"maa"),, S8_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(r0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(Int(#"3")),, .List{"_,__ARMV8-SYNTAX"}(.KList)))))))   )),, <regstate>(String(#""Q1"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, concatenateMInt(mi(Int(#"8"),, I29_743:Int),, concatenateMInt(mi(Int(#"32"),, I28_742:Int),, concatenateMInt(mi(Int(#"32"),, I27_741:Int),, mi(Int(#"32"),, I26_740:Int))))))) String(#""S3"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))) String(#""S4"") |-> mi(Int(#"32"),, I26_740:Int) String(#""S5"") |-> mi(Int(#"32"),, I27_741:Int) String(#""S6"") |-> mi(Int(#"32"),, I28_742:Int) String(#""S7"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))) String(#""R15"") |-> memloc(MInt(#"32'1")) String(#""S0"") |-> mi(Int(#"32"),, I10_733:Int) String(#""S1"") |-> mi(Int(#"32"),, I11_734:Int) String(#""R0"") |-> extractMInt(mi(Int(#"64"),, _+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13_736:Int,, I29_743:Int),, _*Int_(I14_737:Int,, I30_744:Int)),, _*Int_(I15_738:Int,, I31_745:Int)),, _*Int_(I16_739:Int,, I32_746:Int)),, B_732:Int)),, Int(#"32"),, Int(#"64")) String(#""Q0"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, concatenateMInt(mi(Int(#"8"),, I13_736:Int),, concatenateMInt(mi(Int(#"32"),, I12_735:Int),, concatenateMInt(mi(Int(#"32"),, I11_734:Int),, mi(Int(#"32"),, I10_733:Int))))))) String(#""S2"") |-> mi(Int(#"32"),, I12_735:Int)   ),, DotVar0_730:K),, <generatedTop>(<k>(End_ARMV8-LOADER(.KList)),, <begin>(#EmptyK()),, <currentstate>(String(#""text"")),, <nextloc>(_0_731:MInt),, <functarget>(Start(#"start") |-> MInt(#"32'0")   ),, <instructiontext>(code(memloc(MInt(#"32'0")) |-> storedInstr(_.___ARMV8-SYNTAX(StepCommand(#"maa"),, S8_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(r0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(Int(#"3")),, .List{"_,__ARMV8-SYNTAX"}(.KList)))))))   )),, <regstate>(String(#""Q1"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, concatenateMInt(mi(Int(#"8"),, I29_743:Int),, concatenateMInt(mi(Int(#"32"),, I28_742:Int),, concatenateMInt(mi(Int(#"32"),, I27_741:Int),, mi(Int(#"32"),, I26_740:Int))))))) String(#""S3"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))) String(#""S4"") |-> mi(Int(#"32"),, I26_740:Int) String(#""S5"") |-> mi(Int(#"32"),, I27_741:Int) String(#""S6"") |-> mi(Int(#"32"),, I28_742:Int) String(#""S7"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))) String(#""R15"") |-> memloc(MInt(#"32'1")) String(#""S0"") |-> mi(Int(#"32"),, I10_733:Int) String(#""S1"") |-> mi(Int(#"32"),, I11_734:Int) String(#""R0"") |-> extractMInt(mi(Int(#"64"),, _+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13_736:Int,, I29_743:Int),, _*Int_(I14_737:Int,, I30_744:Int)),, _*Int_(I15_738:Int,, I31_745:Int)),, _*Int_(I16_739:Int,, I32_746:Int)),, B_732:Int)),, Int(#"32"),, Int(#"64")) String(#""Q0"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, concatenateMInt(mi(Int(#"8"),, I13_736:Int),, concatenateMInt(mi(Int(#"32"),, I12_735:Int),, concatenateMInt(mi(Int(#"32"),, I11_734:Int),, mi(Int(#"32"),, I10_733:Int))))))) String(#""S2"") |-> mi(Int(#"32"),, I12_735:Int)   ),, DotVar0_730:K))
  truth: FALSE
)

Rule for formula above:
rule too long...
	Source: /home/hhh1/PsCom/test-spec-maa.k Location(7,10,116,78)
-------------

Implication (Final implication) false at exit point 1:
ConjunctiveFormula(
  equalities:
    _==K_(<generatedTop>(<k>(#EmptyK()),, <begin>(#EmptyK()),, <currentstate>(String(#""text"")),, <nextloc>(_0_731:MInt),, <functarget>(Start(#"start") |-> MInt(#"32'0")   ),, <instructiontext>(code(memloc(MInt(#"32'0")) |-> storedInstr(_.___ARMV8-SYNTAX(StepCommand(#"maa"),, S8_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(r0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(Int(#"3")),, .List{"_,__ARMV8-SYNTAX"}(.KList)))))))   )),, <regstate>(String(#""Q1"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, concatenateMInt(mi(Int(#"8"),, I29_743:Int),, concatenateMInt(mi(Int(#"32"),, I28_742:Int),, concatenateMInt(mi(Int(#"32"),, I27_741:Int),, mi(Int(#"32"),, I26_740:Int))))))) String(#""S3"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))) String(#""S4"") |-> mi(Int(#"32"),, I26_740:Int) String(#""S5"") |-> mi(Int(#"32"),, I27_741:Int) String(#""S6"") |-> mi(Int(#"32"),, I28_742:Int) String(#""S7"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))) String(#""R15"") |-> memloc(MInt(#"32'1")) String(#""S0"") |-> mi(Int(#"32"),, I10_733:Int) String(#""S1"") |-> mi(Int(#"32"),, I11_734:Int) String(#""R0"") |-> extractMInt(mi(Int(#"64"),, _+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13_736:Int,, I29_743:Int),, _*Int_(I14_737:Int,, I30_744:Int)),, _*Int_(I15_738:Int,, I31_745:Int)),, _*Int_(I16_739:Int,, I32_746:Int)),, B_732:Int)),, Int(#"32"),, Int(#"64")) String(#""Q0"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, concatenateMInt(mi(Int(#"8"),, I13_736:Int),, concatenateMInt(mi(Int(#"32"),, I12_735:Int),, concatenateMInt(mi(Int(#"32"),, I11_734:Int),, mi(Int(#"32"),, I10_733:Int))))))) String(#""S2"") |-> mi(Int(#"32"),, I12_735:Int)   ),, DotVar0_730:K),, <generatedTop>(<k>(End_ARMV8-LOADER(.KList)),, <begin>(#EmptyK()),, <currentstate>(String(#""text"")),, <nextloc>(_0_731:MInt),, <functarget>(Start(#"start") |-> MInt(#"32'0")   ),, <instructiontext>(code(memloc(MInt(#"32'0")) |-> storedInstr(_.___ARMV8-SYNTAX(StepCommand(#"maa"),, S8_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(r0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q0_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(q1_ARMV8-SYNTAX(.KList),, _,__ARMV8-SYNTAX(#__ARMV8-SYNTAX(Int(#"3")),, .List{"_,__ARMV8-SYNTAX"}(.KList)))))))   )),, <regstate>(String(#""Q1"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, concatenateMInt(mi(Int(#"8"),, I29_743:Int),, concatenateMInt(mi(Int(#"32"),, I28_742:Int),, concatenateMInt(mi(Int(#"32"),, I27_741:Int),, mi(Int(#"32"),, I26_740:Int))))))) String(#""S3"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, mi(Int(#"8"),, I13_736:Int)))) String(#""S4"") |-> mi(Int(#"32"),, I26_740:Int) String(#""S5"") |-> mi(Int(#"32"),, I27_741:Int) String(#""S6"") |-> mi(Int(#"32"),, I28_742:Int) String(#""S7"") |-> concatenateMInt(mi(Int(#"8"),, I32_746:Int),, concatenateMInt(mi(Int(#"8"),, I31_745:Int),, concatenateMInt(mi(Int(#"8"),, I30_744:Int),, mi(Int(#"8"),, I29_743:Int)))) String(#""R15"") |-> memloc(MInt(#"32'1")) String(#""S0"") |-> mi(Int(#"32"),, I10_733:Int) String(#""S1"") |-> mi(Int(#"32"),, I11_734:Int) String(#""R0"") |-> extractMInt(mi(Int(#"64"),, _+Int_(_+Int_(_+Int_(_+Int_(_*Int_(I13_736:Int,, I29_743:Int),, _*Int_(I14_737:Int,, I30_744:Int)),, _*Int_(I15_738:Int,, I31_745:Int)),, _*Int_(I16_739:Int,, I32_746:Int)),, B_732:Int)),, Int(#"32"),, Int(#"64")) String(#""Q0"") |-> concatenateMInt(mi(Int(#"8"),, I16_739:Int),, concatenateMInt(mi(Int(#"8"),, I15_738:Int),, concatenateMInt(mi(Int(#"8"),, I14_737:Int),, concatenateMInt(mi(Int(#"8"),, I13_736:Int),, concatenateMInt(mi(Int(#"32"),, I12_735:Int),, concatenateMInt(mi(Int(#"32"),, I11_734:Int),, mi(Int(#"32"),, I10_733:Int))))))) String(#""S2"") |-> mi(Int(#"32"),, I12_735:Int)   ),, DotVar0_730:K))
  truth: FALSE
)

Rule for formula above:
rule too long...
	Source: /home/hhh1/PsCom/test-spec-maa.k Location(7,10,116,78)
-------------
Implication (Final implication) proved by simplification

STEP 5 v1 :    2.516 s, 		  895 MB, gc:  0.000 %
===================
<k>(End_ARMV8-LOADER(.KList))
/\
ConjunctiveFormula(
  init equalities:
    _==K_(_<Int_(B_732:Int,, Int(#"23333")),, Bool(#"true"))
    _==K_(_<Int_(I13_736:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I14_737:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I15_738:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I16_739:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I29_743:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I30_744:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I31_745:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_<Int_(I32_746:Int,, Int(#"128")),, Bool(#"true"))
    _==K_(_>=Int_(B_732:Int,, Int(#"-3836")),, Bool(#"true"))
    _==K_(_>=Int_(I13_736:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I14_737:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I15_738:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I16_739:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I29_743:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I30_744:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I31_745:Int,, Int(#"-128")),, Bool(#"true"))
    _==K_(_>=Int_(I32_746:Int,, Int(#"-128")),, Bool(#"true"))
)

============
Step 5: eliminated!
============


SPEC PROVED: /home/hhh1/PsCom/test-spec-maa.k Location(7,10,116,78)
==================================
Execution paths: 1
Longest path: 5 steps
Stats for each phase, time, used memory, implicit main GC time percentage:
Total                 :   36.052 s,	  895 MB, gc:  5.650 %
  JVM init            :    0.055 s
  Parsing             :   31.638 s,	  835 MB, gc:  6.438 %
  Rewriter init       :    1.827 s,	  868 MB, gc:  0.000 %
  Execution           :    2.532 s,	  895 MB, gc:  0.000 %

Init+Execution time:       4.359 s
  query build time                 :    0.150 s,      #         61
  Z3 Function rule implication time:    2.215 s,      #         47
      sat           :       44
      unsat (proved):       3
    cached queries:       144
    query build failures: 14

  Time and top-level event counts:
  resolveFunctionAndAnywhere time  :    4.108 s,      #        656
    evaluateFunction time            :    4.064 s,      #        335
      builtin evaluation               :           ,      #         58
      function rule                    :           ,      #         32
      no rule applicable               :           ,      #        139
      no function rules                :           ,      #        106
    applyAnywhereRules time          :    0.000 s,      #         56
      no anywhere rules                :           ,      #         56
    remaining time & # cached        :    0.044 s,      #        265
  log time                         :    0.019 s,      #          6
  impliesSMT time                  :    3.557 s,      #        205

  Recursive event counts:
  resolveFunctionAndAnywhere time  :           ,      #       2355
    evaluateFunction time            :           ,      #        506
      builtin evaluation               :           ,      #         71
      function rule                    :           ,      #        318
      no rule applicable               :           ,      #         68
      no function rules                :           ,      #         49
    applyAnywhereRules time          :           ,      #          0
      no anywhere rules                :           ,      #          0
    # cached                         :           ,      #       1849

Max memory : 3641 MB
==================================

#True
[Warning] Internal: execution phase: missing SMTLib translation for mi . Search
the logs starting with 'Z3 warning' to see the Z3 implication that generated
the warning. (missing SMTLib translation for mi)
[Warning] Internal: init phase: missing SMTLib translation for mi . Search the
logs starting with 'Z3 warning' to see the Z3 implication that generated the
warning. (missing SMTLib translation for mi)
]0;hhh1@hhh1-virtual-machine:~/PsCom\]7;file://hhh1-virtual-machine/home/hhh1/PsCom\]0;hhh1@hhh1-virtual-machine: ~/PsCom[01;32mhhh1@hhh1-virtual-machine[00m:[01;34m~/PsCom[00m$ exit

Script done on 2022-09-13 17:35:47+08:00 [COMMAND_EXIT_CODE="0"]
